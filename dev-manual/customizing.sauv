====== Customizing Sympa/WWSympa ======


====== Template file format ======

Template files within Sympa used to be in a proprietary format that has been replaced with the [[http://www.tt2.org|TT2]] template format.

You will find detailed documentation about the TT2 syntax on the web site: **http://www.tt2.org**

Here are some aspects regarding templates that are specific to Sympa:

  * References to PO catalogues are noted with the **<nowiki>[% loc %]</nowiki>** tag that may include parameters. Example: <code>[%|loc(list.name,list.host)%]Welcome to list %1 %2[%END%]</code>
  * Few exceptions apart, templates cannot insert or parse a file given its full or relative path, for security reasons. Only the file name should be provided; the TT2 parser will then use the ''INCLUDE_PATH'' provided by Sympa to find the relevant file to insert/parse.
  * The **qencode** filter should be used if a template includes SMTP header fields that should be Q-encoded. Example: <code>[% FILTER qencode %]Message à modérer[%END%]</code>
  * You can write different versions of a template file in different languages, each of them being located in a subdirectory of the ''tt2'' directory. Example: ''/mail_tt2/fr_FR/helpfile.tt2''.
  * Your templates can include [[#custom_parameters|custom parameters]].



====== Mail template files ======

These files are used by Sympa as service messages for several commands. These files are interpreted (parsed) by Sympa and respect the TT2 template format; every file has a **.tt2** extension. See [[customizing#template_file_format|Template file format]].

Sympa looks for these files in the following order (where ''<list>'' is the listname if defined, ''<action>'' is the name of the command, and ''<lang>'' is the preferred language of the user):

  - ''/home/sympa/expl/<list>/mail_tt2/<lang>/<action>.tt2''.
  - ''/home/sympa/expl/<list>/mail_tt2/<action>.tt2''.
  - ''/home/sympa/etc/my.domain.org/mail_tt2/<lang>/<action>.tt2''.
  - ''/home/sympa/etc/my.domain.org/mail_tt2/<action>.tt2''.
  - ''/home/sympa/etc/mail_tt2/<lang>/<action>.tt2''.
  - ''/home/sympa/etc/mail_tt2/<action>.tt2''.
  - ''/home/sympa/bin/etc/mail_tt2/<lang>/<action>.tt2''.
  - ''/home/sympa/bin/etc/mail_tt2/<action>.tt2''.

If the file starts with a From: line, it is considered as a full message and will be sent (after parsing) without adding SMTP headers. Otherwise, the file is treated as a text/plain message body.

The following variables may be used in these template files:

  * [% sender %]: e-mail address of the sender;
  * [% return_path %]: Return-Path SMTP header of the message;
  * [% fromlist %]: From SMTP header of the message;
  * [% replyto %]: Reply-To SMTP header of the message ;
  * [% boundary %]: MIME parts separator calculated for service messages;
  * [% robot_domain %]: domain of a virtual host as defined in the ''host'' parameter;
  * [% list.lang %]: default language of the list;
  * [% list.name %]: the list name;
  * [% list.domain %]: the domain the list is hosted by;
  * [% list.host %]: the domain the list is hosted by;
  * [% list.subject %]: the subject of the list;
  * [% list.owner %]: an array containing the list owners address;
  * [% list.dir %]: The absolute path to the list's configuration directory;
  * [% conf.email %]: sympa email address local part;
  * [% conf.host %]: sympa default host domain name;
  * [% conf.sympa %]: sympa's complete email address;
  * [% conf.request %]: return address for bounces (sympa-request);
  * [% conf.listmaster %]: listmaster's email addresses;
  * [% conf.wwsympa_url %]: //WWSympa//'s root URL;
  * [% conf.title %]: Host web page title;
  * [% conf.listmaster_email %]: listmaster'e-mail address local part;
  * [% conf.version %]: //for global messages only!// Sympa version number;
  * [% user.email %]: user email address;
  * [% user.lang %]: user language;
  * [% user.gecos %]: user gecos field (usually his/her name);
  * [% user.password %]: user password;
  * [% subscriber.date %]: date when the user subscribed to this list;
  * [% subscriber.update_date %]: date when the user last updated her/his profile;
  * [% subscriber.bounce %]: subscriber's bounce rate;
  * [% subscriber.first_bounce %]: date when this subscriber had her/his first bounce.

=====  helpfile.tt2 =====

This file is sent in response to a ''HELP'' command. You may use additional variables:

  * [% is_owner %]: ''TRUE'' if the user is list owner;

  * [% is_editor %]: ''TRUE'' if the user is list editor.


=====  lists.tt2 =====

File returned by the ''LISTS'' command. An additional variable is available:

  * [% lists %]: this is a hash table indexed by list names and containing lists' subjects. Only lists visible to the user (according to the ''visibility'' list parameter) are listed.

Example:
<code>
  These are the public lists for [conf->email]@[conf->domain]

  [% FOREACH l = lists %]
  [% l.key %]@[% l.value.host %] : [% l.value.subject %] ([% l.value.topics.0 %])

  [% END %]
</code>

=====  global_remind.tt2 =====

This file is sent in response to a ''REMIND *'' command. (see [[sympa-commands#owner_commands|Owner commands]]) You may use additional variables:

-[% lists %]: this is an array containing the names of the lists the user is subscribed to.

Example:
<code>
  This is a subscription reminder.

  You are subscribed to the following lists:
  [% FOREACH l = lists %]

   [% l %]: [% conf.wwsympa\_url \%]/info/[% l %]

  [% END %]

  Your subscriber e-mail: [% user.email %]
  Your password: [% user.password %]
</code>

=====  your_infected_msg.tt2 =====

This message is sent to warn the sender of a virus infected mail, indicating the name of the virus found (see [[antivirus#antivirus|Antivirus]]).


====== Web template files ======

You may define your own web template files, different from the standard ones. //WWSympa// first looks for list specific web templates, then for site web templates, before falling back on its defaults.

Your list web template files should be placed in the ''/home/sympa/expl/mylist/web_tt2'' directory, and your site web templates in the ''~/home/sympa/etc/web_tt2'' directory.

===== Sympa colors customization guide =====

Sympa colors are managed using [[conf-parameters/part1#color_0_color_1_..._color_15|color_x parameters in Sympa.conf]].

You will find below how these parameters are interpreted in the Sympa web interface. Note that if you activated the [[conf-parameters/part1#css_path|static CSS]], you will need to hit the "install static css" button once again to see the changes in your color definitions.
**
Install time:** web colors are defined in Sympa's main Makefile (see [[installing-sympa#compilation_and_installation|Compilation and installation]]).

==== What are the colors used for? ====

  * ''color_0'': background color of:
    * one out of two lines in tables, alternated with ''color_5''. It is intended to be the darkest shade, as ''color_5'' has other uses.
  * ''color_1'': background color of:
    * main navigation tabs
    * most of the buttons (those corresponding to the MainMenuLinks CSS class)
  * ''color_2'': font and border color of:
    * almost everything. Exceptions for borders are <TD/> borders; exceptions for fonts are links, buttons and some titles.
  * ''color_3'': background color of:
    * top box
    * footer box
  * ''color_4'': background color of:
    * page
    * table headers (at the very exception of the table displaying new lists)
    * the rest of the buttons (which are in fact hyperlinks, corresponding to the actionMenuLinks CSS class)
  * ''color_5'': background color of:
    * all the main interface boxes
    * the lightest color for the table lines, contrasting with color_0
  * ''color_6'': background color of:
    * active action (for example, the section of the admin options which is currently viewed, or the header corresponding to the data following which an array is currently sorted)
    * hovered actions
    * hovered buttons corresponding to the actionMenuLinks CSS class
    * hovered navigation tabs
  * ''color_7'': background color of:
    * error messages
    * just edited area in the administrative management section.
  * ''color_8'': doted underscore color of:
    * hyperlinks
  * ''color_9'': 
    * border color for active action (for example, the section of the admin options which is currently viewed, or the header corresponding to the data following which an array is currently sorted)
    * border color for hovered hyperlinks corresponding to actions
    * background color for clicked links (corresponding to the .active state in a CSS)
  * ''color_10'': inactive buttons color. Rarely used. Don't bother.
  * ''color_11'': font color for:
    * active navigation tab
    * H2 titles
    * hovered links
    * some hovered buttons action(which are in fact hyperlinks, corresponding to the actionMenuLinks CSS class)
  * ''color_12'': Font color for the class smallblack. Not sure it is used.
  * ''color_13'': Background color of:
    * editable form areas (text areas, selection lists, ...)
    * the rest of hovered buttons (those corresponding to the MainMenuLinks CSS class)
  * ''color_14'': Unused
  * ''color_15'': Unused




==== What colors have the objects? ====

Here are gathered informations about the color parameters used for specific parts of the web interface. Take care to have a look to the precedent section as changing a parameter for an object is likely to change it for a few similar objects.

=== Main backgrounds ===

There are for different backgrounds in the web interface:

  * The page: ''color_4''; below all the rest. Just the base on which all the rest is stacked.
  * The main boxes: ''color_5''; This is where most of the text, buttons and links are displayed.
  * The top box and footer: ''color_3''; the top box is where your service name and main navigation tabs are displayed. The footer contains the version of Sympa.
  * The editable forms areas: ''color_13''; This is the color in all the form widgets which can be edited by users (text areas, selection lists).

=== Buttons ===

The buttons color management can be confusing, so let's just stress it a little:

^Color attribute ^ MainMenuLinks CSS class^actionMenuLinks CSS class^
|Default background color|''color_1''|''color_4''|
|Hovered background color|''color_13''|''color_6''|
|Default font color|''color_2''|''color_2''|
|Hovered font color|''color_1''|''color_11''|
|Default border color|''color_2''|''color_2''|
|Hovered border color|''color_2''|''color_2''|

=== Links ===

Hyperlinks have the same attributes as plain text, except:
  - They are always underscored by a doted line of color ''color_8''
  - When hovered, they take the color ''color_11''

=== Menu links ===

They have the following attributes:

^State^Font^Background^Border^
|Default|''color_2''|''None''|''None''|
|Hovered|''color_11''|''color_6''|''color_9''|
|Clicked|''color_2''|''color_9''|''color_6''|
|Active|''color_2''|''color_6''|''color_9''|

=== Miscellaneous ===

Note these additional informations:
  - navigation tabs have the same default parameters as the class MainMenuLinks but the same parameters as actionMenuLinks when hovered;
  - except for the MainMenuLinks button, //anything// likely to do something if clicked takes the font color ''color_11'' when hovered;
  - the menu links (Info, Admin, Edit list config...) are the only objects whose color actually changes on click.

====== CSS files ======

Sympa has four CSS stylesheets : ''style.css'', ''print.css'', ''print-preview.css'' and ''fullPage.css''.

It will use a stylesheet or the other regarding the kind of request the user addressed.

But, for each stylesheet, what is sent to users varies regarding the values of two parameters : ''css_path'' and ''css_url''.


===== css_path and css_url parameters =====

  * ''[[conf-parameters:part1#css_path|css_path]]'' defines the directory in which ''wwsympa'' can find static CSS files;
  * ''[[conf-parameters:part1#css_url|css_url]]'' defines the URL used by web clients to request the web server for stylesheets.

These parameters values are looked for in ''robot.conf'' first, then ''sympa.conf'', and then, if not found, set to hard-coded defaults.

- If ''css_path'' isn't defined, its default is set to : ''${static_content_path}/css''.
''static_content_path'' is the parameter defining the root path to all static content for Sympa. If  ''static_content_path''  is undefined in ''sympa.conf'' or ''robot.conf'', its value is set to : ''sympa_home_dir/static_content''.
- If ''css_url'' isn't defined, its default is set to : ''${static_content_url}/css''.
''static_content_url'' is the parameter defining the root url to all static content in Sympa. If ''static_content_url'' is undefined in ''sympa.conf'' or ''robot.conf'', its value is set to : ''/static-sympa''.

This way :
  * the default path to static stylesheet is : ''sympa_home_dir/static_content/css/style.css''

  * the default URL to the static stylesheet is : ''http://host.name/static-sympa/css/style.css''

The ''sympa_wizard.pl'' script, run at install, can set both ''static_content_path'' and ''static_content_url'' values.

===== What stylesheet will be used ? =====

  * Case 1 : if the directory defined by ''css_path'' exists, the value of ''css_url'' will be the one defined in Sympa config.

  * Case 2 : if this directory doesn't exist, the value of ''css_url'' will be that of the ''css'' action (i.e. ''http://url.to.wwsympa/css/'').

The content delivered varies greatly according to which case happens.

----

  * **Case 1**: the stylesheet received by the client is the **file** found in the directory that your Apache server configuration associates to this URL. It is up to you to decide whether this directory must correspond to the ''css_path'' value or not. If it corresponds to the ''css_path'' value, you must use the files generated by ''wwsympa''. If not, you will use whichever stylesheet you want to define. Whatever solution you choose, take note that ''wwsympa'' will not, opposite to case 2, be involved in the stylesheet delivery, as it won't be addressed the HTTP request. This way, your stylesheet is served directly by Apache and remains in cache, thus saving bandwidth.

----

  * **Case 2**: the stylesheet received by the client is the result of a **wwsympa action** called ''css''. ''wwsympa'' parses a file named ''css.tt2'' that it finds in the relevant ''web_tt2'' folder and generates on the fly a stylesheet that it returns to the client. In this case, the action is triggered any time a page is requested to ''wwsympa'' and the four stylesheets are sent along with the page. This is more bandwidth consuming than case 1, but any change in ''css.tt2'' will be applied at once, without static content generation. This is particularly usefull when experimenting a new stylesheet.

===== Using wwsympa CSS generation process =====

The CSS generation described in the case 2 of the previous section has two purposes :

  - Serve CSS files generated on the fly for each request

  - Generate static CSS files stored in the directory defined by the ''css_path'' parameter. This is done by hitting the "Install static CSS" button in the skins administration page of wwsympa. These files are subsequently used as static content.

The following explanations apply whichever you use static (but sympa-generated) or dynamic CSS. Both operations use the same template file and data.

  * **Colors** are defined in either ''sympa.conf'' or ''robot.conf''. The role of each color parameter is explained in the [[customizing#sympa_colors_customization_guide|color customization guide]].
For the particular case of colors, though, note that the colors used are those from the ''robot.conf'' or ''sympa.conf'', whichever is relevant. ''wwsympa'' uses those loaded in memory at the time the CSS generation is requested, being to generate a static stylesheet or to deliver a dynamic one directly. That means that if you change colors in your configuration file, these changes must be taken into account by ''wwsympa'' prior to regenerating CSS.

  * **Any other CSS information** is defined in ''css.tt2'' template. As any other template, take care not to modify the default file (in ''sympa_home/bin/etc/web_tt2'') but to copy it in ''sympa_home/etc/web_tt2'' or ''sympa_home/etc/robot_dir/web_tt2'' and modify the copies. In these copies, you can add/change/delete anything you like, it is not supposed to suffer from upgrades.

===== Use custom stylesheets only =====

Nothing prevents you from configuring your Apache server in order that requests to URL containing ''css_url'' be answered by serving the content of a directory different from the one corresponding to ''css_path''. This way, you can directly edit the ''style.css'' file, and this file won't be overwritten during the next update. The drawback is that you can't use the ''color_x'' parameters defined in your ''robot.conf''/''sympa.conf'' file. Indeed, they are used only when parsing ''css.tt2''.


====== Internationalization ======

Sympa was originally designed as a multilingual Mailing List Manager. Even in its earliest versions, Sympa separated messages from the code itself, messages being stored in NLS catalogues (according to the XPG4 standard). Later a ''lang'' list parameter was introduced. Nowadays, Sympa is able to keep track of individual users' language preferences.

If you are willing to provide Sympa into your native language, please check the **translation howto**: [[http://www.sympa.org/howtotranslate.html]].

=====  Sympa internationalization =====

Every message sent by Sympa to users, owners and editors is outside the code, in a message catalog. These catalogs are located in the ''/home/sympa/locale'' directory.

To tell Sympa to use a particular message catalog, you can should set the ''lang'' parameter in ''sympa.conf''.

=====  List internationalization =====

The ''lang'' list parameter defines the language for a list. It is currently used by //WWSympa// and to initialize users' language preferences at subscription time.

In future versions, all messages returned by Sympa concerning a list should be in the list's language.



=====  User internationalization =====

The user language preference is currently used by //WWSympa// only. There is no email-based command for a user to set his/her language. The language preference is initialized when the user subscribes to his/her first list. //WWSympa// allows the user to change it.


====== Topics ======

//WWSympa//'s homepage shows a list of topics for classifying mailing lists. This is dynamically generated using the different lists' ''topics'' configuration parameters. A list may appear in multiple categories. \\
This parameter is different from the ''msg_topic'' parameter used to tag list messages.

The list of topics is defined in the ''topics.conf'' configuration file, located in the ''/home/sympa/etc'' directory. The format of this file is as follows:

<code>
  <topic1_name>
  title	<topic1 title>
  title.fr <topic french title>
  visibility <topic1 visibility>
  ....
  <topicn_name/subtopic_name>
  title	<topicn title>
  title.de <topicn german title>
</code>

You will notice that subtopics can be used, the separator being <nowiki>/</nowiki>. The topic name is composed of alphanumerics (0-1a-zA-Z) or underscores (_). The order in which the topics are listed is respected in //WWSympa//'s homepage. The ''visibility'' line defines who can view the topic and subtopics. It refers to the associated ''topics_visibility'' authorization scenario. You will find a sample ''topics.conf'' in the ''sample'' directory; NONE is installed as the default.

A default topic is hard-coded in Sympa: ''default''. This default topic contains all lists for which a topic has not been specified.


======  Authorization scenarios ======

See [[authorization-scenarios|Authorization scenarios]].




======  Custom parameters ======

You can create an unlimited number of custom parameters to be used with [[authorization-scenarios|authorization scenarios]], [[#web_template_files|web templates]] and [[#template_file_format|mail templates]].

These parameters are defined in each list configuration through the web interface by using the form in //Admin -> Edit list config -> Miscellaneous// page. There, you add a parameter in the **custom parameters (custom_vars)** section.
The **var name** field corresponds to your custom parameter name, the **var value** field corresponds to your custom parameter value.

You can later access this parameter:

  * in scenarios : with the syntax ''[custom_vars->your_custom_var_name]''
  * in web or mail templates : with the syntax ''custom_vars.your_custom_var_name''


==== Example ====

You define a custom parameter with the following values:

  * var name : ''sisterList''
  * var value : ''math-teachers''

You can use it as follows:

  * in scenarios : with the syntax ''[custom_vars->sisterList]'', which will correspond to "math-teachers"
  * in web or mail templates : with the syntax ''custom_vars.sisterList'', which will correspond to "math-teachers"

====== Loop detection ======

Sympa uses multiple heuristics to avoid loops in Mailing lists.

First, it rejects messages coming from a robot (as indicated by the ''From:'' and other header fields) and messages containing commands.

Second, every message sent by Sympa includes an ''X-Loop'' header field set to the listname. If the message comes back, Sympa will detect that it has already been sent (unless ''X-Loop'' header fields have been erased).

Third, Sympa keeps track of Message IDs and will refuse to send multiple messages with the same message ID to the same mailing list.

Finally, Sympa detect loops arising from command reports (i.e. sympa-generated replies to commands). This sort of loop might occur as follows:

  - X sends a command to Sympa
  - Sympa sends a command report to X
  - X has installed a home-made vacation program replying to messages
  - Sympa processes the reply and sends a report
  - Looping to step 3

Sympa keeps track (via an internal counter) of reports sent to any particular address. The loop detection algorithm is:

  * increment the counter
  * If we are within the sampling period (as defined by the ''loop_command_sampling_delay'' parameter)
    * If the counter exceeds the ''loop_command_max'' parameter, then do not send the report, and notify listmasters
    * Else, start a new sampling period and reinitialize the counter, i.e. multiply it by the ''loop_command_decrease_factor'' parameter





====== Tasks ======

A task is a sequence of simple actions which realize a complex routine. It is executed in the background by the task manager daemon and allows listmasters to automate the processing of recurring tasks. For example, a task sends to a list's subscribers a message to remind them of their subscription on a yearly basis.

A task is created with a task model. It is a text file which describes a sequence of simple actions. It may have different versions (for instance reminding subscribers every year or semester). A task model file name has the following format: ''<model name>.<model version>.task''. For instance ''remind.annual.task'' or ''remind.semestrial.task''.

Sympa provides several task models stored in the ''/home/sympa/bin/etc/global_task_models'' and ''/home/sympa/bin/etc/list_task_models'' directories. Others can be designed by listmasters.

A task can be either global or related to a list.

**Important note**: Two different objects used by the task manager can have the same name;
  * the //model// name referred above, used in the task model file name composition;
  * the //command// name used //inside// the task model file to call a functionality offered by the task manager.

//These are two completely different things// but for historical reasons some have exactly the same name. For example there is a model name called ''sync_include'' AND a command called ''sync_include()''. You can call the ''sync_include()'' command inside the ''sync_include'' model but you don't have to.

Paradoxically, you can perfectly create a task model called ''sync_include'' which will never call the ''sync_include()'' command. For your own good, though, you shouldn't.

=====  List task creation =====

You define in the list configuration file the model and the version you want to use (see [[parameters-privileges#remind|list task parameters]]). Then the task manager daemon will automatically create the task by looking for the appropriate model file in different directories in the following order:

  - ''/home/sympa/expl/<list path>/'';
  - ''/home/sympa/etc/<virtual host name>/list_task_models/'';
  - ''/home/sympa/etc/list_task_models/'';
  - ''/home/sympa/bin/etc/list_task_models/''.

See also [[list-definition#list_model_files|List model files]] to know more about standard list models provided with Sympa.

You can use two model names in your list task model files :

  * ''remind'' : generally used to automate the subscription reminding
  * ''sync_include'': generally used to automate synchronization with an external source of subscriber (included thanks to the Sympa inclusion mechanism)



=====  Global task creation =====

The task manager daemon checks if a version of a global task model is specified in ''sympa.conf'' and then creates a task as soon as it finds the model file by looking in different directories in the following order:

  - ''/home/sympa/etc/<virtual host name>/global_task_models/'';
  - ''/home/sympa/etc/global_task_models/'';
  - ''/home/sympa/bin/etc/global_task_models/''.

You can use 8 different model names for global tasks:

  * ''eval_bouncers'' : 
  * ''expire_bounce'' :
  * ''process_bouncers'' :
  * ''purge_logs_table'' :
  * ''purge_orphan_bounces'' :
  * ''purge_user_table'' :
  * ''remind'' :
  * ''sync_include'' :




=====  Model file format =====

Model files are composed of comments, labels, references, variables, date values and commands. All those syntactical elements are composed of alphanumerics (0-9a-zA-Z) and underscores (_).

  * Comment lines begin by '#' and are not interpreted by the task manager.
  * Label lines begin by '/' and are used by the next command (see below).
  * References are enclosed between brackets '[]'. They refer to a value depending on the object of the task (for instance ''[list->name]''). Those variables are instantiated when a task file is created from a model file. The list of available variables is the same as for templates (see [[list-definition#list_template_files|List template files]]) plus ''[creation_date]'' (see below).
  * Variables store results of some commands and are parameters for others. Their names begin with '@'.
  * A date value may be written in two ways:
    * Absolute dates follow the format: xxxxYxxMxxDxxHxxMin. Y is the year, M the month (1-12), D the day (1-28|30|31, leap-years are not managed), H the hour (0-23), Min the minute (0-59). H and Min are optional. For instance, 2001y12m4d44min is the 4th of December 2001 at 00h44.
    * Relative dates use the ''[creation_date]'' or ''[execution_date]'' references. ''[creation_date]'' is the date when the task file is created, ''[execution_date]'' when the command line is executed. A duration may follow with the '+' or '-' operators. The duration is expressed like an absolute date whose all parameters are optional. Examples: [creation_date], [execution_date]+1y, [execution_date]-6m4d.
  * Command arguments are separated by commas and enclosed between parenthesis '()'.

Here is the list of the currently available commands:

  * ''stop ()'' \\ Stops the execution of the task and deletes the task file;

  * ''next (<date value>, <label>)'' \\ Stops the execution. The task will go on at the date value and begin at the label line;

  * ''@deleted_users = delete_subs (@<user_selection>)'' \\ Deletes the ''@user_selection'' email list and stores user emails successfully deleted in ''@deleted_users'';

  * ''send_msg (<@user_selection>, <template>)'' \\ Sends the template message to emails stored in ''@user_selection'';

  * ''@user_selection = select_subs (<condition>)'' \\ Stores emails which match the condition in ''@user_selection''. See [[authorization-scenarios|Authorization Scenarios]] to know how to write conditions. Only available for list models;

  * ''create (global | list (<list name>), <model type>, <model>)'' \\ Creates a task for object with model file ''~model type.model.task'';

  * ''chk_cert_expiration (<template>, <date value>)'' \\ Sends the template message to emails whose certificate has expired or will expire before the date value;

  * ''update_crl (<file name>, <date value>)'' \\ Updates certificate revocation lists (CRL) which are expired or will expire before the date value. The file stores the CRL's URLs;

  * ''purge_logs_table()'' \\ Removes all logs from database;

  * ''purge_user_table()'' \\ Removes from database users which have no role and no subscription;

  * ''purge_orphan_bounces()'' \\ Cleans bounces by removing the unsubscribed users' archive;

  * ''eval_bouncers()'' \\ Evaluates all bouncing users of all lists and gives them a score from 0 to 100. (''0'' is for non bouncing users and ''100'' is for users who should be removed);

  * ''process_bouncers()'' \\ Executes actions defined in list configuration on all bouncing users, according to their score;

  * ''expire_bounce(<number_of_days>)'' \\ For all the lists, removes bouncing address from the bounce list if the last recorded bounce is older than ''<number_of_days>'' days before the last distribution date;

  * ''rm_file(<variable>)'' \\ Deletes the file whose path is given as argument;

  * ''exec(<script>)'' \\ Executes the script contained by the file whose path is given as argument;

  * ''sync_include()'' \\ Updates the list of users from a database or an LDAP directory.


Model files may have a [[manual:authorization-scenarios#scenario_title|scenario-like title]] line at the beginning.

When you change a configuration file by hand, and a task parameter is created or modified, it is up to you to remove existing task files in the ''task/'' spool if needed. Task file names have the following format:

''<date>.<label>.<model name>.<list name | global>'' where:

  * ''date'' represents the time when the task is executed, it is an epoch date;
  * ''label'' states where in the task file the execution begins. If empty, it starts at the beginning.

=====  Model file examples =====

  * remind.annual.task;
  * expire.annual.task;
  * crl_update.daily.task.

<code>
    title.gettext daily update of the certificate revocation list
    /ACTION
    update_crl (CA_list, [execution_date]+1d)
    next ([execution_date] + 1d, ACTION)
</CODE>
