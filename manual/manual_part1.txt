~~NOTOC~~
====== Sympa, a Mailing List Management Software - Reference manual ======

**Software version:** 5.4

**Authors:** Serge Aumont, Olivier Sala√ºn, David Verdin
======  Presentation ======

Sympa is an electronic mailing list manager. It is used to automate list management functions such as subscription, moderation, archive and shared document management. It also includes management functions which would normally require a substantial amount of work (time-consuming and costly for the list owner). These functions include automatic management of subscription renewals, list maintenance, and many others.

Sympa manages many different kinds of lists. It includes a web interface for all list functions including management. It allows a precise definition of each list feature, such as sender authorization, moderating process, etc. Sympa defines, for each feature of each list, exactly who is authorized to perform the relevant operations, along with the authentication method to be used. Currently, authentication can be based on either an SMTP ''From'' header, a password, or an S/MIME signature.
\\ Sympa is also able to extract electronic addresses from an LDAP directory or SQL server and to include them dynamically in a list.

Sympa manages the dispatching of messages, and makes it possible to reduce the load on the computer system where it is installed. In configurations with sufficient memory, Sympa is especially well adapted to handle large lists: for a list of 20,000 subscribers, it requires less than 6 minutes to send a message to 95 % of the subscribers, assuming that the network is available (tested on a 300 MHz, 256 MB i386 server with Linux).

This guide covers the installation, configuration and management of the current release (5.4) of [[http://www.sympa.org|Sympa]].

======  License ======

Sympa is free software; you may distribute it under the terms of the [[http://www.gnu.org/copyleft/gpl.html|GNU General Public License Version 2]].

You may make and give away verbatim copies of the Source form of this package without restriction, provided that you duplicate all of the original copyright notices and associated disclaimers.




======  Features ======

Sympa provides all the basic features that any mailing list management software should include. While most Sympa features have their equivalents in other mailing list applications, Sympa is unique in including features in a single software package. These features are:

  * **High speed distribution processing** and **load control**. Sympa can be tuned to allow the system administrator to control the amount of computer resources used. Its optimized algorithm allows:
    * the use of your preferred SMTP engine, e.g. Sendmail, qmail or Postfix,
    * tuning of the maximum number of SMTP child processes,
    * grouping of messages according to recipients' domains, and tuning of the grouping factor,
    * detailed logging;
  * **Multilingual** user interface. The full user/admin interface (mail and web) and the online help are internationalized. Translations are gathered in standard PO files;
  * **Template-based** user interface. Every web page and service message can be customized through the **TT2** template format;
  * **MIME support**. Sympa naturally respects MIME in the distribution process, and in addition it allows list owners to configure their lists with welcome, goodbye and other predefined messages using complex MIME structures. For example, a welcome message can be in ''multipart/alternative'' format, using ''text/html'', ''audio/x-wav'' :-), or whatever (Note that Sympa commands in multipart messages are successfully processed, provided that one part is ''text/plain'');
  * **Fine control of authorizations**. The rights to perform controlled actions (such as sending a message, subscribe to a list, etc.) are set using an [[:manual:authorization-scenarios|authorization scenarios]]. Any listmaster can define new authorization scenarios in order to complement the 20 predefined configurations included in the distribution (Example: forward multipart messages to the list editor, while distributing others without requiring any further authorization);
  * **Privileged operations** can be performed by list editors or list owners (or any other user category), as defined in the list ''config'' file or by the robot administrator, the listmaster, defined in the ''/etc/sympa.conf'' global configuration file (a listmaster can also be defined for a particular virtual host). Privileged operations include the usual ''ADD'', ''DELETE'' and ''REVIEW'' commands, which can be authenticated through a unique password or an S/MIME signature;
  * **Web interface**: //WWSympa// is a global Web interface to all Sympa functions (including administration). It provides:
    * a classification of lists, along with a search index,
    * an access control to all functions, including the list of lists (which makes WWSympa particularly well suited to be the main groupware tool within an intranet),
    * the management of shared documents (download, upload, specific access control for each document),
    * an HTML presentation personalized for each user with the list of his/her current subscriptions, including access to message archives, subscription options, etc
    * management tools for list managers (bounce processing, changing of list parameters, moderating incoming messages),
    * tools for the robot administrator (list creation, global robot configuration);\\ To know more, refer to [[web-interface|WWSympa, Sympa's web interface]].
  * **RDBMS**: the internal subscriber and administrative data structure can be stored in a database or, for compatibility with versions 1.x, in text files for subscriber data. The introduction of databases came out of the //WWSympa// project. The database ensures a secure access to shared data. The PERL database API ''DBI''/''DBD'' enables interoperability with various RDBMS (MySQL, SQLite, PostgreSQL, Oracle, Sybase). To know more, refer to [[database|Sympa and its database]];
  * **Virtual hosting**: a single Sympa installation can provide multiple virtual robots with both email and web interface customization (see [[virtual-hosts|Virtual host]]);
  * **LDAP-based mailing lists**: e-mail addresses can be retrieved dynamically from a database accepting SQL queries, or from an LDAP directory. In order to maintain reasonable response times, Sympa retains the data source in an internal cache controlled by a TTL (Time To Live) parameter (see [[parameters-data-sources#include_ldap_query|include-ldap-query]]);
  * **LDAP authentication**: via uid and emails stored in LDAP Directories. Alternative email addresses, extracted from a LDAP directory, may be used to "unify" subscriptions (see [[authentication#authentication_with_email_address_uid_or_alternate_email_address|Authentication with email address, uid or alternate email address]]);
  * **Antivirus scanner**: Sympa extracts attachments from incoming messages and runs a virus scanner on them. Currently working with McAfee/uvscan, Fsecure/fsav, Sophos, AVP, Trend Micro/VirusWall and Clam Antivirus (see [[antivirus|Antivirus]]);
  * **Inclusion of the subscribers** of one list among the subscribers of another. This is real inclusion, not the dirty, multi-level cascading one might otherwise obtain by simply "subscribing list B to list A"
  * **RSS channel**.
  * **Custom user attributes**: you can customize the subscription form by requesting additional informations to future users when they request their subscription. See the doc regarding these [[:manual:customizing#custom_attributes|custom attributes]].

======  Project directions ======

Sympa is a very active project: check the [[:release_note|release notes]]. Thus it is not possible to maintain multiple documents about the Sympa project directions anymore. Please refer to the [[:dev:future|Future Sympa developments]] page for information about the project directions.


======  History ======

Sympa development started from scratch in 1995. The goal was to ensure continuity with the TULP list manager, produced partly by the initial author of Sympa: Christophe Wolfhugel.

New features were required, which the TULP code was just not able to handle. The initial version of Sympa brought authentication, the flexible management of commands, high performances in internal data access, and object oriented code for easy code maintenance.

It took nearly two years to produce the first market releases.

Other dates:

  * Mar 1999 Internal use of a database (MySQL), definition of list subscriber with external data source (RDBMS or LDAP).
  * Oct 1999 Stable version of WWSympa, introduction of authorization scenarios.
  * Feb 2000 Web bounce management.
  * Apr 2000 Archive search engine and message removal.
  * May 2000 List creation feature from the web
  * Jan 2001 Support for S/MIME (signing and encryption), list setup through the web interface, shared document repository for each list. Full rewrite of HTML look and feel.
  * Jun 2001 Auto-install of aliases at list creation time, antivirus scanner plugin.
  * Jan 2002 Virtual hosting, LDAP authentication.
  * Aug 2003 Automatic bounce management.
  * Sep 2003 CAS-based and Shibboleth-based authentication.
  * Dec 2003 Sympa SOAP server.
  * Aug 2004 Changed for TT2 template format and PO catalogue format.
  * 2005 Changed HTML to XHTML + CSS, RSS, list families, ...
  * 2006 full UTF-8 support
  * 2007 automatic list creation
  * 2008 Web sessions, Custom user attributes

====== Mailing lists and support ======

If you wish to contact the authors of Sympa, please use the address ''sympa-authors(@)renater.fr''.

There are also a few [[http://listes.renater.fr/sympa/lists/informatique/sympa|mailing-lists about Sympa]]:

  * ''sympa-users(@)renater.fr'' general information list
  * ''sympa-fr(@)renater.fr'', for French-speaking users
  * ''sympa-announce(@)renater.fr'', Sympa announcements
  * ''sympa-dev(@)renater.fr'', Sympa developers
  * ''sympa-pootle(@)renater.fr'', Sympa translators

To join, send the following message to ''sympa(@)renater.fr'':

> ''subscribe'' //Listname// //Firstname// //Name//

(replace //Listname//, //Firstname// and //Name// by the list name, your first name and your last name).

You may also refer to the Sympa [[http://www.sympa.org|homepage]]; there you will find the [[http://www.sympa.org/distribution/latest version|latest version]], the [[:faq|FAQ]] and so on.
====== Organization ======

Here is a snapshot of what Sympa looks like once installed on your system. This also illustrates the Sympa philosophy, we guess. Almost all configuration files can be defined for a particular list, for a virtual host or for the entire site, and most of them have a reasonable default value provided by Sympa distribution.

The following reference manual assumes a particular location for all files and directories. Note that binary distributions usually change those locations according to the operating system file organization. When installing Sympa from source kit, //configure// can be called with command options in order to change all default file locations.


  *  ''/home/sympa'' \\  The root directory of Sympa. You will find almost everything related to Sympa under this directory, except logs and main configuration files.
  * ''/home/sympa/bin''\\  This directory contains the binaries, including the CGI. It also contains the default authorization scenarios, templates and configuration files as in the distribution. ''/home/sympa/bin'' may be completely overwritten by the ''make install'' so you must not customize templates and authorization scenarios under ''/home/sympa/bin''.
  * ''/home/sympa/bin/etc''\\  Here Sympa stores the default versions of what it will otherwise find in ''/home/sympa/etc'' (task models, authorization scenarios, templates and configuration files, recognized S/Mime certificates, families).
  * ''/home/sympa/etc''\\  This is your site's configuration directory. Consult ''/home/sympa/bin/etc'' when drawing up your own.
  * ''/home/sympa/etc/create_list_templates/''\\  List templates (suggested at list creation time).
  * ''/home/sympa/etc/scenari/''\\  This directory will contain your authorization scenarios. If you don't know what the hell an authorization scenario is, refer to [[authorization-scenarios|Authorization scenarios]]. Those authorization scenarios are default scenarios but you may look at ''/home/sympa/etc/my.domain.org/scenari/'' for default scenarios of my.domain.org virtual host and ''/home/sympa/expl/mylist/scenari'' for scenarios specific to a particular list.
  * ''/home/sympa/etc/data_sources/''\\  This directory will contain your .incl files (see [[list-definition#data_inclusion_file|Data inclusion file]]). At the moment it only deals with files required by paragraphs ''owner_include'' and ''editor_include'' in the config file.
  * ''/home/sympa/etc/list_task_models/''\\  This directory will store your own list task models (see [[customizing#tasks|Customizing tasks]]).
  * ''/home/sympa/etc/global_task_models/''\\  Contains your global task models (see [[customizing#tasks|Customizing tasks]]).
  * ''/home/sympa/etc/web_tt2/'' (used to be ''/home/sympa/etc/wws_templates/'') \\  The web interface (//WWSympa//) is composed of template HTML files parsed by the CGI program. Templates can also be defined for a particular list in ''/home/sympa/expl/mylist/web_tt2/'' or in ''/home/sympa/etc/my.domain.org/web_tt2/''
  * ''/home/sympa/etc/mail_tt2/'' (used to be ''/home/sympa/etc/templates/'') \\  Some of the mail robot's replies are defined by templates (''welcome.tt2'' for SUBSCRIBE). You can overload these template files in the individual list directories or for each virtual host, but these are the defaults.
  * ''/home/sympa/etc/families/''\\  Contains your family directories (see [[list-creation#list_creation|Mailing list creation]]). Family directories can also be created in ''/home/sympa/etc/my.domain.org/families/''
  * ''/home/sympa/etc/my.domain.org''\\  The directory to define the virtual host my.domain.org dedicated to management of all lists of this domain (list description of my.domain.org are stored in ''/home/sympa/expl/my.domain.org''). Those directories for virtual hosts have the same structure as ''/home/sympa/etc'' which is the configuration dir of the default robot.
  * ''/home/sympa/expl''\\ Sympa's working directory.
  * ''/home/sympa/expl/mylist''\\  The list directory (refer to [[list-definition|Mailing list definition]]). Lists stored in this directory belong to the default robot as defined in sympa.conf file, but a list can be stored in ''/home/sympa/expl/my.domain.org/mylist'' directory and it is managed by my.domain.org virtual host.
  * ''/home/sympa/expl/X509-user-certs''\\  The directory where Sympa stores all user's certificates.
  * ''/home/sympa/locale''\\  Internationalization directory. It contains message catalogues in the GNU .po format.
  * ''/home/sympa/spool''\\ Sympa uses 9 different spools (see [[#spools|Spools]]).
  * ''/home/sympa/src/''\\ Sympa sources.


====== Programs ======

  * ''sympa.pl''\\  The main daemon; it processes commands and delivers messages. Continuously scans the ''msg/'' spool.
  * ''sympa_wizard.pl''\\  A wizard to edit ''sympa.conf'' and ''wwsympa.conf''. Maybe it is a good idea to run it at the beginning, but these files can also be edited with your favorite text editor.
  * ''wwsympa.fcgi''\\  The CGI program offering a complete web interface to mailing lists. It can work in both classical CGI and FastCGI modes, although we recommend FastCGI mode, being up to 10 times faster.
  * ''bounced.pl''\\  This daemon processes bounces (non-delivered messages), looking for bad addresses. List owners will later access bounce information via //WWSympa//. Continuously scans the ''bounce/'' spool.
  * ''archived.pl''\\  This daemon feeds the web archives, converting messages to HTML format and linking them. It uses the amazing ''MhOnArc''. Continuously scans the ''outgoing/'' spool.
  * ''task_manager.pl''\\  The daemon which manages the tasks: creation, checking, execution. It regularly scans the ''task/'' spool.
  * ''sympa_soap_server.fcgi''\\  The server will process SOAP (web services) request. This server requires FastCGI; it should be referenced from within your HTTPS config.
  * ''queue''\\  This small program gets the incoming messages from the aliases and stores them in ''msg/'' spool.
  * ''bouncequeue''\\  Same as ''queue'' for bounces. Stores bounces in ''bounce/'' spool.












======  Configuration files ======

  * ''/etc/sympa.conf''\\  The main configuration file. See [[:manual:conf-parameters:index|Sympa.conf parameters]].
  * ''/etc/wwsympa.conf''\\ //WWSympa// configuration file. See [[presentation#wwsympa_intro|the description of WWSympa]].
  * ''edit_list.conf''\\  Defines which parameters/files are editable by owners. See [[list-creation#list_editing|List editing]].
  * ''topics.conf''\\  Contains the declarations of your site's topics (classification in //WWSympa//), along with their titles. A sample is provided in the ''sample/'' directory of the Sympa distribution. See [[customizing#topics|Topics]].
  * ''auth.conf''\\  Defines authentication backend organization (LDAP-based authentication, CAS-based authentication and Sympa internal).
  * ''robot.conf''\\  It is a subset of ''sympa.conf'' defining a Virtual host (one per Virtual host).
<html><A name="crawlers_detection.conf"></a></html>
  * ''crawlers_detection.conf''\\ This file specify how Sympa detect web crawlers. It is used in order optimize Sympa web interface answers and internal mecchanism   for crawlers. In this version the file is limited to a list of user agent string, but in the futur it may be enriched with IP adress. When a crawler is detected, Sympa allows the web client to cache pages so crawlers should not browse old archives every days. In addition, Sympa do not create http sessions for crawlers. This keep the Sympa session table quite small.  
  * ''nrcpt_by_domain.conf''\\  This file is used to limit the number of recipients per SMTP session. Some ISPs trying to block spams reject sessions with too many recipients. In such case you can set the [[manual/conf-parameters:part2#nrcpt|nrcpt]] robot.conf parameter to a lower value but this will affect all SMTP sessions with any remote MTA. This file is used to limit the number of recipients for some particular domains. The file must contain a list of domains followed by the maximum number of recipients per SMTP session. Example:

         yohaa.com 3
         oal.com 5

  * ''data_structure.version''\\  This file is automatically created and maintained by Sympa itself. It contains the current version of your Sympa service and is used to detect upgrades and trigger maintenance procedures such as database structure changes.

  * ''ldap_alias_manager.conf''\\ This file defines the parameters for a LDAP directory, when using ''ldap_alias_manager.pl'' as the mail aliases management script.


====== Spools ======

See [[manual/conf-parameters:part2#spool_related|Spool related]] for spool definition in ''sympa.conf''.

  * ''/home/sympa/spool/auth/''\\  For storing messages until they have been confirmed. Files are created and processed by the ''sympa.pl'' program.
  * ''/home/sympa/spool/bounce/''\\  For storing incoming bouncing messages. Files are created by the ''bouncequeue'' program (via mail aliases) and processed by the ''bounced.pl'' daemon.
  * ''/home/sympa/spool/bounce/bad/''\\  For storing bouncing messages for which bounce management failed, though an user was identified. Files are moved there by the ''bounced.pl'' daemon.
  * ''/home/sympa/spool/bounce/OTHER/''\\  Stores bouncing messages for which Sympa couldn't determine the original sender. Files are moved there by the ''bounced.pl'' daemon.
  * ''/home/sympa/spool/digest/''\\  For storing message digests before they are sent. Files are created and processed by the ''sympa.pl'' daemon.
  * ''/home/sympa/spool/mod/''\\  For storing unmoderated messages. Files are created by the ''sympa.pl'' program and processed by either ''sympa.pl'' or ''wwsympa.fcgi''.
  * ''/home/sympa/spool/msg/''\\  For storing incoming messages (including commands). Files are created by the ''queue'' program (via mail aliases) and processed by the ''sympa.pl'' program.
  * ''/home/sympa/spool/msg/bad/''\\ Sympa stores rejected messages in this directory. Files are created by the ''sympa.pl'' daemon.
  * ''/home/sympa/spool/distribute/''\\  For storing messages ready for distribution. This spool is used only if the installation runs 2 ''sympa.pl'' daemons, one for commands, one for messages.
  * ''/home/sympa/spool/distribute/bad/''\\ Sympa stores rejected messages in this directory. Files are created by the ''sympa.pl'' process dedicated to message distribution.
  * ''/home/sympa/spool/task/''\\  For storing all tasks created. Files are created and processed by the ''task_manager.pl'' daemon.
  * ''/home/sympa/spool/outgoing/''\\ ''sympa.pl'' dumps messages in this spool to await archiving by ''archived.pl''. ''wwsympa.fcgi'' may also create files in this spool.
  * ''/home/sympa/spool/outgoing/bad/''\\ For storing messages which couldn't be archived. Files are moved there by the ''archived.pl'' daemon.
  * ''/home/sympa/spool/topic/''\\  For storing topic information files.
  * ''/home/sympa/spool/tmp/''\\  For storing temporary informations, as stderr flux from processes or messages parts submitted to anti-virus


====== Roles and privileges ======

You can assign roles to users (identified via their email addresses) at different levels in Sympa; privileges are associated (or can be associated) to these roles. We list these roles below (from the most powerful to the least), along with the relevant privileges.

=====  (Super) listmasters =====

These are the persons administrating the service, defined in the ''sympa.conf'' file. They inherit the listmaster role in virtual hosts and are the default set of listmasters for virtual hosts.

=====  (Robot) listmasters =====

You can define a different set of listmasters at a virtual host level (in the ''robot.conf'' file). They are responsible for moderating mailing lists creation (if list creation is configured this way), editing default templates, providing help to list owners and moderators. Users defined as listmasters get a privileged access to the Sympa web interface. Listmasters also inherit the privileges of list owners (for any list defined in the virtual host), but not the moderator privileges.

=====  Privileged list owners =====

The first defined privileged owner is the person who requested the list creation. Later it can be changed or extended. They inherit (basic) owner privileges and are also responsible for managing the list owners and editors themselves (through the web interface). With Sympa's default behavior, privileged owners can edit more list parameters than (basic) owners can do; but this can be customized via the ''edit-list.conf'' file.

=====  (Basic) list owners =====

They are responsible for managing the members of the list, editing the list configuration and templates. Owners (and privileged owners) are defined in the list config file.

=====  Moderators (also called Editors) =====

Moderators are responsible for the messages distributed in the mailing list (as opposed to owners who look after list members). Moderators are active if the list has been setup as a moderated mailing list. If no moderator is defined for the list, then list owners will inherit the moderator role.

=====  Subscribers (or list members) =====

Subscribers are the persons who are members of a mailing list; they either subscribed, or got added directly by the listmaster or via a data source (LDAP, SQL, another list, ...). These subscribers receive messages posted in the list (unless they have set the ''nomail'' option) and have special privileges to post in the mailing list (unless it is a newsletter). Most privileges a subscriber may have are not hard coded in Sympa but expressed via the so-called authorization scenarios (see [[authorization-scenarios|Scenarios]]).====== sympa.pl ======

''sympa.pl'' is the main daemon; it processes mail commands and is in charge of messages distribution.

''sympa.pl'' recognizes the following command line arguments:

  * ''-- add_list //familyname// - - robot //robotname// - - input_file ///path/to/list_file.xml//''\\ Adds the list described in the XML file to the //familyname// family. See: [[list-families#adding_a_list_to_a_list_family|Adding a list to a list family]].
  * ''-- close_family //familyname// - - robot //robotname//''\\ Closes the //familyname// family. See: [[list-families#closure|List family closure]].
  * ''-- close_list //listname@robot//''\\ Closes the list (changing its status to closed), removes aliases (if ''sendmail_aliases'' parameter was set) and removes subscribers from DB (a dump is created in the list directory to allow the list restoration). When you are in a family context, refer to: [[list-families#closure|List family closure]].
  * ''-- close_unknown''\\ When instanciating a family, this option tells Sympa to silently close lists unknown to the family.
  * ''-- config //config_file//'' | ''-f //config_file//''\\ Forces Sympa to use an alternative configuration file. The default behavior is to use the configuration file as defined in the ''Makefile'' (''$CONFIG'').
  * ''-- create_list -- robot //robotname// - - input_file ///path/to/list_file.xml//''\\ Creates the list described by the xml file, see: [[list-creation#list_creation_on_command_line_with_sympa.pl|List creation on command line with sympa.pl]].
  * ''-- debug'' | ''-d''\\ Sets Sympa in debug mode and keeps it attached to the terminal. Debugging information is output to STDERR, along with standard log information. Each function call is traced. Useful while reporting a bug.
  * ''-- dump //listname ''|'' ALL//''\\ Dumps subscribers, either of the list //listname// or of all lists. Subscribers are dumped in ''subscribers.db.dump''.
  * ''-- help'' | ''-h''\\ Prints sympa.pl usage.
  * ''-- import //listname//''\\ Imports subscribers in the //listname// list. Data are read from STDIN.
  * ''-- instanciate_family //familyname// //robotname// - - input_file ///path/to/family_file.xml//''\\ Instantiates the family //familyname//. See [[list-families|Lists families]].
  * ''-- keepcopy //recipient_directory//'' | ''-k //recipient_directory//''\\ Tells Sympa to keep a copy of every incoming message instead of deleting them. //recipient_directory// is the directory to store messages.
  * ''-- lang //catalog//'' | ''-l //catalog//''\\ Set this option to use a language catalog for Sympa. The corresponding catalog file must be located in ''~sympa/locale'' directory.
  * ''-- lowercase''\\ Lowercases e-mail addresses in database.
  * ''-- mail'' | ''-m''\\ Sympa will log calls to sendmail, including recipients. Useful to keep track of each mail sent (log files may grow faster though).
  * ''-- make_alias_file''\\ Creates an aliases file in ''/tmp/'' with all list aliases (only lists whose status is 'open'). It uses the list_aliases.tt2 template.
  * ''-- modify_list //familyname// - - robot //robotname// - - input_file ///path/to/list_file.xml//''\\ Modifies the existing family list, with description contained in the XML file. See: [[list-families#modifying_a_family_list|Modifying a family list]].
  * ''--quiet''\\ When instanciating a family, this option tells Sympa to skip output to STDOUT.
  * ''-- reload_list_config - -list=mylist@dom ''\\ Recreates all ''configbin'' files. You should run this command if you edit authorization scenarios. The ''list'' parameter is optional.
  * ''service'' //process_command// | //process_message// | //process_creation//\\ Sets Sympa daemon to process only message distribution (process_message) or only commands (process_command) or list creation requests (process_creation).
  * ''-- sync_include //listaddress// ''\\ Triggers an update of list members, useful if the list uses external data sources.
  * ''-- upgrade - - from=X - -to=Y ''\\ Runs Sympa maintenance script to upgrade from version X to version Y.
  * ''-- version'' | ''-v''\\ Prints current version of Sympa.


====== INIT script ======

The ''make install'' step should have installed a sysV init script in your ''/etc/rc.d/init.d/'' directory (you can change this at ''configure'' time with the ''-with-initdir'' option). You should edit your runlevels to make sure Sympa starts after Apache and MySQL. Note that MySQL should also start before Apache because of ''wwsympa.fcgi''.

This script starts these daemons: ''sympa.pl'', ''task_manager.pl'', ''archived.pl'' and ''bounced.pl''.

====== Stopping Sympa and signals ======

==== kill -TERM ====

When this signal is sent to ''sympa.pl'' (''kill -TERM''), the daemon is stopped, ending message distribution in progress and this can be long (for big lists). If ''kill -TERM'' is used, ''sympa.pl'' will stop immediately whatever a distribution message is in progress. In this case, when ''sympa.pl'' restarts, messages will be distributed many times.

==== kill -HUP ====

When this signal is sent to ''sympa.pl'' (''kill -HUP''), it switches of the ''-mail'' login option and continues current task.====== Upgrading Sympa ======

Sympa upgrade is a relatively riskless operation, mainly because the install process preserves your customizations (templates, configuration, authorization scenarios, ...) and also because Sympa automates a few things (DB update, CPAN modules installation).

Upgrading Sympa means that you follow these steps:

  - [[installing-sympa#obtaining_sympa_related_links|retrieve]] the latest source version of Sympa
  - stop Sympa
  - [[installing-sympa#installing_sympa|install it]] : <code>./configure ; make ; make install</code>
  - run the following command.
<code>sympa.pl --upgrade </code>

And that' it!
This command will perform all the required DB changes (if running MySQL) and will update the configuration files if required.

====== Incompatible changes ======

New features, changes and bug fixes are summarized in the ''NEWS'' file, part of the tar.gz (the ''Changelog'' file is a complete log file of CVS changes).

For example, note that, starting from Sympa 5.3b.4, the minimum version for MySQL is 4.1.

Sympa is a long-term project, so some major changes may need some extra work. The following list consists of well known changes that require some attention:

  * version 5.1 (August 2005) uses XHTML and CSS in web templates;
  * version 4.2b3 (August 2004) introduces TT2 template format;
  * version 4.0a5 (September 2003) changes ''auth.conf'' (no default anymore so you may have the create this file);
  * version 3.3.6b2 (May 2002) the list parameter ''user_data_source'' as a new value include2 which is the recommended value for any list.

The file ''NEWS'' lists all changes and of course, all changes that may require some attention from the installer. As mentioned at the beginning of this file, incompatible changes are preceded by '<nowiki>*****</nowiki>'. While running the ''make install'' Sympa will detect the previously installed version and will prompt you with incompatible changes between both versions of the software. You can interrupt the install process at that stage if you are too frightened. Output of the ''make install'':

<code>
  You are upgrading from Sympa 4.2
  You should read CAREFULLY the changes listed below; they might be incompatible changes:
  <RETURN>

  *****   require new perlmodule XML-LibXML

  *****   You should update your DB structure (automatically performed by Sympa with MySQL), adding the following table (MySQL example):
  *****   CREATE TABLE admin_table (
  *****   list_admin              varchar(50) NOT NULL,
  *****   user_admin              varchar(100) NOT NULL,
  *****   role_admin              enum('listmaster','owner','editor') NOT NULL,
  *****   date_admin              datetime NOT NULL,
  *****   update_admin            datetime,
  *****   reception_admin         varchar(20),
  *****   comment_admin           varchar(150),
  *****   subscribed_admin        enum('0','1'),
  *****   included_admin          enum('0','1'),
  *****   include_sources_admin   varchar(50),
  *****   info_admin              varchar(150),
  *****   profile_admin           enum('privileged','normal'),
  *****   PRIMARY KEY (list_admin, user_admin,role_admin),
  *****   INDEX (list_admin, user_admin,role_admin)
  *****   );

  *****   Extend the generic_sso feature; Sympa is now able to retrieve the user email address in a LDAP directory
  <RETURN>
</code>


====== CPAN modules update ======

The installation of required and optional Perl modules (CPAN) is automatically handled at the ''make'' time. You are asked before each module is installed. For optional modules, associated features are listed.

Output of the ''make'' command:

  Checking for REQUIRED modules:
  ------------------------------------------
  perl module          from CPAN       STATUS
  -----------          ---------       ------
  Archive::Zip         Archive-Zip    OK (1.09   >= 1.05)
  CGI                  CGI            OK (2.89   >= 2.52)
  DB_File              DB_FILE        OK (1.806  >= 1.75)
  Digest::MD5          Digest-MD5     OK (2.20   >= 2.00)
  FCGI                 FCGI           OK (0.67   >= 0.67)
  File::Spec           File-Spec      OK (0.83   >= 0.8)
  IO::Scalar           IO-stringy     OK (2.104  >= 1.0)
  LWP                  libwww-perl    OK (5.65   >= 1.0)
  Locale::TextDomain   libintl-perl   OK (1.10   >= 1.0)
  MHonArc::UTF8        MHonArc        version is too old ( < 2.4.6).
  >>>>>>> You must update ''MHonArc'' to version '''' <<<<<<.
  Setting FTP Passive mode
  Description:
  Install module MHonArc::UTF8 ? n
  MIME::Base64         MIME-Base64    OK (3.05   >= 3.03)
  MIME::Tools          MIME-tools     OK (5.411  >= 5.209)
  Mail::Internet       MailTools      OK (1.60   >= 1.51)
  Regexp::Common       Regexp-Common  OK (2.113  >= 1.0)
  Template             Template-ToolkitOK (2.13   >= 1.0)
  XML::LibXML          XML-LibXML     OK (1.58   >= 1.0)

  Checking for OPTIONAL modules:
  ------------------------------------------
  perl module          from CPAN       STATUS
  -----------          ---------       ------
  Bundle::LWP          LWP            OK (1.09   >= 1.09)
  Constant subroutine CGI::XHTML_DTD redefined at /usr/lib/perl5/5.8.0/constant.pm line 108, <STDIN> line 1.
  CGI::Fast            CGI            CGI::Fast doesn't return 1 (check it).
  Crypt::CipherSaber   CipherSaber    OK (0.61   >= 0.50)
  DBD::Oracle          DBD-Oracle     was not found on this system.
  Description: Oracle database driver, required if you connect to a Oracle database.
  Install module DBD::Oracle ?

====== Database structure update ======

Whatever RDBMS you are using (MySQL, SQLite, Pg, Sybase or Oracle), Sympa will check every database tables and fields. If one is missing, ''sympa.pl'' will not start. If you are using MySQL, Sympa will also check field types and will try to change them (or create them) automatically, assuming that the DB user configured has sufficient privileges. If you are not using MySQL or if the DB user configured in ''sympa.conf'' does have sufficient privileges, then you should change the database structure yourself, as mentioned in the ''NEWS'' file (database structure is describe in the //src/etc/script/// directory of distribution).

Output of Sympa logs :

  Table admin_table created in database sympa
  Field 'comment_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...
  Field comment_admin added to table admin_table
  Field 'date_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...
  Field date_admin added to table admin_table
  Field 'include_sources_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...
  Field include_sources_admin added to table admin_table
  Field 'included_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...
  Field included_admin added to table admin_table
  Field 'info_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...
  Field info_admin added to table admin_table
  Field 'list_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...
  Field list_admin added to table admin_table
  Field 'profile_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...
  Field profile_admin added to table admin_table
  Field 'reception_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...
  Field reception_admin added to table admin_table
  Field 'role_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...
  Field role_admin added to table admin_table
  Field 'subscribed_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...
  Field subscribed_admin added to table admin_table
  Field 'update_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...
  Field update_admin added to table admin_table
  Field 'user_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...
  Setting list_admin,user_admin,role_admin fields as PRIMARY
  Field user_admin added to table admin_table

You might need, for some reason, to make Sympa run the migration procedure from version //X// to version //Y//. This procedure is run automatically by ''sympa.pl -upgrade'' when it detects that ''/data_structure.version'' is older than the current version, but you can also run trigger this procedure yourself:

  sympa.pl --upgrade --from=4.1 --to=5.2


====== Preserving your customizations ======

Sympa comes with default configuration files (templates, scenarios,...) that will be installed in the ''/home/sympa/bin'' directory. If you need to customize some of them, you should copy the file first in a safe place, i.e. in the ''/home/sympa/etc'' directory. If you do so, the Sympa upgrade process will preserve your site customizations.


====== Running two Sympa versions on a single server ======

This can be very convenient to have a stable version of Sympa and a fresh version for test purpose, both running on the same server.

Both Sympa instances must be completely partitioned, unless you want the make production mailing lists visible through the test service.

The biggest part of the partitioning is achieved while running the ''./configure''. Here is a sample call to ''./configure'' on the test server side:

  ./configure --prefix=/home/sympa-dev \
              --with-confdir=/home/sympa-dev/etc \
              --with-mandir=/home/sympa-dev/man \
              --with-initdir=/home/sympa-dev/init \
  	    --with-piddir=/home/sympa-dev/pid
              --with-lockdir=/home/sympa-dev/lock \
              --with-sendmail_aliases=/home/sympa-dev/etc/sympa_aliases

You can also customize more parameters via the ''/home/sympa-dev/etc/sympa.conf'' file.

If you wish to share the same lists in both Sympa instances, then some parameters should have the same value : ''home'', ''db_name'', ''arc_path''.



====== Moving to another server ======

If you're upgrading and moving to another server at the same time, we recommend you first to stop the operational service, move your data and then upgrade Sympa on the new server. This will guarantee that Sympa upgrade procedures have been applied on the data.

The migration process requires that you move the following data from the old server to the new one:

  * the user database. If using MySQL you can probably just stop ''mysqld'' and copy the ''/var/lib/mysql/sympa/'' directory to the new server;
  * the ''/home/sympa/expl'' directory that contains list config;
  * the  directory that contains the spools;
  * the  directory ''/etc/sympa.conf'' and ''wwsympa.conf''. Sympa new installation creates a file ''/etc/sympa.conf'' (see [[conf-parameters|sympa.conf parameters]]) and randomly initializes the cookie parameter. Changing this parameter will break all passwords. When upgrading Sympa on a new server, take care that you start with the same value of this parameter, otherwise you might have problems!
  * the web archive.

In some cases, you may want to install the new version and run it for a few days before switching the existing service to the new Sympa server. In this case, perform a new installation with an empty database and play with it. When you decide to move the existing service to the new server:

  - stop all sympa processes on both servers;
  - transfer the database;
  - edit the ''/data_structure.version'' on the new server; change the version value to reflect the old number;
  - start "sympa.pl -upgrade", it will upgrade the database structure according to the hop you do.====== Mail aliases ======

Mail aliases are required in Sympa for ''sympa.pl'' to receive mail commands and list messages. Management of these aliases will depend on the MTA (''sendmail'', ''qmail'', ''postfix'', ''exim'') you're using, where you store aliases and whether you are managing virtual domains or not.

====== SMRSH ======

If using ''sendmail'', maybe it is configured to use the secured shell ''smrsh''. 
<code>
# grep smrsh /etc/mail/sendmail.mc
FEATURE(`smrsh', `/usr/sbin/smrsh')dnl
</code>

Smrsh obliges you to copy all the programs that are called from the mail aliases into the dedicated ''/etc/smrsh'' directory. Therefore you'll have to tell Sympa that binaries should be installed in the ''/etc/smrsh'' directory. This can be performed via the ''--with-bindir'' option of sympa's ''configure'' :
  ./configure --with-bindir=/etc/smrsh

====== Robot aliases ======

An electronic list manager such as Sympa is built around two processing steps:

  * A message sent to a list or to Sympa itself (commands such as subscribe or unsubscribe) is received by the SMTP server. When receiving the message, the SMTP server runs the ''queue'' program (supplied in this package) to store the message in a spool.
  * The ''sympa.pl'' daemon, set in motion at system startup, scans this spool. As soon as it detects a new message, it processes it and performs the requested action (distribution or processing of a command).

To separate the processing of commands (subscription, unsubscription, help requests, etc.) from the processing of messages destined to mailing lists, a special mail alias is reserved for administrative requests, so that Sympa can be permanently accessible to users. The following lines must therefore be added to the ''sendmail'' alias file (often ''/etc/aliases''):

<code>
  sympa: "| /home/sympa/bin/queue sympa@my.domain.org"
  listmaster: "| /home/sympa/bin/queue listmaster@my.domain.org"
  bounce+*: "| /home/sympa/bin/bouncequeue sympa@my.domain.org"
  abuse-feedback-report: "| /home/sympa/bin/bouncequeue sympa@my.domain.org"
  sympa-request: postmaster
  sympa-owner: postmaster
</code>

Note: if you run Sympa virtual hosts, you will need one ''sympa'' alias entry per virtual host (see [[virtual-hosts|Virtual host]]).

''sympa-request'' should be the address of the robot administrator, i.e. a person who manages Sympa (here ''postmaster(@)renater.fr'').

''sympa-owner'' is the return address for Sympa error messages.

The alias bounce+* is dedicated to collect bounces where VERP (variable envelope return path) was active. It is useful if ''welcome_return_path unique'' or ''remind_return_path unique'' or the ''verp_rate'' parameter is no null for at least one list.

The alias ''abuse-feedback-report'' is used for processing automatically feedback that respect ARF format (Abuse Report Feedback), which is a draft to specify how end users can complain about spam. It is mainly used by AOL.

Don't forget to run ''newaliases'' after any change to the ''/etc/aliases'' file!

Note: aliases based on ''listserv'' (in addition to those based on ''sympa'') can be added for the benefit of users accustomed to the ''listserv'' and ''majordomo'' names. For example:

  listserv:          sympa
  listserv-request:  sympa-request
  majordomo:         sympa
  listserv-owner:    sympa-owner


====== List aliases ======

For each new list, it is necessary to create up to six mail aliases (at least three). If you managed to setup the alias manager (see [[mail-aliases#alias_manager|Alias manager]]), then Sympa will install automatically the following aliases for you.

For example, to create the ''mylist'' list, the following aliases must be added:

<code>
  mylist:               |/home/sympa/bin/queue mylist@my.domain.org
  mylist-request:       |/home/sympa/bin/queue mylist-request@my.domain.org
  mylist-editor:        |/home/sympa/bin/queue mylist-editor@my.domain.org
  mylist-owner:         |/home/sympa/bin/bouncequeue mylist@my.domain.org
  mylist-subscribe:     |/home/sympa/bin/queue mylist-subscribe@my.domain.org
  mylist-unsubscribe:   |/home/sympa/bin/queue mylist-unsubscribe@my.domain.org
</code>

The address ''mylist-request'' should correspond to the person responsible for managing ''mylist'' (the owner). Sympa will forward messages sent to ''mylist-request'' to the owner of ''mylist'', as defined in the ''/home/sympa/expl/mylist/config'' file. Using this feature means you will not need to modify the alias file if the list owner were to change.

Similarly, the address ''mylist-editor'' can be used to contact the list editors, if defined in ''/home/sympa/expl/mylist/config''. This address definition is not compulsory.

The address ''mylist-owner'' is the address receiving non-delivery reports (note that the ''-owner'' suffix can be customized, see [[conf-parameters/part3#return_path_suffix|return path suffix]]. The ''bouncequeue'' program stores these messages in the ''queuebounce'' directory. //WWSympa// (see [[web-interface|WWSympa presentation]]) may then analyze them and provide a web access to them.

The address ''mylist-subscribe'' is an address enabling users to subscribe in a manner which can easily be explained to them. Beware: subscribing this way is so straightforward that you may find spammers subscribing to your list by accident.

The address ''mylist-unsubscribe'' is the equivalent for unsubscribing. By the way, the easier it is for users to unsubscribe, the easier it will be for you to manage your list!



====== Alias manager ======

The ''alias_manager.pl'' script does aliases management. It is run by //WWSympa// and will install aliases for a new list and delete aliases for closed lists. To use a different alias management tool (''ldap_alias_manager.pl'' for example), you should edit the ''alias_manager'' sympa.conf parameter (see [[manual:conf-parameters:part2#alias_manager]]).

The script expects the following arguments :

  - ''add'' | ''del''
  - ''<''list name''>''
  - ''<''list domain''>''

Example:

<code>
  /home/sympa/bin/alias_manager.pl add mylistrenater.fr
</code>

''/home/sympa/bin/alias_manager.pl'' works on the alias file (as defined in ''sympa.conf'') through the ''sendmail_aliases'' variable (default is ''/etc/mail/sympa_aliases''). You must refer to this aliases file in your ''sendmail.mc'' (if using sendmail):

<code>
  define(`ALIAS_FILE', `/etc/aliases,/etc/mail/sympa_aliases')dnl
</code>

Note that ''sendmail'' has requirements regarding the ownership and rights on both ''sympa_aliases'' and ''sympa_aliases.db'' files (the later being created by sendmail via the ''newaliases'' command). Anyhow, these two files should be located in a directory, every path component of which being owned by and writable only by the root user.

''/home/sympa/bin/alias_manager.pl'' runs a ''newaliases'' command (via ''aliaswrapper''), after any changes to aliases file.

If you manage virtual domains with your mail server, then you might want to change the form of aliases used by the alias manager. You can customize the ''list_aliases'' template that is parsed to generate list aliases (see [[list-definition#list_aliases.tt2|list_aliases.tt2]]).

Note that you do not need alias management if you use MTA functionalities such as Postfix' ''virtual_transport''. Then you can disable alias management in Sympa by positioning the ''sendmail_aliases'' parameter to ''none''.

Ludovic Marcotte has written a version of ''ldap_alias_manager.pl'' that is LDAP enabled. This script is distributed with Sympa distribution. The script has later been extended by Philippe Baumgart, British Telecom. You can customize the LDAP parameteres via the ''ldap_alias_manager.conf'' file.

====== Virtual domains ======

When using virtual domains with ''sendmail'' or ''postfix'', you can not refer to ''mylist@my.domain.org'' on the right-hand side of a ''/etc/aliases'' entry. You need to define an additional entry in a virtual table. You can also add a unique entry, with a regular expression, for your domain.

With Postfix, you should edit the ''/etc/postfix/virtual.regexp'' file as follows:

<code>
  /^(.*)@my.domain.org$/ my.domain.org-$1
</code>

Entries in the 'aliases' file will look like this:

<code>
  my.domain.org-sympa:                                /home/sympa/bin/queue
  sympa@my.domain.org  .....  my.domain.org-listA:    /home/sympa/bin/queue listA@my.domain.org
</code>

With Sendmail, add the following entry to ''/etc/mail/virtusertable'' file:

<code>
  @my.domain.org my.domain.org-%1%3
</code>====== sympa.conf parameters ======

The ''/etc/sympa.conf'' configuration file contains numerous parameters which are read on start-up of Sympa. If you change this file, do not forget that you will need to restart Sympa afterwards.

The ''/etc/sympa.conf'' file contains directives in the following format:

//keyword value//

Comments start with the ''#'' character at the beginning of a line. Empty lines are also considered as comments and are ignored. There should only be one directive per line, but their order in the file is of no importance.

======  Site customization ======

===== domain =====

This keyword is **mandatory**. It is the domain name used in the ''From:'' header in replies to administrative requests. So the SMTP engine (qmail, sendmail, postfix or whatever) must recognize this domain as a local address. The old keyword ''host'' is still recognized but should not be used anymore.

Example: <code>domain renater.fr</code>


===== email =====

(Default value: ''sympa'')

Username (the part of the address preceding the ''@'' sign) used in the ''From:'' header in replies to administrative requests.

Example: <code>email listserv</code>


===== listmaster =====

The list of the email addresses of the listmasters (users authorized to perform global server commands). Listmasters can be defined for each virtual host.

Example: <code>listmaster postmaster@renater.fr,root@renater.fr</code>


===== listmaster_email =====

(Default value: ''listmaster'')

Username (the part of the address preceding the @ sign) used in the listmaster email. This parameter is useful if you want to run more than one sympa on the same host (a sympa test for example).

If you change the default value, you must modify the sympa aliases too.

For example, if you put:

<code>listmaster listmaster-test</code>

you must modify the sympa aliases like this:

<code>listmaster-test: | /home/sympa/bin/queue listmaster@my.domain.org</code>

See [[manual:mail-aliases#robot_aliases|Robot aliases]] for all aliases.



===== wwsympa_url =====

(Default value: ''<nowiki>http://your.host/sympa</nowiki>'')

This is the root URL of the Sympa web interface. This parameter is used to construct URLs while sending notification emails to users.

Example: <code>wwsympa_url https://my.server/sympa</code>


===== soap_url =====

This is the root URL of Sympa's SOAP server. Sympa's WSDL document refers to this URL in its service section.

Example: <code>soap_url http://my.server/sympasoap</code>

===== spam_protection =====

(Default value: ''javascript'')

There is a need to protect Sympa website against spambot which collect email addresses in public websites. Various methods are available within Sympa, and you can choose between the ''spam_protection'' and ''web_archive_spam_protection'' parameters. Possible values are:

  * javascript: the address is hidden using a javascript. Users who enable Javascript can see nice mailto addresses where others have nothing.
  * at: the "@" char is replaced by the string  "AT".
  * none: no protection against spammers.

===== web_archive_spam_protection =====

(Default value: ''cookie'')

The same as ''spam_protection'', but restricted to the web archive. An additional value is available: ''cookie'', which means that users must submit a small form in order to receive a cookie before browsing the web archive. This block all robots, including search engine robots.


===== color_0, color_1, ..., color_15 =====

They are the color definition parameters for the web interface. These parameters can be overwritten in each virtual host definition. Colors are used in the CSS files and unfortunately they are also in use in some web templates. The sympa admin interface shows all colors in use.

To know the exact role of each color_x parameter please consult [[manual:customizing#sympa_colors_customization_guide|the color customization guide]].

===== Obsolete color parameters =====

A few color parameters were used in the past for color definition of the web interface: 
''dark_color'', ''light_color'', ''text_color'', ''bg_color'', ''error_color'', ''selected_color'', ''shaded_color''. 

These parameters are not used in version 5.1 and higher anymore, but still available in ''style.css'', ''print.css'', ''print-preview.css'' and ''fullPage.css''.

__Note:__ light_color is still used for the header color of the New lists presentation array.

===== logo_html_definition =====

This parameter allows you to insert in the upper left corner of the page a piece of HTML code, usually to insert a logo in the page. This is a very basic but easy customization. Example: <code>logo_html_definition <a href=''http://www.mycompany.com''><img style="float: left; margin-top: 7px; margin-left: 37px;" src=''http:/logos/mylogo.jpg'' alt="my company" /></a></code>


===== main_menu_custom_button =====

You may modify the main menu content by editing the menu.tt2 file but you can also edit the following robot parameters in order to add up to 3 button. each button is defined by a title (the text in the button), an URL and optionnaly a target.

  * main_menu_custom_button_1_title
  * main_menu_custom_button_1_url
  * main_menu_custom_button_1_target

Replace digit 1 by 2 or 3 for the second and third custom button. 

example :
<code>
  main_menu_custom_button_1_title faq

  main_menu_custom_button_1_url http://www.renater.fr/faq/universalistes/index

  main_menu_custom_button_1_target help
</code>

===== css_path =====

Pre-parsed CSS files (let's say static CSS files) can be installed using the Sympa server skin module. These CSS files are installed in a part of the web server that can be reached without using the Sympa web engine. In order to do this, edit the ''robot.conf'' file and set the ''css_path'' parameter. Then restart the server and use the skin module from the "Admin sympa" page to install preparsed CSS file. In order to replace dynamic CSS files by these static files, set the ''css_url'' parameter.
The server admin module includes a CSS administration page. By pushing the "Install static css" button in this page, you create the CSS files in the folder whose path is contained by the ''css_url'' parameter.

**After an upgrade, ''sympa.pl'' automatically updates the static CSS files with the newly installed ''css.tt2''. Therefore, this is not a good place to store customized CSS files.**


===== css_url =====

By default, CSS files ''style.css'', ''print.css'', ''print-preview.css'' and ''fullPage.css'' are delivered by the Sympa web interface itself using a Sympa action named ''css''. URLs look like <nowiki>''http://foo.org/sympa/css/style.css''</nowiki>. CSS files are built by parsing a template named ''css.tt2''. This allows dynamic definition of colors, and in a near future a complete definition of the skin, user preference skins, etc.

In order to make Sympa web interface faster, it is strongly recommended to install static CSS files somewhere in your website. This way, Sympa will deliver only one page instead of one page and four CSS files at each click. This can be done using the ''css_url'' parameter. The parameter must contain the URL of the directory where ''style.css'', ''print.css'', ''print-preview.css'' and ''fullPage.css'' are installed. You can make your own sophisticated new skin by editing these files.

If you want to use the Sympa color parameters inside a static CSS file, you must do two things :

  - define an alias in your Apache configuration that associates the content of the folder whose path is stored in the [[:manual:conf-parameters:part1#css_path|css_path]] parameter to the URL specified in [[:manual:conf-parameters:part1#css_url|css_url]];
  - use the Skins administration page after you changed colors in your configuration file to generate the static CSS files.


===== static_content_path =====

(Default value : ''{Sympa install directory}/static-content'')

Some content may be delivered by the HTTP server (Apache) without any need to be controlled or parsed by Sympa. It is stored in the directory chosen through the ''static_content_dir'' parameter. The current Sympa version stores subscribers' pictures in this directory. Later updates will add stylesheets, icons, ... The directory is created by ''sympa.pl'' when started. This parameter can be defined also in ''robot.conf''.

===== static_content_url =====

(Default value : ''/static-sympa'')

Content stored in the directory specified by parameter ''static_content_url'' must be served by the HTTP server under the URL specified by ''static_content_url''. Check Apache configuration in order to make this directory available. This parameter can be defined in ''robot.conf''.

===== pictures_feature =====

(Default value: ''off'') 

Example: <code>pictures_feature on</code>

Subscribers can upload their picture (from the 'Subscriber option' page) so that reviewing subscribers shows a gallery. This parameter defines the default for corresponding list parameter but it does NOT allow to disable the feature overall. If you want to disable the feature for your entire site, you need to customize the ''edit-list.conf'' file to deny editing of the corresponding list parameter.

Pictures are stored in a directory specified by the ''static_content_path'' parameter.

===== pictures_max_size =====

The maximum size of the uploaded picture file (bytes).

===== cookie =====

This string is used to generate MD5 authentication keys. It allows generated authentication keys to differ from a site to another. It is also used for reversible encryption of user passwords stored in the database. The presence of this string is one reason why access to ''sympa.conf'' needs to be restricted to the ''sympa'' user.

Note that changing this parameter will break all HTTP cookies stored in users' browsers, as well as all user passwords and lists X509 private keys. To prevent a catastrophe, ''sympa.pl'' refuses to start if the ''cookie'' parameter was changed.

Example: <code>cookie gh869jku5</code>

===== create_list =====

(Default value: ''public_listmaster'')

The ''create_list'' parameter is defined by an authorization scenario (see [[manual:authorization-scenarios#authorization_scenarios|Authorization scenarios]]).

Defines who can create lists (or request list creations). Sympa will use the corresponding authorization scenario.

Example: <code>create_list intranet</code>

===== automatic_list_feature =====

(Default value: ''off"''

Example: <code>automatic_list_feature on</code>

If set to ''on'', Sympa will enable automatic list creation through family instantiation (see [[manual:list-families#automatic_list_creation|Automatic list creation]]).

===== automatic_list_creation =====

(Default value: ''none'')

The ''automatic_list_creation'' parameter is defined by an authorization scenario (see [[manual:authorization-scenarios#authorization_scenarios|Authorization scenarios]]).

If ''automatic_list_feature'' is activated, this parameter (corresponding to an authorization scenario) defines who is allowed to use the automatic list creation feature.

===== automatic_list_removal =====

(Default value: ''''

Example: <code>automatic_list_feature if_empty</code>

If set to ''if_empty'', then Sympa will remove automatically created mailing lists just after their creation, if they contain no list member (see [[manual:list-families#automatic_list_creation|Automatic list creation]]).


===== global_remind =====

(Default value: ''listmaster'')

The ''global_remind'' parameter refers to an authorization scenario (see [[manual:authorization-scenarios#authorization_scenarios|Authorization scenarios]]).

Defines who can run a ''REMIND *'' command.

===== allow_subscribe_if_pending =====

(Default value: ''on'')

If set to "off", it is forbidden to add subscribers (through wwsympa) to a list whose status is different from "open".====== sympa.conf parameters ======

======  Directories ======

===== home =====

(Default value: ''''/home/sympa/expl'''')

The directory whose subdirectories correspond to the different lists.

Example: home /home/sympa/expl

===== etc =====

(Default value: ''/home/sympa/etc'')

This is the local directory for configuration files (such as ''edit_list.conf''. It contains 5 subdirectories:
  * ''scenari'' for local authorization scenarios;
  * ''mail_tt2'' for the site's local mail templates and default list templates;
  * ''web_tt2'' for the site's local HTML templates;
  * ''global_task_models'' for local global task models;
  * ''list_task_models'' for local list task models.

Example: <code>etc /home/sympa/etc</code>

======  System related ======

===== syslog =====

(Default value: ''LOCAL1'')

Name of the sub-system (facility) for logging messages.

Example: <code>syslog LOCAL2</code>

===== log_level =====

(Default value: ''0'')

This parameter sets the verbosity of Sympa processes (including) in log files. With level ''0'' only main operations are logged, in level ''3'' almost everything is logged.

Example: <code>log_level 2</code>

===== log_socket_type =====

(Default value: ''unix'')

Sympa communicates with ''syslogd'' using either UDP or UNIX sockets. Set ''log_socket_type'' to ''inet'' to use UDP, or ''unix'' for UNIX sockets.

===== pidfile =====

(Default value: ''/home/sympa/etc/sympa.pid'')

The file where the ''sympa.pl'' daemon stores its process number. Warning: the ''sympa'' user must be able to write to this file, and to create it if it does not exist.

Example: <code>pidfile /var/run/sympa.pid</code>

===== pidfile_creation =====

(Default value: ''/home/sympa/etc/sympa-creation.pid'')

The file where the automatic list creation dedicated ''sympa.pl'' daemon stores its process number. Warning: the ''sympa'' user must be able to write to this file, and to create it if it does not exist.

Example: <code>pidfile_creation /var/run/sympa-creation.pid</code>

===== umask =====

(Default value: ''027'')

Default mask for file creation (see umask). Note that it will be interpreted as an octual value.

Example: <code>umask 007</code>

======  Sending related ======

===== distribution_mode =====

(Default value: ''single'')

Use this parameter to determine whether your installation runs only one ''sympa.pl'' daemon that processes both messages to distribute and commands (single), or if ''sympa.pl'' will fork to run two separate processes, one dedicated to message distribution and one dedicated to commands and message pre-processing (fork). The second choice makes a better priority processing for message distribution and faster command response, but it requires a bit more computer resources.

Example: <code>distribution_mode fork</code>

===== maxsmtp =====

(Default value: ''20'')

Maximum number of SMTP delivery child processes spawned by Sympa. This is the main load control parameter.

Example: <code>maxsmtp 500</code>

===== log_smtp =====

(Default value: ''off'')

Set logging of each MTA call. Can be overwritten by ''-m'' sympa option.

Example: <code>log_smtp on</code>

===== use_blacklist =====

(Default value: ''send,create_list"'')

Sympa provides a blacklist feature available for list editors and owners. The ''use_blacklist'' parameter defines which operations use the blacklist. Search in blacklist is mainly useful for the ''send'' service (distribution of a message to the subscribers). You may use blacklist for other operations such as review, archive, etc., but be aware that those web services need fast response and blacklist may require some resources.

If you do not want blacklist at all, define ''use_blacklist'' to ''none'' so that the user interface to manage blacklist will disappear from the web interface.


===== max_size =====

(Default value: ''5 Mb'')

Maximum size (in bytes) allowed for messages distributed by Sympa. This may be customized per virtual host or per list by setting the ''max_size'' robot or list parameter.

Example: <code>max_size 2097152</code>

===== misaddressed_commands =====

(Default value: ''reject'')

When a robot command is sent to a list, by default Sympa rejects this message. This feature can be turned off setting this parameter to ignore.


===== misaddressed_commands_regexp =====

(Default value: ''(subscribe|unsubscribe|signoff)'')

This is the Perl regular expression applied on messages subject and body to detect misaddressed commands, see [[#misaddressed_commands|misaddressed_commands parameter]].


===== nrcpt =====

(Default value: ''25'')

Maximum number of recipients per ''sendmail'' call. This grouping factor makes it possible for the (''sendmail'') MTA to optimize the number of SMTP sessions for message distribution. If needed, you can limit the number of recipients for a particular domain. Check the ''nrcpt_by_domain'' configuration file (see [[manual:organization#nrcptbydomain|nrcpt_by_domain]]).


===== avg =====

(Default value: ''10'')

Maximum number of different Internet domains within addresses per ''sendmail'' call.



===== alias_manager =====

(Default value: ''/home/sympa/bin/alias_manager.pl'')

The absolute path to the script that will add/remove mail aliases, see [[manual:mail-aliases]]. 

Example: <code>alias_manager /home/sympa/bin/ldap_alias_manager.pl</code>

===== sendmail =====

(Default value: ''/usr/sbin/sendmail'')

Absolute path to SMTP message transfer agent binary. Sympa expects this binary to be sendmail compatible (postfix, Qmail and Exim binaries all provide sendmail compatibility).

Example: <code>sendmail /usr/sbin/sendmail</code>

===== sendmail_args =====

(Default value: ''-oi -odi -oem'')

Arguments passed to the SMTP message transfer agent.

===== sendmail_aliases =====

(Default value: ''defined by makefile, sendmail_aliases | none'')

Path of the alias file that contains all list related aliases. It is recommended to create a specific alias file so that Sympa never overwrites the standard alias file, but only a dedicated file. You must refer to this aliases file in your ''sendmail.mc'': set this parameter to ''none'' if you want to disable alias management in Sympa (e.g. if you use ''virtual_transport'' with Postfix).

===== rfc2369_header_fields =====

(Default value: ''help,subscribe,unsubscribe,post,owner,archive'')

RFC2369 compliant header fields (List-xxx) to be added to distributed messages. These header fields should be implemented by MUA's, adding menus.

===== remove_headers =====

(Default value: ''Return-Receipt-To,Precedence,X-Sequence,Disposition-Notification-To'')

This is the list of SMTP headers fields that Sympa should remove from incoming messages. Use it, for example, to ensure some privacy for your users by discarding anonymous options. An equivalent parameter can be set in list configuration files. The removal of these header fields is applied before Sympa adds his own header fields (''rfc2369_header_fields'' and ''custom_header'').

Example: <code>remove_headers Resent-Date,Resent-From,Resent-To,Resent-Message-Id,Sender,Delivered-To"</code>


===== remove_outgoing_headers =====

(Default value: ''none'')

You can define a comma-separated list of SMTP header fields that you wish Sympa to remove from outgoing headers. An equivalent parameter can be set in list configuration files. The removal happens after Sympa's own header fields are added ; therefore, it is a convenient way to remove Sympa's own header fields (like ''X-Loop'' or ''X-No-Archive'') if you wish.

Example: <code>remove_outgoing_headers X-no-archive"</code>

===== ignore_x_no_archive_header_feature =====

(Default value: ''off'')

Sympa's default behavior is to skip archiving of incoming messages that have an ''X-no-archive'' SMTP header filed set. The ''ignore_x_no_archive_header_feature'' parameter allows to change this behavior.

Example: <code>gnore_x_no_archive_header_feature on</code>


===== anonymous_headers_fields =====

(Default value:\\ ''Sender,X-Sender,Received,Message-id,From,X-Envelope-To,Resent-From,Reply-To,Organization,Disposition-Notification-To,X-Envelope-From,X-X-Sender'')

This parameter defines the list of SMTP header fields that should be removed when a mailing list is setup in anonymous mode (see [[manual:parameters-sending#anonymous_sender|anonymous_sender]]).


===== list_check_smtp =====

(Default value: ''NONE'')

If this parameter is set with a SMTP server address, Sympa will check if alias with the same name as the list you are creating already exists on the SMTP server. It is robot specific, i.e. you can specify a different SMTP server for every virtual host you are running. This is needed if you are running Sympa on somehost.foo.org, but you handle all your mail on a separate mail relay.

===== list_check_suffixes =====

(Default value: ''request,owner,unsubscribe'')

This parameter is a comma-separated list of admin suffixes you are using for Sympa aliases, i.e. ''mylist-request'', ''mylist-owner'', etc. This parameter is used with the ''list_check_smtp'' parameter. It is also used to check list names at list creation time.

===== urlize_min_size =====

(Default value: ''10240'')

This parameter is related to the ''URLIZE'' subscriber delivery mode; it defines the minimum size (in bytes) for MIME attachments to be urlized.

====== Quotas ======

===== default_shared_quota =====

The default disk quota (the unit is Kbytes) for lists' document repositories.

===== default_archive_quota =====

The default disk quota (the unit is Kbytes) for lists' web archive.

====== Spool related ======

===== spool =====

(Default value: ''/home/sympa/spool'')

The parent directory which contains all the other spools.

===== queue =====

The absolute path of the directory which contains the queue, used both by the ''queue'' program and the ''sympa.pl'' daemon. This parameter is mandatory.

Example: <code>/home/sympa/spool/msg</code>

===== queuedistribute =====

(Default value: ''/home/sympa/spool/distribute'')

This parameter is optional and retained solely for backward compatibility.

===== queuemod =====

(Default value: ''/home/sympa/spool/moderation'')

This parameter is optional and retained solely for backward compatibility.

===== queuedigest =====

This parameter is optional and retained solely for backward compatibility.

===== queueauth =====

(Default value: ''/home/sympa/spool/auth'')

This parameter is optional and retained solely for backward compatibility.

===== queueoutgoing =====

(Default value: ''/home/sympa/spool/outgoing'')

This parameter is optional and retained solely for backward compatibility.

===== queuetopic =====

(Default value: ''/home/sympa/spool/topic'')

This parameter is optional and retained solely for backward compatibility.

===== queuebounce =====

(Default value: ''/home/sympa/spool/bounce'')

Spool to store bounces (non-delivery reports) received by the ''bouncequeue'' program via the ''mylist-owner'' (unless this suffix was customized) or ''bounce+*'' addresses (VERP) . This parameter is mandatory and must be an absolute path.

===== queuetask =====

(Default value: ''/home/sympa/spool/task'')

Spool to store task files created by the task manager. This parameter is mandatory and must be an absolute path.

===== queueautomatic =====

(Default value: ''none'')

The absolute path of the directory which contains the queue for automatic list creation, used by both the ''familyqueue'' program and the ''sympa.pl'' daemon. This parameter is mandatory when enabling ''automatic_list_creation''.

Example: <code>/home/sympa/spool/msg</code>

===== tmpdir =====

(Default value: ''/home/sympa/spool/tmp'')

Temporary directory used by OpenSSL and antiviruses.

===== sleep =====

(Default value: ''5'')

Waiting period (in seconds) between each scan of the main queue. Never set this value to 0!


===== clean_delay_queue =====

(Default value: ''1'')

Retention period (in days) for "bad" messages in the messages spool (as specified by ''[[#queue|queue]]''). Sympa keeps messages rejected for various reasons (badly formatted, looping, etc.) in this directory. This configuration variable controls the number of days these messages are kept.

Example: <code>clean_delay_queue 3</code>

===== clean_delay_queueoutgoing =====

(Default value: ''1'')

Retention period (in days) for "bad" messages in the outgoing spool (as specified by ''[[#queueoutgoing|queueoutgoing]]''). Sympa keeps messages rejected for various reasons (unable to create archive directory, to copy file, etc.) in this directory. This configuration variable controls the number of days these messages are kept.

Example: <code>clean_delay_queueoutgoing 3</code>


===== clean_delay_queuebounce =====

(Default value: ''1'')

Retention period (in days) for "bad" messages in the bounce spool (as specified by ''[[#queuebounce|queuebounce]]''). Sympa keeps messages rejected for various reasons (unknown original sender, unknown feedback type) in this directory. This configuration variable controls the number of days these messages are kept.

Example: <code>clean_delay_queuebounce 3</code>

===== clean_delay_queueother =====

(Default value: ''30'')

Retention period (in days) for messages in the ''bounce/OTHER'' spool (as specified by ''[[#queuebounce|queuebounce]]''). Sympa keeps messages rejected for various reasons in this directory. This configuration variable controls the number of days these messages are kept.

Example: <code>clean_delay_queueother 7</code>


===== clean_delay_queuemod =====

(Default value: ''10'')

Expiration delay (in days) in the moderation spool (as specified by ''[[#queuemod|queuemod]]''). Beyond this deadline, messages that have not been processed are deleted. For moderated lists, the contents of this spool can be consulted using a key along with the ''MODINDEX'' command.

===== clean_delay_queueauth =====

(Default value: ''3'')

Expiration delay (in days) in the authentication queue. Beyond this deadline, messages not enabled are deleted.

===== clean_delay_queuesubscribe =====

(Default value: ''10'')

Expiration delay (in days) in the subscription requests queue. Beyond this deadline, requests not validated are deleted.

===== clean_delay_queuetopic =====

(Default value: ''7'')

Delay for keeping message topic files (in days) in the topic queue. Beyond this deadline, files are deleted.


===== clean_delay_queueautomatic =====

(Default value: ''10'')

Retention period (in days) for "bad" messages in automatic spool (as specified by ''[[#queueautomatic|queueautomatic]]''). Sympa keeps messages rejected for various reasons (badly formatted, looping, etc.) in this directory, with a name prefixed with ''BAD''. This configuration variable controls the number of days these messages are kept.

===== clean_delay_tmpdir =====

(Default value: ''7'')

Retention period (in days) for files put in the tmp dir (as specified by ''[[#tmpdir|tmpdir]]''). This configuration variable controls the number of days these files are kept.====== sympa.conf parameters ======

======  Internationalization related ======

===== localedir =====

(Default value: ''/home/sympa/locale'')

The location of multilingual catalog files. Must correspond to ''~src/locale/Makefile''.

===== supported_lang =====

Example: <code>supported_lang fr,en_US,de,es</code>

This parameter lists all supported languages (comma separated) for the user interface. The default value will include all message catalogs but it can be narrowed by the listmaster.

===== lang =====

(Default value: ''en_US'')

This is the default language for Sympa. The message catalog (''.po'', compiled as a ''.mo'' file) located in the corresponding locale directory will be used.

===== web_recode_to =====

(OBSOLETE)

All web pages now use UTF-8 charset

===== filesystem_encoding =====

OBSOLETE

Now all files (including configuration files, templates, authorization scenarios,...) must use UTF-8 charset.

======  Bounce related ======


===== verp_rate =====

(Default value: ''0%'')

See [[manual:bounces#verp|VERP]] for more information on VERP in Sympa.

When ''verp_rate'' is null, VERP is not used; if ''verp_rate'' is 100%, VERP is always in use.

VERP requires plussed aliases to be supported and the ''bounce+*'' alias to be installed.

===== welcome_return_path =====

(Default value: ''owner'')

If set to string unique, Sympa enables VERP for welcome messages and bounce processing will remove the subscription if a bounce is received for the welcome message. This prevents to add bad address in the subscriber list.

===== remind_return_path =====

(Default value: ''owner'')

Like ''welcome_return_path'', but relates to the remind message.

===== return_path_suffix =====

(Default value: ''-owner'')

This defines the suffix that is appended to the list name to build the return-path of messages sent to the lists. This is the address that will receive all non delivery reports (also called bounces).

===== expire_bounce_task =====

(Default value: ''daily'')

This parameter tells what task will be used by ''task_manager.pl'' to perform bounce expiration. This task resets bouncing information for addresses not bouncing in the last 10 days after the latest message distribution.

===== purge_orphan_bounces_task =====

(Default value: ''Monthly'')

This parameter tells what task will be used by ''task_manager.pl'' to perform bounce cleaning. This task deletes bounce archive for unsubscribed users.

===== eval_bouncers_task =====

(Default value: ''daily'')

The task ''eval_bouncers'' evaluates all bouncing users for all lists, and fill the field ''bounce_score_suscriber'' in table ''suscriber_table'' with a score. This score allows the auto-management of bouncing users.

===== process_bouncers_task =====

(Default value: ''monthly'')

The task ''process_bouncers'' executes configured actions on bouncing users, according to their score. The association between score and actions has to be done in List configuration. This parameter defines the frequency of execution for this task.

===== minimum_bouncing_count =====

(Default value: ''10'')

This parameter is for the bounce-score evaluation: the bounce-score is a mark that allows the auto-management of bouncing users. This score is evaluated with, in particular, the number of message bounces received for the user. This parameter sets the minimum number of these messages to allow the bounce-score evaluation for a user.

===== minimum_bouncing_period =====

(Default value: ''10'')

Determine the minimum bouncing period for a user to allow his bounce-score evaluation. Like previous parameter, if this value is too low, bounce-score will be 0.

===== bounce_delay =====

(Default value: ''0'')

Another parameter for the bounce-score evaluation: this one represents the average time (in days) for a bounce to come back to the Sympa server after a post was send to a list. Usually bounces are delivered on the same day as the original message.


===== default_bounce_level1_rate =====

(Default value: ''45'')

This is the default value for ''bouncerslevel1 rate'' entry (see [[manual:parameters-bounces#bouncers_level1|bouncers_level1]]).


===== default_bounce_level2_rate =====

(Default value: ''75'')

This is the default value for ''bouncerslevel2 rate'' entry ( see [[manual:parameters-bounces#bouncers_level2|bouncers_level2]]).


===== bounce_email_prefix =====

(Default value: ''bounce'')

The prefix string used to build variable envelope return path (VERP). In the context of VERP enabled, the local part of the address starts with a constant string specified by this parameter. The email is used to collect bounce. Plussed aliases are used in order to introduce the variable part of the email that encodes the subscriber address. This parameter is useful if you want to run more than one Sympa on the same host (a test Sympa for example).

If you change the default value, you must modify the sympa aliases too.

For example, if you set it as:

<code>
bounce_email_prefix bounce-test
</code>

you must modify the sympa aliases like this:

<code>
bounce-test+*: | /home/sympa/bin/queuebounce sympa@my.domain.org
</code>

See [[manual:mail-aliases#robot_aliases|Robot aliases]] for all aliases.

===== bounce_warn_rate =====

(Default value: ''30'')

Site default value for bounce. The list owner receives a warning whenever a message is distributed and the number of bounces exceeds this value.

===== bounce_halt_rate =====

(Default value: ''50'')

FOR FUTURE USE

Site default value for bounce. Messages will cease to be distributed if the number of bounces exceeds this value.

===== default_remind_task =====

(Default value: ''2month'')

This parameter defines the default ''remind_task'' list parameter.

======  Tuning ======


===== cache_list_config =====

Format: ''none | binary_file'' (Default value: ''none'')

If this parameter is set to ''binary_file'', then Sympa processes will maintain a binary version of the list config structure on disk (''config.bin'' file). This file is bypassed whenever the ''config'' file changes on disk. Thanks to this method, the startup of Sympa processes is much faster because it saves the time of parsing all config files. The drawback of this method is that the list config cache can live for a long time (not recreated when the Sympa processes restart); the Sympa processes could still use authorization scenario rules or default for list parameters (set in sympa.conf) that have changed on disk in the meantime. You can work this problem out by frequently running a <html><span style="font-family: courier">sympa.pl --reload_list_config</span></html> using the crontab. In the long term, Sympa should update ''config.bin'' files via the task_manager.

You should use list config cache if you are managing a big amount of lists (1000+).

===== lock_method =====

Format: ''flock | nfs'' (Default value: ''flock'')

This parameter will tell Sympa how it should perform locks when required (updating DB, updating config file,...). The default method uses the standard ''flock'' function. Another option is to use NFS locking ; it requires that you install ''File::NFSLock'' perl module first.

===== sympa_priority =====

(Default value: ''1'')

Priority applied to Sympa commands while running the spool.

Available since release 2.3.1.

===== request_priority =====

(Default value: ''0'')

Priority for processing of messages for ''mylist-request'', i.e. for owners of the list.

Available since release 2.3.3.


===== owner_priority =====

(Default value: ''9'')

Priority for processing messages for ''mylist-owner'' in the spool. This address will receive non-delivery reports (bounces) and should have a low priority.

Available since release 2.3.3.

===== default_list_priority =====

(Default value: ''5'')

Default priority for messages if not defined in the list configuration file.

Available since release 2.3.1.

====== Database related ======

The following parameters are needed when using a RDBMS, but are otherwise not required.

===== update_db_field_types =====

Format: <code>update_db_field_types auto | disabled</code>

(Default value: ''auto'')

This parameter defines whether Sympa automatically updates database structure to match the expected datafield types. This feature is only available with MySQL. Note howevere that since version 5.3b.5, Sympa will not alter DB fileds that have a bigger size (if ''update_db_fields_types'' is set to ''auto'').

===== db_type =====

Format: <code>db_type mysql | SQLite | Pg | Oracle | Sybase</code>

Database management system used (e.g. MySQL, Pg, Oracle)

This corresponds to the PERL DataBase Driver (DBD) name and is therefore case-sensitive.

===== db_name =====

(Default value: ''sympa'')

Name of the database containing user information. If you are using SQLite, then this parameter is the DB file name.

===== db_host =====

Database host name.

===== db_port =====

Database port.

===== db_user =====

User with read access to the database.

===== db_passwd =====

Password for db_user.

===== db_timeout =====

This parameter is used for SQLite only.

===== db_options =====

If these options are defined, they will be appended to the database connect string.

Example for MySQL: <code>db_options	mysql_read_default_file=/home/joe/my.cnf;mysql_socket=tmp/mysql.sock-test</code>

Check the related DBD documentation to learn about the available options.

===== db_env =====

Gives a list of environment variables to set before database connection. This is a ';' separated list of variable assignments.

Example for Oracle: <code>db_env	ORACLE_TERM=vt100;ORACLE_HOME=/var/hote/oracle/7.3.4</code>

===== db_additional_subscriber_fields =====

If your ''subscriber_table'' database table has more fields than required by Sympa (because other programs access this table), you can make Sympa recognize these fields. You will then be able to use them from within mail/web templates and authorization scenarios (as [subscriber->field]). These fields will also appear in the list members review page and will be editable by the list owner. This parameter is a comma-separated list.

Example: <code>db_additional_subscriber_fields 	billing_delay,subscription_expiration</code>

===== db_additional_user_fields =====

If your ''user_table'' database table has more fields than required by Sympa (because other programs access this table), you can make Sympa recognize these fields. You will then be able to use them from within mail/web templates (as [user->field]). This parameter is a comma-separated list.

Example: <code>db_additional_user_fields 	address,gender</code>


===== purge_user_table_task =====

This parameter refers to the name of the task (Example: ''monthly'') that will be regularly run by the ''task_manager.pl'' to remove entries in the ''user_table'' table that have no corresponding entries in the ''subscriber_table'' table.

===== purge_logs_table_task =====

(Default value: ''daily'')

This parameter refers to the name of the task (Example: ''monthly'') that will be regularly run by the ''task_manager.pl'' to remove entries in the ''logs_table'' table.

===== logs_expiration_period =====

(Default value: ''3'')

Datas in ''logs_table'' table are removed when they are older than ''logs_expiration_period''. The parameter value is interpreted as a number of month. (FIXME it should be replaced by stand duration expression).  

===== purge_session_table_task =====

(Default value: ''daily'')

This parameter refers to the name of the task (Example: ''monthly'') that will be regularly run by the ''task_manager.pl'' to remove entries in the ''session_table'' table.

===== session_table_ttl =====

(Default value: ''3d'')

Session duration is controled by ''sympa_session'' cookie validity attribute, but it is needed for security reason to control this delay on the server side. The default time to leave for sessions. Session with unactivity period longer than this parameters are removed. If this parameter is very long then the session_table may become very large, mainly because most crawler robots do not manage cookies.

Duration values format are easy to read, the format is a string without spaces including y for years, m for months d for days, h for hours min for minutes and sec for secondes.

===== purge_chalenge_table_task =====

(Default value: ''daily'')

This parameter refers to the name of the task (Example: ''monthly'') that will be regularly run by the ''task_manager.pl'' to remove entries in the ''chalenge_table'' table. (This table is  used to store information about email authentication chalenges).

===== chalenge_table_ttl =====

(Default value: ''5d'') 

Chalenge sent by email are store until they are used, but Sympa may remove chalenges that are //too old// both for security reasons and to keep table in a reasonable size. This parameter is used to specify what does mean //a too old chalenge//.

======  Loop prevention ======

The following define your loop prevention policy for commands (see [[manual:customizing#loop_detection|Loop detection]]).

===== loop_command_max =====

(Default value: ''200'')

The maximum number of command reports sent to an email address. When it is reached, messages are stored with the ''BAD'' prefix, and reports are no longer sent.

===== loop_command_sampling_delay =====

(Default value: ''3600'')

This parameter defines the delay in seconds before decrementing the counter of reports sent to an email address.

===== loop_command_decrease_factor =====

(Default value: ''0.5'')

The decrementation factor (from 0 to 1), used to determine the new report counter after expiration of the delay.

===== loop_prevention_regex =====

(Default value: ''mailer-daemon|sympa|listserv|majordomo|smartlist|mailman'')

This regular expression is applied to message sender addresses. If the sender address matches the regular expression, then the message is rejected. The goal of this parameter is to prevent loops between Sympa and other robots.

======  S/MIME configuration ======

Sympa can optionally check and use S/MIME signatures for security purposes. In this case, the three first following parameters must be set by the listmaster (see [[manual:x509#configuration_in_sympa.conf|Configuration in sympa.conf]]. The two others are optional.

===== openssl =====

The path for the OpenSSL binary file.

===== capath =====

The directory path use by OpenSSL for trusted CA certificates.

A directory of trusted certificates. The certificates should have names of the form ''hash.0'' or have symbolic links of this form to them (''hash'' is the hashed certificate subject name: see the ''-hash'' option of the OpenSSL x509 utility). This directory should be the same as the directory ''SSLCACertificatePath'' specified for the ''mod_ssl'' module for Apache.

===== cafile =====

This parameter sets the all-in-one file where you can assemble the Certificates of Certification Authorities (CA) whose clients you deal with. These are used for Client Authentication. Such a file is simply the concatenation of the various PEM-encoded Certificate files, in order of preference. This can be used alternatively and/or additionally to ''capath''.

===== key_passwd =====

The password for list private key encryption. If not defined, Sympa assumes that list private keys are not encrypted.

====== Antivirus plug-in ======

Sympa can optionally check incoming messages before delivering them, using an external antivirus solution. You must then set two parameters.

===== antivirus_path =====

The path to your favorite antivirus binary file (including the binary file).

Example: <code>antivirus_path		/usr/local/bin/uvscan</code>


===== antivirus_args =====

The arguments used by the antivirus software to look for viruses. You must set them so as to get the virus name. You should use, if available, the ''unzip'' option and check all extensions.

Example with uvscan: <code>antivirus_args		--summary --secure</code>

Example with fsav: <code>antivirus_args		--dumb	--archive</code>

Example with AVP:

<code>
  antivirus_path  /opt/AVP/kavscanner
  antivirus_args  -Y -O- -MP -I0
</code>

Example with Sophos:

  antivirus_path  /usr/local/bin/sweep
  antivirus_args  -nc -nb -ss -archive

Example with Clamav:

<code>
  antivirus_path  /usr/local/bin/clamdscan
  antivirus_args  --stdout
</code>


===== antivirus_notify =====

''sender | nobody''

(Default value: ''sender'')

This parameter defines whether Sympa should notify the email sender when a virus has been detected.====== Sympa and its database ======

Sympa requires a RDBMS to run. Currently you can use one of the following RDBMS: MySQL (version 4.1 minimum), SQLite, PostgreSQL, Oracle, Sybase. Interfacing with other RDBMS requires only a few changes in the code, since the API used, [[http://www.symbolstone.org/technology/perl/DBI/|DBI]] (DataBase Interface), has DBD (DataBase Drivers) for many RDBMS.

Sympa stores three kinds of information in the database, each in one table:

  * user preferences and passwords are stored in the ''user_table'' table;
  * list subscription information is stored in the ''subscriber_table'' table, along with subscription options. This table also contains the cache for included users (if using ''include2'' mode);
  * list administrative information is stored in the ''admin_table'' table if using ''include2'' mode, along with owner and editor options. This table also contains the cache for included owners and editors.
  * logs events are stored in the ''logs_table'' ; list owners can browse the events for their list through the web interface.

======  Prerequisites ======

You need to have a DataBase System installed (not necessarily on the same host as Sympa), and the client libraries for that Database installed on the Sympa host; provided, of course, that a PERL DBD (DataBase Driver) is available for the RDBMS you chose! Check the [[http://www.symbolstone.org/technology/perl/DBI/|''DBI'' Module Availability]].


======  Installing PERL modules ======

Sympa will use ''DBI'' to communicate with the database system and therefore requires the DBD for your database system. DBI and <nowiki>DBD::YourDB</nowiki> (''Msql-Mysql-modules'' for MySQL) are distributed as CPAN modules. Refer to [[installing-sympa#installing_PERL_and_CPAN_modules|Installing PERL and CPAN modules]] for installation details of these modules.

======  Creating a Sympa DataBase ======

=====  Database structure =====

The Sympa database structure is slightly different from the structure of a ''subscribers'' file. A ''subscribers'' file is a text file based on paragraphs (similar to the ''config'' file); each paragraph completely describes a subscriber. If somebody is subscribed to two lists, he/she will appear in both subscribers files.

The DataBase distinguishes between information relating to a person (email, real name, password) and his/her subscription options (list concerned, date of subscription, delivery mode, visibility option). This results in a separation of the data into two tables : the ''user_table'' and the ''subscriber_table'', linked by a user/subscriber email.

The table concerning owners and editors, the ''admin_table'', is built on the same model as the ''subscriber_table'' but is used only in ''include2'' mode. It contains owner and editor options (list concerned, administrative role, date of "subscription", delivery mode, private information, gecos and profile option for owners).

=====  Database automatic creation and update =====

At startup, the ''sympa.pl'' process will check if the database (configured in ''sympa;conf'') is available and if it has the expected structure. If not, ''sympa.pl'' process will create the database or update its structure for you. **Note however that this feature is available with mysql only**, integration for other RDBMS is less complete. Note that this automated process requires that the mysql ''root'' does not use a password ; if it does, disable it before you run ''sympa.pl'' for the first time.

The automatic procedure will also grant privileges to the ''db_user'' you've declared in ''sympa.conf''.


=====  Database manual creation =====

The ''create_db'' script below will create the Sympa database for you. You can find it in the ''script/'' directory of the distribution (currently scripts are available for MySQL, SQLite, PostgreSQL, Oracle and Sybase).

  * MySQL database creation script:


{{url>http://www.sympa.org/distribution/latest-stable/src/etc/script/create_db.mysql}}

  * SQLite database creation script:

{{url>http://www.sympa.org/distribution/latest-stable/src/etc/script/create_db.SQLite}}

  * PostgreSQL database creation script:

{{url>http://www.sympa.org/distribution/latest-stable/src/etc/script/create_db.Pg}}

  * Sybase database creation script:

{{url>http://www.sympa.org/distribution/latest-stable/src/etc/script/create_db.Sybase}}

  * Oracle database creation script:

{{url>http://www.sympa.org/distribution/latest-stable/src/etc/script/create_db.Oracle}}

You can execute the script using a simple SQL shell such as mysql, psql or sqlplus.

Example: <code># mysql  < create_db.mysql</code>


======  Setting database privileges ======

We strongly recommend that you restrict access to the Sympa database. You will then set ''db_user'' and ''db_passwd'' in ''sympa.conf''.

With MySQL: <code>grant all on sympa.* to sympa@localhost identified by 'your_password';
  flush privileges;</code>


======  Importing subscriber data ======


=====  Importing data from a text file =====

You can import subscribes data into the database from a text file having one entry per line: the first field is an email address, the second (optional) field is the free form name. Fields are space-separated.

Example:

<code>
  ## Data to be imported
  ## email        gecos
  john.steward@some.company.com           John - accountant
  mary.blacksmith@another.company.com     Mary - secretary
</code>

To import data into the database: <code>cat /tmp/my_import_file | sympa.pl --import=my_list</code>

(see [[running-sympa#sympa.pl|sympa.pl]]).


=====  Importing data from subscribers files =====

If a mailing list was previously set up to store subscribers into a ''subscribers'' file (the default mode in versions older then 2.2b), you can load subscriber data into the Sympa database. The easiest way is to edit the list configuration using //WWSympa// (this requires listmaster privileges) and change the data source from ''file'' to ''database''; subscriber data will be loaded into the database at the same time.

If the ''subscribers'' file is large, a timeout may occur during the FastCGI execution (note that you can set a longer timeout with the ''-idle-timeout'' option of the ''FastCgiServer'' Apache configuration directive). In this case, or if you have not installed //WWSympa//, you should use the ''load_subscribers.pl'' script.


====== Management of the include cache ======

You may dynamically add a list of subscribers, editors or owners to a list with Sympa's ''include2'' user data source. Sympa is able to query multiple data sources (RDBMS, LDAP directory, flat file, local list, remote list) to build a mailing list.

Sympa used to manage the cache of such //included// subscribers in a DB File (''include'' mode), but now stores subscribers, editors and owners in the database (''include2'' mode). These changes brought the following advantages:

  * Sympa processes are smaller when dealing with big mailing lists (in include mode).
  * Cache update is now performed regularly by a dedicated process, the task manager.
  * Mixed lists (included + subscribed users) can now be created.
  * Sympa can now provide delivery options for //included// members.
  * Bounce information can be managed for //included// members.
  * Sympa keeps track of the data sources of a member (available on the web REVIEW page).
  * //Included// members can also subscribe to the list. It allows them to remain in the list in case they might not be included anymore.

======  Extending database table format ======

You can easily add other fields to the three tables, they will not disturb Sympa because it lists explicitly the field it expects in SELECT queries.

Moreover, you can access these database fields from within Sympa (in templates), as far as you list these additional fields in ''sympa.conf'' (see [[manual:conf-parameters:part3#db_additional_subscriber_fields|db_additional_subscriber_fields]] and [[manual:conf-parameters:part3#db_additional_user_fields|db_additional_user_fields]]).


====== Sympa logs in the database ======

The ''logs_table'' database table has been introduced with release 5.3 of Sympa. This DB table gathers some kind of logs/journals that Sympa want to keep track of. Only events that changes Sympa's state are logged ; this includes member subscription/removal, message distribution/moderation, bounces handling, user authentication on the web interface. The content of the database can then be searched by list owners ; privacy is enforced to prevent a list owner to access information from other lists.

The ''logs_table'' table is purged to prevent DB size to diverge. The retention period of log entries is defined by the [[conf-parameters/part3#logs_expiration_period|logs_expiration_period parameter]]

Below is a description of each field of the ''logs_table'' table :
  * id_logs: primary key for the table.
  * date_logs: epoch date representing the time when the action was performed.
  * robot_logs: the robot the action relates to. It may be empty if no specific virtual host is concerned.
  * list_logs: the list the action refers to. It may be undefined if the action does not refer to a specific list (like authentication related actions).
  * action_logs: an identifier for the action performed. Each action belongs to a group of actions (authentication related, subscription related, etc). The list of actions and the group they relate to is defined in the ''Log.pm'' perl module.
  * parameters_logs: parameters of the action. It is an optional comma-separated list of parameters.
  * user_email_logs: this field tells who is performing the action, if authenticated.
  * target_email_logs: this parameter represents the email address that is mainly concerned by the actionn ; it may be empty. If a list owner adds a new member to his list, ''the target_email_logs'' field will contain the new member email address.
  * client_logs: IP address of the user performing the action, may be empty if action is performed via the mail interface.
  * msg_id_logs: Message-ID of the message, if the action applies an a message.
  * status_logs: the status of the action ; it will contain one of the following values : ''success'', ''error''.
  * error_type_logs: If the action failed, this field an error identifier representing the error.
  * daemon_logs: tells which process has performed the action. It may be one of ''bounced'', ''sympa'', ''wwsympa''



======  Sympa configuration ======

To store subscriber information in your newly created database, you first need to tell Sympa what kind of database to work with, then you must configure your list to access the database.

You'll need to tell Sympa where is located its database through the [[conf-parameters/part3#database_related|related sympa.conf parameters]] : ''db_type'', ''db_name'', ''db_host'', ''db_user'', ''db_passwd''.

If you are interfacing Sympa with an Oracle database, note that :
  - the ''db_name'' corresponds to the Oracle SID.
  - you'll need to set the ''ORACLE_HOME'' environment variable through the [[conf-parameters/part3#db_env|db_env sympa.conf parameter]]

All your lists are now configured to use the database, unless you set the list parameter ''user_data_source'' to ''file'' or ''include''.

Sympa will now extract and store user information for this list using the database instead of the ''subscribers'' file. Note however that subscriber information is dumped to ''subscribers.db.dump'' at every shutdown, to allow a manual rescue restart (by renaming ''subscribers.db.dump'' to ''subscribers'' and changing the ''user_data_source'' parameter), in case the database were to become inaccessible.
======  WWSympa, Sympa's web interface ======

//WWSympa// is Sympa's web interface.





====== Organization ======

//WWSympa// is fully integrated with Sympa. It uses ''sympa.conf'' and Sympa's libraries. The default Sympa installation will also install //WWSympa//.

Every single piece of HTML in //WWSympa// is generated by the CGI code using template files (See [[customizing#template_file_format|Template file format]]). This makes internationalization of pages, as well as per-site customization, easier.

The code consists of one single PERL CGI script, ''wwsympa.fcgi''. To enhance performances you can configure //WWSympa// to use [[#using_fastcgi|FastCGI]]; the CGI will be persistent in memory. \\  All data will be accessed through the CGI, including web archives. This is required to allow the authentication scheme to be applied systematically.

Authentication is based on passwords stored in the database table ''[[../internals/index#user_table|user_table]]''; if the appropriate ''Crypt::CipherSaber'' is installed, passwords are encrypted in the database using reversible encryption based on RC4. Otherwise, they are stored in clear text. In both cases, reminding of passwords is possible.

To keep track of authentication information, //WWSympa// uses HTTP cookies stored on the client side. The HTTP cookie only indicates that a specified email address has been authenticated; permissions are evaluated when an action is requested.

The same web interface is used by the listmaster, list owners, subscribers and others. Depending on permissions, the same URL may generate a different view.

//WWSympa//'s main loop algorithm is roughly the following:

  - check authentication information returned by the HTTP cookie;
  - evaluate user's permissions for the requested action;
  - process the requested action;
  - set up variables resulting from the action;
  - parse the HTML template files.

======  Web server setup ======



=====  wwsympa.fcgi access permissions =====

Because Sympa and //WWSympa// share a lot of files, ''wwsympa.fcgi'' must run with the same uid/gid as ''archived.pl'', ''bounced.pl'' and ''sympa.pl''. There are different ways to achieve this.



==== Default behaviour ====

=== Until version 5.3: SetuidPerl ===

This is the default method but might be insecure. If you don't set the ''--enable_secure'' configuration option, ''wwsympa.fcgi'' is installed with the SetUID bit set. On most systems, you will need to install the suidperl package.

=== Starting version 5.4: C wrapper ===

The C wrapper presented in the preceding section will be automatically built starting version 5.4.

The wwsympa.fcgi is wrapped in a small C script, wwsympa-wrapper.fcgi, in order to avoid to use the -- unsecure and no longer maintained -- SetuidPerl mode.

==== Alternatives (all versions) ====

=== Sudo ===

Use ''sudo'' to run ''wwsympa.fcgi'' as user ''sympa''. Your Apache configuration should use ''wwsympa_sudo_wrapper.pl'' instead of ''wwsympa.fcgi''. You should edit your ''/etc/sudoers'' file (with ''visudo'' command) as follows: <code>apache ALL = (sympa)  NOPASSWD: /home/sympa/bin/wwsympa.fcgi</code>

You should also check that the **requiretty** and **env_reset** flags are not set in the ''sudoers'' configuration file :
  #Defaults    requiretty
  #Defaults    env_reset

With ''requiretty'' set, sudo would only run when the user is logged in to a real tty; with ''env_reset'' set, most of your environment variables would be ignored... including your server name, the URL requested, etc.

=== Dedicated Apache server ===

Run a dedicated Apache server with ''sympa.sympa'' as uid.gid (the Apache default is ''apache.apache'');

=== Apache suExec ===

Use an Apache virtual host with ''sympa.sympa'' as uid.gid; Apache needs to be compiled with suexec. Be aware that the Apache suexec usually define a lowest UID/GID allowed to be a target user for suEXEC. For most systems, including binaries distribution of Apache, the default value ''100'' is common. So Sympa UID (and Sympa GID) must be higher than 100 or suexec must be tuned in order to allow lower UID/GID. Check [[http://httpd.apache.org/docs/suexec.html#install]] for details. The User and Group directive have to be set before the FastCgiServer directive is encountered;


=====  Installing wwsympa.fcgi in your Apache server =====

<note>In the following code examples, we suppose you're using the default 5.3 behaviour (see [[web-interface#wwsympa.fcgi_access_permissions|wwsympa.fcgi access permissions]]). The script launching the web server is then ''wwsympa.fcgi''. Depending to your configuration, this is likely to be changed as follows:

  * If you are using [[web-interface#sudo|sudo]], then replace ''wwsympa.fcgi'' calls with ''wwsympa_sudo_wrapper.pl'';
  * If you are using the [[web-interface#starting_version_5.4c_wrapper|Sympa 5.4 and higher default behaviour]], then replace ''wwsympa.fcgi'' calls with ''wwsympa-wrapper.fcgi''.
</note>

You first need to set an alias to the directory where Sympa stores static contents (CSS, member pictures, documentation) directly delivered by Apache.

Example: 
  Alias /static-sympa /home/sympa/static_content

If you chose to run ''wwsympa.fcgi'' as a simple CGI, you simply need to script alias it.

Example: 
  ScriptAlias /sympa /home/sympa/bin/wwsympa.fcgi

Running FastCGI will provide much faster responses from your server and reduce load (to understand why, read [[http://www.fastcgi.com/devkit/doc/fcgi-perf.htm]]).

If you are using //mod_fcgid// Apache module :
<code>
  LoadModule fcgid_module modules/mod_fcgid.so

  <IfModule mod_fcgid.c>
    IPCCommTimeout 120
    MaxProcessCount 2
  </IfModule>

  <Location /sympa>
    SetHandler fcgid-script
  </Location>
  
  ScriptAlias /sympa /home/sympa/bin/wwsympa.fcgi
</code>

If you are using //mod_fastcgi// Apache module :
<code>
  LoadModule fastcgi_module modules/mod_fastcgi.so
  FastCgiServer /home/sympa/bin/wwsympa.fcgi -processes 2
  <Location /sympa>
  SetHandler fastcgi-script
  </Location>
  
  ScriptAlias /sympa /home/sympa/bin/wwsympa.fcgi
</code>

If you run virtual hosts, then each FastCgiServer(s) can serve as multiple hosts. Therefore you need to define it in the common section of your Apache configuration file.



=====  Installing wwsympa.fcgi in nginx =====

This configuration was submitted by [[edward.kovarski@groupkae.com|E. Kovarski]].

To save any future [[http://nginx.net/|nginx]] users any headaches, here is a sample nginx.conf stanza which works with Sympa v5.3.3:

<code>server {
        listen       80;
        server_name  my.domain.org;

        location / {
            fastcgi_pass   unix:/var/run/sympa/wwsympa.socket;
            fastcgi_param  QUERY_STRING       $query_string;
            fastcgi_param  REQUEST_METHOD     $request_method;
            fastcgi_param  CONTENT_TYPE       $content_type;
            fastcgi_param  CONTENT_LENGTH     $content_length;
            fastcgi_param  PATH_INFO          $fastcgi_script_name;
            fastcgi_param  REQUEST_URI        $request_uri;
            fastcgi_param  REMOTE_ADDR        $remote_addr;
            fastcgi_param  SERVER_NAME        $server_name;
        }

        location /static-sympa {
                alias /usr/local/sympa/static_content;
        }
}
</code>

Note that the request_uri fastcgi parameter //is// necessary for virtual hosting.

I got bit by the documentation which said server_name is compared against http_host but after some debugging I noticed that $robot was not set in wwsympa properly unless it can match http_host against request_uri.

=====  Installing wwsympa.fcgi in lighttpd =====

This configuration was submitted by [[marcin.deranek@slonko.net|M. Deranek]].

Here is a configuration snippet to make run Sympa with lighttpd (http://www.lighttpd.net) webserver.

Config might require some path tweaking as it customized to Gentoo..

<code>
server.modules += ("mod_fastcgi")

alias.url += ( "/static-sympa/icons/" => "/usr/share/sympa/icons/" )
alias.url += ( "/static-sympa/" => "/var/spool/sympa/static_content/" )

$HTTP["url"] =~ "^/sympa" {
fastcgi.server = ( "/sympa" =>
			((	"check-local"	=>	"disable",
				"bin-path"	=>	"/usr/libexec/sympa/wwsympa-wrapper.fcgi",
				"socket"	=>	"/var/run/lighttpd/sympa.sock",
				"max-procs"	=> 	2,
				"idle-timeout"	=> 	20,
			))
		)
}
</code>

=====  Using FastCGI =====

[[http://www.fastcgi.com/|FastCGI]] is an extension to CGI, that provides persistency for CGI programs. It is extremely useful with //WWSympa//, since source code interpretation and all initialisation tasks are performed only once when wwsympa.fcgi processes start. These processes then work as a servlet/daemon, endlessly waiting for client requests.

//WWSympa// can also work without FastCGI, (check the [[web-interface#use_fast_cgi_0_1|use_fast_cgi - 1]] configuration parameter), but with poor performances.

To run //WWSympa// with FastCGI, you need to install:

  * The ''FCGI'' Perl module (see [[installing-sympa#installing_perl_and_cpan_modules]])
  * An Apache module that provides FastCGI features. You can choose between 2 such implementations : 
    * [[http://www.fastcgi.com/|mod_fastcgi]], the ''historical'' one. Note that it was not extended to work with Apache 2. You can however apply the patch provided [[http://hack.emilykwan.com/node/95|here]].
    * [[http://fastcgi.coremail.cn/|mod_fcgid]], an alternate implementation. The main difference between this module and ''mod_fastcgi'' is that fastcgi scripts are not launched at Apache startup, but when the first client request happens.

======  wwsympa.conf parameters ======


=====  arc_path =====

(Default value: ''/home/httpd/html/arc'') \\  Where to store HTML archives. This parameter is used by the ''archived.pl'' daemon. It is a good idea to install the archive outside the web hierarchy to prevent possible backdoors in the access control powered by //WWSympa//. However, if Apache is configured with a chroot, you may have to install the archive in the Apache directory tree.


=====  archive_default_index thrd - mail =====

(Default value: ''thrd'') \\  The default index organization when entering the web archive: either threaded or in chronological order.

=====  archived_pidfile =====

(Default value: ''archived.pid'') \\  The file containing the PID of ''archived.pl''.


=====  bounce_path =====

(Default value: ''/var/bounce'') \\  Root directory for storing bounces (non-delivery reports). This parameter is mainly used by the ''bounced.pl'' daemon.

=====  bounced_pidfile =====

(Default value: ''bounced.pid'') \\  The file containing the PID of ''bounced.pl''.


=====  cookie_expire =====

(Default value: ''0'') \\  Lifetime (in minutes) of HTTP cookies. This is the default value when not set explicitly by users.


=====  cookie_domain =====

(Default value: ''localhost'') \\  Domain for the HTTP cookies. If beginning with a dot (''.''), the cookie is available within the specified internet domain. Otherwise, for the specified host. Example:

<code>
  cookie_domain renater.fr
  cookie is available for host 'renater.fr'

  cookie_domain .renater.fr
  cookie is available for any host within 'renater.fr' domain
</code>

The only reason for replacing the default value would be where //WWSympa//'s authentication process is shared with an application running on another host.


=====  default_home =====

(Default value: ''home'') \\  Organization of the //WWSympa// home page. If you have only a few lists, the default value ''home'' (presenting a list of lists organized by topic) should be replaced by ''lists'' (a simple alphabetical list of lists).

=====  icons_url =====

(Default value: ''/icons'') \\  URL of //WWSympa//'s icon directory.

=====  log_facility =====

//WWSympa// will log using this facility. Defaults to Sympa's syslog facility. Configure your syslog according to this parameter.

=====  mhonarc =====

(Default value: ''/usr/bin/mhonarc'') \\  Path to the (superb) [[http://www.oac.uci.edu/indiv/ehood/mhonarc.html|MhOnArc program]]. Required for the HTML archive.


=====  htmlarea_url =====

(Default value: ''undefined'') \\  Relative URL to the (superb) online HTML editor HTMLarea. If you have installed Javascript application you can use it when editing HTML documents in the shared document repository. In order to activate this plugin, the value of this parameter should point to the root directory where HTMLarea is installed. HTMLarea is a free opensource software you can download here: [[http://sf.net/projects/itools-htmlarea]]

=====  password_case sensitive | insensitive =====

(Default value: ''insensitive'') \\  If set to ''insensitive'', //WWSympa//'s password check will be insensitive. This only concerns passwords stored in the Sympa database, not the ones in LDAP.

**Be careful:** in previous 3.xx versions of Sympa, passwords were lowercased before database insertion. Therefore changing to case-sensitive password checking could bring you some password checking problems.

=====  title =====

(Default value: ''Mailing List Service'') \\  The name of your mailing list service. It will appear in the Title section of //WWSympa//.

===== use_fast_cgi 0|1 =====

(Default value: ''1'') \\  Choice of whether or not to use FastCGI. On [[http://listes.renater.fr]], using FastCGI increases //WWSympa//'s performance by as much as a factor of 10. Refer to [[http://www.fastcgi.com]] and the Apache config section of this document for details about FastCGI.



======  Database configuration ======

//WWSympa// needs an RDBMS (Relational Database Management System) in order to run. All database access is performed via the Sympa API. Sympa currently interfaces with [[http://www.mysql.net/|MySQL]], [[http://sqlite.org/|SQLite]], [[http://www.postgresql.pyrenet.fr/|PostgreSQL]], [[http://www.oracle.com/database/|Oracle]] and [[http://www.sybase.com/index_sybase.html|Sybase]].

A database is needed to store user passwords and preferences. The database structure is documented in the Sympa documentation; scripts for creating it are also provided with the Sympa distribution (in ''script'').

User information (password and preferences) are stored in the ''User'' table. User passwords stored in the database are encrypted using reversible RC4 encryption controlled with the ''cookie'' parameter, since //WWSympa// might need to remind users of their passwords. The security of //WWSympa// rests on the security of your database.





======  Logging in as listmaster ======

Once Sympa is running, you should log in on the web interface as a privileged user (listmaster) to explore the admin interface, create mailing lists, etc.

Multiple email addresses can be declared as listmasters via the ''sympa.conf'' (or ''robot.conf'') ''listmaster'' configuration parameter (see [[.:conf-parameters:|sympa.conf parameters]]). Note that listmasters on the main robot (declared in ''sympa.conf'') also have listmaster privileges on virtual hosts, but they will not receive the various mail notifications (list creations, warnings,...) regarding these virtual hosts.

The listmasters should log in with their canonical email address as an identifier (not //listmaster@my.host//). The associated password is not declared in ''sympa.conf''; it will be allocated by Sympa when first hitting the ''Send me a password'' button on the web interface. As for any user, the password can then be modified via the ''Preferences'' menu.

Note that you must start the ''sympa.pl'' process with the web interface; it is responsible for delivering mail messages including password reminders.

===== The listmaster web interface =====

This section contains screenshots of the functionalities accessible through the Sympa web administration interface.

==== Overview ====

{{manual:admin_page.png?1400|}}

==== Identity change ====

As listmaster, you can assume another user's identity. Once done, the web interface will behave as if you were this person. This is useful for assistance.

{{manual:change_identity.png|}}

==== Log level change ====

By modifying this option, you change the log level of Sympa without restarting it. This allows you to temporarily increase the amount of logs produced.

{{manual:log_level.png|}}

==== Session vizualisation ====

This button makes Sympa display a page with all the current session opened.

{{manual:show_sessions.png|}}====== Sympa Internationalization ======

======  Catalogs and templates ======

Sympa is designed to allow easy internationalization of its user interface (service mail messages and web interface). All translations for one language are gathered in a single .PO file that can be manipulated by standard [[http://www.gnu.org/software/gettext/#TOCintroduction|GNU gettext tools]].

Documentation and resources about software translations : [[http://translate.sourceforge.net/doc]]

Sympa previously (until Sympa 4.1.x) used the XPG4 message catalogue format. Web and mail templates were language-specific. The new organization provides both a unique file to work on for translators and a standard format supported by many software. Sympa templates refer to translatable strings using the ''loc'' TT2 filter.

Examples:

  [%|loc%]User Email[% END %]

  [%|loc(list.name,user.email)%]You have subscribed to list %1 with email address %2[% END %]

Sympa had previously been translated into 15 languages more or less completely. We have automatically extracted the translatable strings from previous templates but this process is awkward and is only seen as a bootstrap for translators. Therefore Sympa distribution will not include previous translations until a skilled translator has reviewed and updated the corresponding .PO file.




======  Translating Sympa into your language ======

[[:translating_sympa|Instructions for translating Sympa]] are maintained on the Sympa website.

======  Defining language-specific templates ======

The default Sympa templates are language independant, refering to catalogue entries for translations. When customizing either web or mail templates, you can define different templates for different languages. The template should be located in a ''ll_CC'' subdirectory of ''web_tt2'' or ''mail_tt2'' with the language code.

Example :
<code>
  /web_tt2/home.tt2
  /web_tt2/de_DE/home.tt2
  /web_tt2/fr_FR/home.tt2
</code>

This mechanism also applies to ''comment.tt2'' files used by create list templates.

Web templates can also make use of the ''locale'' variable to make templates multi-lingual:

Example :
<code>
  [% IF locale == 'fr_FR' %]
  Personnalisation
  [% ELSE %]
  Customization
  [% END %]
</code>


======  Translating topics titles ======

Topics are defined in a ''topics.conf'' file. In this file, each entry can be given a title in different languages, see [[customizing#topics|Topics]].

======  Handling of charsets ======

Until version 5.3, Sympa web pages were using in each language's charset (iso-8859-1 for French, utf-8 for Japanese, ...) whereas every web page now uses utf-8. Sympa also expects every file to be UTF-8 including : configursation files, templates, authorization scenarios, PO files.

Note that the shared documents (see [[shared-documents|Shared documents]]) filenames are Q-encoded to make their storage encoding neutral. This encoding is transparent for end users.====== Sympa RSS channel ======

This service is provided by //WWSympa// (Sympa's web interface). Here is the root of //WWSympa//'s RSS channel: \\

(Default value: ''<nowiki>http://<host>/wws/rss</nowiki>'') \\  Example: ''<nowiki>https://my.server/wws/rss</nowiki>''

The access control of RSS queries proceed on the same way as //WWSympa// actions referred to. Sympa provides the following RSS features:

  * the latest created lists on a robot (''latest_lists'');
  * the most active lists on a robot(''active_lists'');
  * the latest messages of a list (''active_arc'');
  * the latest shared documents of a list (''latest_d_read'').


====== latest_lists ======

This provides the latest created lists.

Example: ''<nowiki>http://my.server/wws/rss/latest_lists?for=3&count=6</nowiki>''\\  This provides the 6 latest created lists for the last 3 days. \\

Example: ''<nowiki>http://my.server/wws/rss/latest_lists/computing?count=6</nowiki>''\\  This provides the 6 latest created lists with topic ''computing''. \\

Parameters:

  * ''for'': period of interest (expressed in days). This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.
  * ''count'': maximum number of expected records. This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.
  * topic: the topic is indicated in the path info (see example below with topic ''computing''). This parameter is optional.

====== active_lists ======

This provides the most active lists, based on the number of distributed messages (number of messages received).

Example: ''<nowiki>http://my.server/wws/rss/active_lists?for=3&count=6</nowiki>''\\  This provides the 6 most active lists for the last 3 days. \\

Example: ''<nowiki>http://my.server/wws/rss/active_lists/computing?count=6</nowiki>''\\  This provides the 6 most active lists with topic ''computing''. \\

Parameters:

  * ''for'': period of interest (expressed in days). This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.
  * ''count'': maximum number of expected records. This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.
  * topic : the topic is indicated in the path info (see example below with topic computing). This parameter is optional.


====== latest_arc ======

This provides the latest messages of a list.

Example: ''<nowiki>http://my.server/wws/rss/latest_arc/mylist?for=3&count=6</nowiki>''\\  This provides the 6 latest messages received on the //mylist// list for the last 3 days. \\

Parameters:

  * list: the list is indicated in the path info. This parameter is mandatory.
  * ''for'': period of interest (expressed in days). This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.
  * ''count'': maximum number of expected records. This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.


====== latest_d_read ======

This provides the latest updated and uploaded shared documents of a list.

Example: ''<nowiki>http://my.server/wws/rss/latest_d_read/mylist?for=3&count=6</nowiki>''\\  This provides the 6 latest documents uploaded or updated on the //mylist// list for the last 3 days. \\

Parameters:

  * list: the list is indicated in the path info. This parameter is mandatory.
  * ''for'': period of interest (expressed in days). This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.
  * ''count'': maximum number of expected records. This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.====== Sympa SOAP server ======

======  Introduction ======

[[http://www.w3.org/2002/ws/|SOAP]] is a protocol (generally over HTTP) that can be used to provide **web services**. Sympa SOAP server allows to access a Sympa service from within another program, written in any programming language and on any computer. SOAP encapsulates procedure calls, input parameters and resulting data in an XML data structure. The Sympa SOAP server's API is published in a **WSDL** document, retrieved through Sympa's web interface.

The SOAP server provides a limited set of high level functions, see [[#supported_functions]]. Other functions might be implemented in the future. One of the important implementation constraint is to provide services for proxy application with a correct authorization evaluation process where authentication may differ from classic web methods. The following cases can be used to access the service:

  * The client sends credentials and then requests a service providing a cookie with id ''sympa-user''.
  * The client authenticates the end user providing the ''sympa-user'' HTTP cookie. This can be used in order to share an authenticated session between Sympa and other applications running on the same server as //WWSympa//. The SOAP method used is ''getUserEmailByCookieRequest''.
  * The client provides user email and password and requests a service in a single SOAP access using the ''authenticateAndRun'' SOAP service.
  * The client is trusted by Sympa as a proxy application and is authorized to set some variables that will be used by Sympa during the authorization scenario evaluation. Trusted applications have own password there, and the variables they can set are listed in a configuration file named ''trusted_applications.conf''. See [[soap#trust_remote_applications|Trust remote applications]].

In any case, scenario authorization is used with the same rules as mail interface or usual web interface.

The SOAP server uses the [[http://www.soaplite.com/|SOAP::Lite]] Perl library. The server is running as a daemon (thanks to FastCGI), receiving the client SOAP requests via a web server (Apache for example).


====== Supported functions ======

Note that all functions accessible through the SOAP interface apply the appropriate access control rules, given the user's privileges.

The following functions are currently available through the Sympa SOAP server :
  * login : user email and passwords are checked against Sympa user DB, or another backend. 
  * casLogin : this function will verify CAS proxy tickets against the CAS server
  * authenticateAndRun : usefull for SOAP clients that can't set an HTTP cookie ; they can provide both the Sympa session cookie and the requested command in a single call
  * authenticateRemoteAppAndRun : equivalent of the previous command used in a trusted context (see [[#trust_remote_applications]])
  * lists : provides a list of available lists (authorization scenarios are applied)
  * complexLists : same as the previous feature, but provides a complex structure for each list
  * info : provides description informations about a given list
  * which : gets the list of subscription of a given user
  * complexWhich : same as previous command, but provides a complex structure for each list
  * amI : tells if a given user is member of a given list
  * review : lists the members of a given list
  * subscribe : subscribes the current user to a given list
  * signoff : current user is removed from a given list
  * add : used to add a given user to a given list (admin feature)
  * del : removes a given user from a given list (admin feature)
  * createList : creates a new mailing list (requires appropriate privileges)
  * closeList : closes a given mailing list (admin feature)

Note that when a list parameter is required for a functioin, you can either provide the list name or the list address. However the domain part of the address will be ignored.

Check [[#the_wsdl_service_description]] for detailed API informations.




======  Web server setup ======

<note> **Starting Sympa 5.4**, the sympa_soap_server is wrapped in small C script, sympa_soap_server-wrapper.fcgi, in order to avoid to use the -unsecure and no longer maintained - setuid perl mode.</note>

You **need to install FastCGI** for the SOAP server to work properly, because it will run as a daemon.

===== Until version 5.3 =====

Here is a sample piece of your Apache ''httpd.conf'' with a SOAP server configured:

<code>
  	FastCgiServer /home/sympa/bin/sympa_soap_server.fcgi -processes 1
  	ScriptAlias /sympasoap /home/sympa/bin/sympa_soap_server.fcgi

  	<Location /sympasoap>
     	  SetHandler fastcgi-script
  	</Location>
</code>

===== Version 5.4 and higher =====

Here is a sample piece of your Apache ''httpd.conf'' with a SOAP server configured and using the C wrapper:

<code>
  	FastCgiServer /home/sympa/bin/sympa_soap_server-wrapper.fcgi -processes 1
  	ScriptAlias /sympasoap /home/sympa/bin/sympa_soap_server-wrapper.fcgi

  	<Location /sympasoap>
     	  SetHandler fastcgi-script
  	</Location>
</code>

======  Sympa setup ======

The only mandatory parameter you need to set in the ''sympa.conf''/''robot.conf'' files is the ''soap_url'', that defines the URL of the SOAP service corresponding to the ScriptAlias you have previously set up in the Apache configuration.

This parameter is used to publish the SOAP service URL in the WSDL file (defining the API), but also for the SOAP server to deduce what Virtual Host is concerned by the current SOAP request (a single SOAP server will serve all Sympa virtual hosts).


====== Trust remote applications ======

The SOAP service ''authenticateRemoteAppAndRun'' is used in order to allow some remote applications such as a web portal to request the Sympa service as a proxy for the end user. In such cases, Sympa will not authenticate the end user itself, but instead it will trust a particular application to act as a proxy.

This configuration file ''trusted_applications.conf'' can be created in the robot ''etc/'' subdirectory or in the ''/home/sympa/etc'' directory depending on the scope you want for it (the source package include a sample of file ''trusted_applications.conf'' in the ''soap'' directory). This file is made of paragraphs separated by empty lines and stating with keyword ''trusted_application''. A sample ''trusted_applications.conf'' file is provided with Sympa sources. Each paragraph defines a remote trusted application with keyword/value pairs:

  * ''name'': the name of the application. Used with password for authentication; the ''remote_application_name'' variable is set for use in authorization scenarios;
  * ''md5password'': the MD5 digest of the application password. You can compute the digest as follows: ''sympa.pl -md5_digest=<the password>''.
  * ''proxy_for_variables'': a comma separated list of variables that can be set by the remote application and that will be used by the Sympa SOAP server when evaluating an authorization scenario. If you list ''USER_EMAIL'' in this parameter, then the remote application can act as a user. Any other variable such as ''remote_host'' can be listed.

You can test your SOAP service using the ''sympa_soap_client.pl'' sample script as follows:

<code>
  /home/sympa/bin/sympa_soap_client.pl --soap_url=http://my.server/sympasoap --service=createList --trusted_application=myTestApp --trusted_application_password=myTestAppPwd --proxy_vars=''USER_EMAIL=userProxy@my.server'' --service_parameters=listA,listSubject,discussion_list,description,myTopic

  /home/sympa/bin/sympa_soap_client.pl --soap_url=http://myserver/sympasoap --service=add --trusted_application=myTestApp --trusted_application_password=myTestAppPwd  --proxy_vars=''USER_EMAIL=userProxy@my.server'' --service_parameters=listA,someone@some;domain,name
</code>

Below is a sample Perl code that does a SOAP procedure call (for a SUBSCRIBE sympa command) using the trusted_application feature :

<code>
my $soap = new SOAP::Lite();
$soap->uri('urn:sympasoap');
$soap->proxy('http://myserver/sympasoap');

my $response = $soap->authenticateRemoteAppAndRun('myTestApp', 'myTestAppPwd', 'USER_EMAIL=userProxy@my.server', 'subscribe', ['myList@dom']);
</code>

[[dereckson@espace-win.org|S. Santoro]] wrote its own [[:contribs#php_soap_library|PHP Trusted Application library for Sympa]].

======  The WSDL service description ======

Here is what the WSDL file looks like before it is parsed by //WWSympa//:

<code>
  <?xml version=''1.0''?>
  <definitions name=''Sympa''
  	xmlns:xsd=''http://www.w3.org/2001/XMLSchema''
  	xmlns:soap=''http://schemas.xmlsoap.org/wsdl/soap/''
  	targetNamespace="[% conf.wwsympa_url %]/wsdl"
  	xmlns:tns="[% conf.wwsympa_url %]/wsdl"
  	xmlns=''http://schemas.xmlsoap.org/wsdl/''
  	xmlns:xsdl="[% conf.soap_url %]/wsdl">

  <!-- types part -->

  <types>
  <schema targetNamespace="[% conf.wwsympa_url %]/wsdl"
  	xmlns:SOAP-ENC=''http://schemas.xmlsoap.org/soap/encoding/''
  	xmlns:wsdl=''http://schemas.xmlsoap.org/wsdl/''
  	xmlns=''http://www.w3.org/2001/XMLSchema''>

  	<complexType name=''ArrayOfLists''>
  		<complexContent>
  			<restriction base=''SOAP-ENC:Array''>
  				<attribute ref=''SOAP-ENC:arrayType'' wsdl:arrayType=''tns:listType[]''/>
  			</restriction>
  		</complexContent>
  	</complexType>

  	<complexType name=''ArrayOfString''>
  		<complexContent>
  			<restriction base=''SOAP-ENC:Array''>
  				<attribute ref=''SOAP-ENC:arrayType'' wsdl:arrayType=''string[]''/>
  			</restriction>
  		</complexContent>
  	</complexType>

  	<complexType name=''listType''>
             <all>
  		<element name=''listAddress'' minOccurs=''1'' type=''string''/>
  		<element name=''homepage'' minOccurs=''0'' type=''string''/>
  		<element name=''isSubscriber'' minOccurs=''0'' type=''boolean''/>
  		<element name=''isOwner'' minOccurs=''0'' type=''boolean''/>
  		<element name=''isEditor'' minOccurs=''0'' type=''boolean''/>
  		<element name=''subject'' minOccurs=''0'' type=''string''/>
             </all>
  	</complexType>
  </schema>
  </types>

  <!-- message part -->

  <message name=''infoRequest''>
          <part name=''listName'' type=''xsd:string''/>
  </message>

  <message name=''infoResponse''>
  	<part name=''return'' type=''tns:listType''/>
  </message>

  <message name=''complexWhichRequest''>
  </message>

  <message name=''complexWhichResponse''>
  	<part name=''return'' type=''tns:ArrayOfLists''/>
  </message>

  <message name=''whichRequest''>
  </message>

  <message name=''whichResponse''>
  	<part name=''return'' type=''tns:ArrayOfString''/>
  </message>

  <message name=''amIRequest''>
  	<part name=''list'' type=''xsd:string''/>
  	<part name=''function'' type=''xsd:string''/>
  	<part name=''user'' type=''xsd:string''/>
  </message>

  <message name=''amIResponse''>
  	<part name=''return'' type=''xsd:boolean''/>
  </message>

  <message name=''reviewRequest''>
  	<part name=''list'' type=''xsd:string''/>
  </message>

  <message name=''reviewResponse''>
  	<part name=''return'' type=''tns:ArrayOfString''/>
  </message>

  <message name=''signoffRequest''>
  	<part name=''list'' type=''xsd:string''/>
  	<part name=''email'' type=''xsd:string'' xsd:minOccurs=''0''/>
  </message>

  <message name=''signoffResponse''>
  	<part name=''return'' type=''xsd:boolean''/>
  </message>

  <message name=''subscribeRequest''>
  	<part name=''list'' type=''xsd:string''/>
  	<part name=''gecos'' type=''xsd:string'' xsd:minOccurs=''0''/>
  </message>

  <message name=''addRequest''>
  	<part name=''list'' type=''xsd:string''/>
  	<part name=''email'' type=''xsd:string''/>
  	<part name=''gecos'' type=''xsd:string''  xsd:minOccurs=''0''/>
  	<part name=''quiet'' type=''xsd:boolean''  xsd:minOccurs=''0''/>
  </message>

  <message name=''addResponse''>
  	<part name=''return'' type=''xsd:boolean''/>
  </message>

  <message name=''delRequest''>
  	<part name=''list'' type=''xsd:string''/>
  	<part name=''email'' type=''xsd:string''/>
  	<part name=''quiet'' type=''xsd:boolean''  xsd:minOccurs=''0''/>
  </message>

  <message name=''delResponse''>
  	<part name=''return'' type=''xsd:boolean''/>
  </message>

  <message name=''createListRequest''>
  	<part name=''list'' type=''xsd:string''/>
  	<part name=''subject'' type=''xsd:string''/>
  	<part name=''template'' type=''xsd:string''/>
  	<part name=''description'' type=''xsd:string''/>
  	<part name=''topics'' type=''xsd:string''/>
  </message>

  <message name=''createListResponse''>
  	<part name=''return'' type=''xsd:boolean''/>
  </message>

  <message name=''closeListRequest''>
  	<part name=''list'' type=''xsd:string''/>
  </message>

  <message name=''closeListResponse''>
  	<part name=''return'' type=''xsd:boolean''/>
  </message>

  <message name=''subscribeResponse''>
  	<part name=''return'' type=''xsd:boolean''/>
  </message>

  <message name=''loginRequest''>
  	<part name=''email'' type=''xsd:string''/>
  	<part name=''password'' type=''xsd:string''/>
  </message>

  <message name=''loginResponse''>
  	<part name=''return'' type=''xsd:string''/>
  </message>

  <message name=''getUserEmailByCookieRequest''>
  	<part name=''cookie'' type=''xsd:string''/>
  </message>

  <message name=''getUserEmailByCookieResponse''>
  	<part name=''return'' type=''xsd:string''/>
  </message>

  <message name=''authenticateAndRunRequest''>
  	<part name=''email'' type=''xsd:string''/>
  	<part name=''cookie'' type=''xsd:string''/>
  	<part name=''service'' type=''xsd:string''/>
  	<part name=''parameters'' type=''tns:ArrayOfString'' xsd:minOccurs=''0''/>
  </message>

  <message name=''authenticateAndRunResponse''>
  	<part name=''return'' type=''tns:ArrayOfString'' xsd:minOccurs=''0''/>
  </message>

  <message name=''authenticateRemoteAppAndRunRequest''>
  	<part name=''appname'' type=''xsd:string''/>
  	<part name=''apppassword'' type=''xsd:string''/>
  	<part name=''vars'' type=''xsd:string''/>
  	<part name=''service'' type=''xsd:string''/>
  	<part name=''parameters'' type=''tns:ArrayOfString'' xsd:minOccurs=''0''/>
  </message>

  <message name=''authenticateRemoteAppAndRunResponse''>
  	<part name=''return'' type=''tns:ArrayOfString'' xsd:minOccurs=''0''/>
  </message>

  <message name=''casLoginRequest''>
  	<part name=''proxyTicket'' type=''xsd:string''/>
  </message>

  <message name=''casLoginResponse''>
  	<part name=''return'' type=''xsd:string''/>
  </message>

  <message name=''listsRequest''>
  	<part name=''topic'' type=''xsd:string'' xsd:minOccurs=''0''/>
  	<part name=''subtopic'' type=''xsd:string'' xsd:minOccurs=''0''/>
  </message>

  <message name=''listsResponse''>
  	<part name=''listInfo'' type=''xsd:string''/>
  </message>

  <message name=''complexListsRequest''>
  </message>

  <message name=''complexListsResponse''>
  	<part name=''return'' type=''tns:ArrayOfLists''/>
  </message>

  <message name=''checkCookieRequest''>
  </message>

  <message name=''checkCookieResponse''>
  	<part name=''email'' type=''xsd:string''/>
  </message>

  <!-- portType part -->

  <portType name=''SympaPort''>
  	<operation name=''info''>
  		<input message=''tns:infoRequest'' />
  		<output message=''tns:infoResponse'' />
  	</operation>
  	<operation name=''complexWhich''>
  		<input message=''tns:complexWhichRequest'' />
  		<output message=''tns:complexWhichResponse'' />
  	</operation>
  	<operation name=''which''>
  		<input message=''tns:whichRequest'' />
  		<output message=''tns:whichResponse'' />
  	</operation>
  	<operation name=''amI''>
  		<input message=''tns:amIRequest'' />
  		<output message=''tns:amIResponse'' />
  	</operation>
  	<operation name=''add''>
  		<input message=''tns:addRequest'' />
  		<output message=''tns:addResponse'' />
  	</operation>
  	<operation name=''del''>
  		<input message=''tns:delRequest'' />
  		<output message=''tns:delResponse'' />
  	</operation>
  	<operation name=''createList''>
  		<input message=''tns:createListRequest'' />
  		<output message=''tns:createListResponse'' />
  	</operation>
  	<operation name=''closeList''>
  		<input message=''tns:closeListRequest'' />
  		<output message=''tns:closeListResponse'' />
  	</operation>
  	<operation name=''review''>
  		<input message=''tns:reviewRequest'' />
  		<output message=''tns:reviewResponse'' />
  	</operation>
  	<operation name=''subscribe''>
  		<input message=''tns:subscribeRequest'' />
  		<output message=''tns:subscribeResponse'' />
  	</operation>
  	<operation name=''signoff''>
  		<input message=''tns:signoffRequest'' />
  		<output message=''tns:signoffResponse'' />
  	</operation>
  	<operation name=''login''>
  		<input message=''tns:loginRequest'' />
  		<output message=''tns:loginResponse'' />
  	</operation>
  	<operation name=''casLogin''>
  		<input message=''tns:casLoginRequest'' />
  		<output message=''tns:casLoginResponse'' />
  	</operation>
  	<operation name=''getUserEmailByCookie''>
  		<input message=''tns:getUserEmailByCookieRequest'' />
  		<output message=''tns:getUserEmailByCookieResponse'' />
  	</operation>
  	<operation name=''authenticateAndRun''>
  		<input message=''tns:authenticateAndRunRequest'' />
  		<output message=''tns:authenticateAndRunResponse'' />
  	</operation>
  	<operation name=''authenticateRemoteAppAndRun''>
  		<input message=''tns:authenticateRemoteAppAndRunRequest'' />
  		<output message=''tns:authenticateRemoteAppAndRunResponse'' />
  	</operation>
  	<operation name=''lists''>
  		<input message=''tns:listsRequest'' />
  		<output message=''tns:listsResponse'' />
  	</operation>
  	<operation name=''complexLists''>
  		<input message=''tns:complexListsRequest'' />
  		<output message=''tns:complexListsResponse'' />
  	</operation>
  	<operation name=''checkCookie''>
  		<input message=''tns:checkCookieRequest'' />
  		<output message=''tns:checkCookieResponse'' />
  	</operation>
  </portType>

  <!-- Binding part -->

  <binding name=''SOAP'' type=''tns:SympaPort''>
  <soap:binding style=''rpc'' transport=''http://schemas.xmlsoap.org/soap/http''/>
  	<operation name=''info''>
  		<soap:operation soapAction=''urn:sympasoap#info''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  	<operation name=''complexWhich''>
  		<soap:operation soapAction=''urn:sympasoap#complexWhich''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  	<operation name=''which''>
  		<soap:operation soapAction=''urn:sympasoap#which''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  	<operation name=''amI''>
  		<soap:operation soapAction=''urn:sympasoap#amI''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  	<operation name=''createList''>
  		<soap:operation soapAction=''urn:sympasoap#createList''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  	<operation name=''review''>
  		<soap:operation soapAction=''urn:sympasoap#review''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  	<operation name=''subscribe''>
  		<soap:operation soapAction=''urn:sympasoap#subscribe''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  	<operation name=''signoff''>
  		<soap:operation soapAction=''urn:sympasoap#signoff''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  	<operation name=''login''>
  		<soap:operation soapAction=''urn:sympasoap#login''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  	<operation name=''casLogin''>
  		<soap:operation soapAction=''urn:sympasoap#casLogin''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  	<operation name=''getUserEmailByCookie''>
  		<soap:operation soapAction=''urn:sympasoap#getUserEmailByCookie''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  	<operation name=''authenticateAndRun''>
  		<soap:operation soapAction=''urn:sympasoap#authenticateAndRun''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  	<operation name=''authenticateRemoteAppAndRun''>
  		<soap:operation soapAction=''urn:sympasoap#authenticateRemoteAppAndRun''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  	<operation name=''lists''>
  		<soap:operation soapAction=''urn:sympasoap#lists''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  	<operation name=''complexLists''>
  		<soap:operation soapAction=''urn:sympasoap#complexLists''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  	<operation name=''checkCookie''>
  		<soap:operation soapAction=''urn:sympasoap#checkCookie''/>
  			<input>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</input>
  			<output>
  				<soap:body use=''encoded''
  					namespace=''urn:sympasoap''
  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>
  			</output>
  	</operation>
  </binding>

  <!-- service part -->

  <service name=''SympaSOAP''>
  	<port name=''SympaPort'' binding=''tns:SOAP''>
  		<soap:address location="[% conf.soap_url %]"/>
  	</port>
  </service>

  </definitions>
</code>


======  Client-side programming ======

Sympa is distributed with 2 sample clients written in Perl and in PHP. The Sympa SOAP server has also been successfully tested with a UPortal Channel as a Java client (using Axis). The sample PHP SOAP client has been installed on our demo server: [[http://demo.sympa.org/sampleClient.php]].

Depending on your programming language and the SOAP library you are using, you will either directly contact the SOAP service (as with the Perl <nowiki>SOAP::Lite library</nowiki>), or first load the WSDL description of the service (as with PHP nusoap or Java Axis). Axis is able to create a stub from the WSDL document.

The WSDL document describing the service should be fetch through //WWSympa//'s dedicated URL: <nowiki>http://your.server/sympa/wsdl</nowiki>.

Note: the ''login()'' function maintains a login session using HTTP cookies. If you are not able to maintain this session by analyzing and sending appropriate cookies under SOAP, then you should use the ''authenticateAndRun()'' function that does not require cookies to authenticate.


=====  Writing a Java client with Axis =====

First, download jakarta-axis ([[http://ws.apache.org/axis]]).

You must add the libraries provided with jakarta axis (v >1.1) to you CLASSPATH. These libraries are:

  * axis.jar;
  * saaj.jar;
  * commons-discovery.jar;
  * commons-logging.jar;
  * xercesImpl.jar;
  * jaxrpc.jar;
  * xml-apis.jar;
  * jaas.jar;
  * wsdl4j.jar;
  * soap.jar.

Next, you have to generate client Java class files from the sympa WSDL URL. Use the following command: <code>java org.apache.axis.wsdl.WSDL2Java -av WSDL_URL</code>

For example: <code>java org.apache.axis.wsdl.WSDL2Java -av  http://demo.sympa.org/sympa/wsdl</code>

Exemple of screen output during generation of Java files:

<code>
  Parsing XML file:  http://demo.sympa.org/sympa/wsdl
  Generating org/sympa/demo/sympa/msdl/ListType.java
  Generating org/sympa/demo/sympa/msdl/SympaPort.java
  Generating org/sympa/demo/sympa/msdl/SOAPStub.java
  Generating org/sympa/demo/sympa/msdl/SympaSOAP.java
  Generating org/sympa/demo/sympa/msdl/SympaSOAPLocator.java
</code>

If you need more information or more generated classes (to have the server-side classes or junit testcase classes for example), you can get a list of switches: <code>java org.apache.axis.wsdl.WSDL2Java -h</code>

The reference page is: [[http://ws.apache.org/axis/java/reference.html]].

Take care of Test classes generated by axis, there are not useable as are. You have to stay connected between each test. To use junit testcases, before each SOAP operation tested, you must call the authenticated connexion to Sympa instance.

Here is a simple Java code that invokes the generated stub to perform a ''casLogin()'' and a ''which()'' on the remote Sympa SOAP server:

<code>
  SympaSOAP loc = new SympaSOAPLocator();
  ((SympaSOAPLocator)loc).setMaintainSession(true);
  SympaPort tmp = loc.getSympaPort();
  String _value = tmp.casLogin(_ticket);
  String _cookie = tmp.checkCookie();
  String[] _abonnements = tmp.which();
</code>====== Authentication ======

Sympa needs to authenticate users (subscribers, owners, moderators, listmasters) on both its mail and web interface, and then apply appropriate privileges (authorization process) to subsequent requested actions. Sympa is able to cope with multiple authentication means on the client side, and when using user+password, it can validate these credentials against LDAP authentication backends.

When contacted on the mail interface, Sympa has 3 authentication levels. Lower level is to trust the ''From:'' SMTP header field. A higher level of authentication will require that the user confirms his/her message. The strongest supported authentication method is S/MIME (note that Sympa also deals with S/MIME encrypted messages).

On the Sympa web interface (//WWSympa//) the user can authenticate in 4 different ways (if appropriate setup has been done on the Sympa server). Default authentication is performed through the user's email address and a password managed by Sympa itself. If an LDAP authentication backend (or multiple) has been defined, then the user can authenticate with his/her LDAP uid and password. Sympa is also able to delegate the authentication job to a web Single SignOn system; currently [[http://www.yale.edu/tp/auth/|CAS]] (the Yale University system) or a generic SSO setup, adapted to SSO products providing an Apache module. When contacted via HTTPS, Sympa can make use of X509 client certificates to authenticate users.

The authorization process in Sympa (authorization scenarios) refers to authentication methods. The same authorization scenarios are used for both mail and web accesss; therefore some authentication methods are considered to be equivalent: mail confirmation (on the mail interface) is equivalent to password authentication (on the web interface); S/MIME authentication is equivalent to HTTPS with client certificate authentication. Each rule in authorization scenarios requires an authentication method (''smtp'', ''md5'' or ''smime''); if the required authentication method was not used, a higher authentication mode can be requested.




======  S/MIME and HTTPS authentication ======

Chapter [[x509#use_of_smime_signatures_by_sympa_itself|Use of S/MIME signature by Sympa itself]] deals with Sympa and S/MIME signature. Sympa uses the ''OpenSSL'' library to work on S/MIME messages, you need to configure some related Sympa parameters: [[x509#ssympa_configuration|S/X509 Sympa configuration]].

Sympa HTTPS authentication is based on Apache+mod_SSL that provide the required authentication information through CGI environment variables. You will need to edit the Apache configuration to allow HTTPS access and require X509 client certificate. Here is a sample Apache configuration:

<code>
  SSLEngine on
  SSLVerifyClient optional
  SSLVerifyDepth  10
  ...
  <Location /sympa>
     SSLOptions +StdEnvVars
     SetHandler fastcgi-script
  </Location>
</code>

If you are using the SubjAltName, then you additionaly need to export the certificate data because of a ''mod_ssl'' bug. You will also need to install the textindex Crypt-OpenSSL-X509 CPAN module. Add this option to the Apache configuration file: <code>SSLOptions +ExportCertData</code>


====== Authentication with email address, uid or alternate email address ======

Sympa stores the data relative to the subscribers in a DataBase. Among these data: password, email address exploited during the web authentication. The module of LDAP authentication allows to use Sympa in an intranet without duplicating user passwords.

This way users can indifferently authenticate with their ''ldap_uid'', their ''alternate_email'' or their canonic email stored in the LDAP directory.

Sympa gets the canonic email in the LDAP directory with the ''ldap_uid'' or the ''alternate_email''. Sympa will first attempt an anonymous bind to the directory to get the user's DN, then Sympa will bind with the DN and the user's ''ldap_password'' in order to perform an efficient authentication. This last bind will work only if the right ''ldap_password'' is provided. Indeed the value returned by the bind(DN,ldap_password) is tested.

Example: a person is described by

                   Dn:cn=Fabrice Rafart,
                   ou=Siege ,
                   o=MyCompany,
                   c=FR Objectclass:
                   person Cn: Fabrice Rafart
                   Title: Network Responsible
                   O: Siege
                   Or: Data processing
                   Telephonenumber: 01-00-00-00-00
                   Facsimiletelephonenumber:01-00-00-00-00
                   L:Paris
                   Country: France
  		       uid: frafart
   		       mail: Fabrice.Rafart@MyCompany.fr
                   alternate_email: frafart@MyCompany.fr
                   alternate:rafart@MyCompany.fr

So Fabrice Rafart can be authenticated with: frafart, Fabrice.Rafart@MyCompany.fr, frafart@MyCompany.fr, Rafart@MyCompany.fr. After this operation, the address in the FROM field will be the Canonic email, in this case Fabrice.Rafart@MyCompany.fr. That means that Sympa will get this email and use it during all the session until you clearly ask Sympa to change your email address via the two pages: which and pref.




====== Generic SSO authentication ======

The authentication method has first been introduced to allow interraction with [[http://shibboleth.internet2.edu/|Shibboleth]], Internet2's inter-institutional authentication system. But it should be usable with any SSO system that provides an Apache authentication module being able to protect a specified URL on the site (not the whole site). Here is a sample ''httpd.conf'' that shib-protects the associated Sympa URL:

<code>
  ...
  <Location /sympa/sso_login/inqueue>
    AuthType shibboleth
    require mail ~ @
  </Location>
  ...
</code>

Sympa will get user attributes via environment variables. In the most simple case, the SSO will provide the user email address. If not, Sympa can be configured to check an email address provided by the user, or to look for the user email address in a LDAP directory (the search filter will make use of user information inherited from the SSO Apache module).

To plug a new SSO server in your Sympa server, you should add a ''generic_sso'' paragraph (describing the SSO service) in your ''auth.conf'' configuration file (see [[authentication#generic_sso_paragraph|generic_sso paragraph]]). Once this paragraph has been added, the SSO service name will be automatically added to the web login menu.

Apart from the user email address, the SSO can provide other user attributes that Sympa will store in the ''user_table'' DB table (for persistancy), and make available in the [user_attributes] structure that you can use within authorization scenarios (see [[authorization-scenarios#rules_specifications|Rules specifications]]) or in web templates via the [% user.attributes %] structure.


====== CAS-based authentication ======

CAS is the Yale University SSO software. Sympa can use the CAS authentication service.

Listmasters should define at least one or more CAS servers (**cas** paragraph) in ''auth.conf''. If the ''non_blocking_redirection'' parameter was set for a CAS server, then Sympa will try a transparent login on this server when the user accesses the web interface. If a CAS server redirects the user to Sympa with a valid ticket, Sympa receives a user ID from the CAS server. Then, it connects to the related LDAP directory to get the user email address. If no CAS server returns a valid user ID, Sympa will let the user either select a CAS server to login or perform a Sympa login.


====== auth.conf ======

The ''/home/sympa/etc/auth.conf'' configuration file contains numerous parameters which are read on start-up of Sympa. If you change this file, do not forget that you will need to restart ''wwsympa.fcgi'' afterwards.

The ''/home/sympa/etc/auth.conf'' is organized in paragraphs. Each paragraph describes an authentication service with all parameters required to perform an authentication using this service. Sympa's current version can perform authentication through LDAP directories, using an external Single Sign-On Service (like CAS or Shibboleth), or using the internal ''user_table'' table.

The login page contains 2 forms: the login form and the SSO. When users hit the login form, each ldap or ''user_table'' authentication paragraph is applied unless email adress input from form matches the ''negative_regexp'' or do not match ''regexp''. ''negative_regexp'' and ''regexp'' can be defined for each ldap or ''user_table'' authentication service so that administrators can block some authentication methods for a class of users.

The second form in the login page contains the list of CAS servers so that users can choose explicitely their CAS service.

Each paragraph starts with one of the keyword ''cas'', ''ldap'' or ''user_table''.

The ''/home/sympa/etc/auth.conf'' file contains directives in the following format:

<code>
paragraphs
keyword value

paragraphs
keyword value
</code>

Comments start with the ''#'' character at the beginning of a line.

Empty lines are also considered as comments and are ignored at the beginning. After the first paragraph, they are considered as paragraph separators. There should only be one directive per line, but their order in the paragraph is of no importance.

Example:
<code>
  #Configuration file auth.conf for the LDAP authentification
  #Description of parameters for each directory
  
  cas
  	base_url			https://sso-cas.renater.fr
  	non_blocking_redirection        on
  	auth_service_name		cas-cru
  	ldap_host			ldap.renater.fr:389
          ldap_get_email_by_uid_filter    (uid=[uid])
  	ldap_timeout			7
  	ldap_suffix			dc=cru,dc=fr
  	ldap_scope			sub
  	ldap_email_attribute		mail
  
  ## The URL corresponding to the service_id should be protected by the SSO (Shibboleth in the exampl)
  ## The URL would look like http://yourhost.yourdomain/sympa/sso_login/inqueue in the following example
  generic_sso
          service_name       InQueue Federation
          service_id         inqueue
          http_header_prefix HTTP_SHIB
          email_http_header  HTTP_SHIB_EMAIL_ADDRESS
  
  ## The email address is not provided by the user home institution
  generic_sso
          service_name               Shibboleth Federation
          service_id                 myfederation
          http_header_prefix         HTTP_SHIB
          netid_http_header          HTTP_SHIB_EMAIL_ADDRESS
  	internal_email_by_netid    1
  	force_email_verify         1
  
  ldap
  	regexp				univ-rennes1\.fr
  	host				ldap.univ-rennes1.fr:389
  	timeout				30
  	suffix				dc=univ-rennes1,dc=fr
  	get_dn_by_uid_filter		(uid=[sender])
  	get_dn_by_email_filter		(|(mail=[sender])(mailalternateaddress=[sender]))
  	email_attribute			mail
  	alternative_email_attribute	mailalternateaddress,ur1mail
  	scope				sub
  	use_ssl                         1
  	ssl_version                     sslv3
  	ssl_ciphers                     MEDIUM:HIGH
  
  ldap  
  	host				ldap.univ-nancy2.fr:392,ldap1.univ-nancy2.fr:392,ldap2.univ-nancy2.fr:392
  	timeout				20
  	bind_dn                         cn=sympa,ou=people,dc=cru,dc=fr
  	bind_password                   sympaPASSWD
  	suffix				dc=univ-nancy2,dc=fr
  	get_dn_by_uid_filter		(uid=[sender])
  	get_dn_by_email_filter			(|(mail=[sender])(n2atraliasmail=[sender]))
  	alternative_email_attribute	n2atrmaildrop
  	email_attribute			mail
  	scope				sub
          authentication_info_url         http://sso.univ-nancy2.fr/
  
  user_table
  	negative_regexp 		((univ-rennes1)|(univ-nancy2))\.fr
</code>


=====  user_table paragraph =====

The ''user_table'' paragraph is related to Sympa internal authentication by email and password. It is the simplest one. The only parameters are ''regexp'' or ''negative_regexp'' which are Perl regular expressions applied on an email address provided, to select or block this authentication method for a subset of email addresses.





=====  ldap paragraph =====

  * ''regexp'' and ''negative_regexp'' \\ Same as in the ''user_table'' paragraph: if an email address is provided (this does not apply to an uid), then the regular expression will be applied to find out if the LDAP directory can be used to authenticate a subset of users.
  * ''host'' \\ This keyword is **mandatory**. It is the domain name used in order to bind to the directory and then to extract information. You must mention the port number after the server name. Server replication is supported by listing several servers separated by commas. \\ Example:
<code>
    	host ldap.univ-rennes1.fr:389
    	host ldap0.university.com:389,ldap1.university.com:389,ldap2.university.com:389
</code>
  * ''timeout'' \\ It corresponds to the timelimit in the Search fonction. A timelimit that restricts the maximum time (in seconds) allowed for a search. A value of 0 (the default) means that no timelimit will be requested.
  * ''suffix'' \\ The root of the DIT (Directory Information Tree). The DN that is the base object entry relative to which the search is to be performed. \\ Example: ''dc=university,dc=fr''
  * ''bind_dn'' \\ If anonymous bind is not allowed on the LDAP server, a DN and password can be used.
  * ''bind_password'' \\ This password is used, combined with the ''bind_dn'' above.
  * ''get_dn_by_uid_filter'' \\ Defines the search filter corresponding to the ''ldap_uid''. (RFC 2254 compliant). If you want to apply the filter on the user, use the variable ' [sender] '. It will work with every type of authentication (uid, ''alternate_email'', ...). \\ Example:
<code>
 	(Login = [sender])
    	(|(ID = [sender])(UID = [sender]))
</code>
  * ''get_dn_by_email_filter'' \\ Defines the search filter corresponding to the email addresses (canonic and alternative - this is RFC 2254 compliant). If you want to apply the filter on the user, use the variable ' [sender] '. It will work with every type of authentication (''uid'', ''alternate_email''..). \\ Example: a person is described by
<code>
  Dn:cn=Fabrice Rafart,
  ou=Siege ,
  o=MaSociete ,
  c=FR Objectclass:
  person Cn: Fabrice Rafart
  Title: Network Responsible
  O: Siege
  Or: Data processing
  Telephonenumber: 01-00-00-00-00
  Facsimiletelephonenumber:01-00-00-00-00
  L:Paris
  Country: France
  uid: frafart
  mail: Fabrice.Rafart@MaSociete.fr
  alternate_email: frafart@MaSociete.fr
  alternate:rafart@MaSociete.fr
</code> \\ The filters can be:
<code>
  (mail = [sender]) (| (mail = [sender])(alternate_email = [sender]) )
  (| (mail = [sender])(alternate_email = [sender])(alternate  = [sender]) )
</code>
  * ''email_attribute'' \\ The name of the attribute for the canonic email in your directory: for instance ''mail'', ''canonic_email'', ''canonic_address'', ... In the previous example, the canonic email is ''mail''.
  * ''alternative_email_attribute'' \\ The name of the attribute for the alternate email in your directory: for instance ''alternate_email'', ''mailalternateaddress'', ... You make a list of these attributes separated by commas.

With this list, Sympa creates a cookie which contains various information: whether the user is authenticated via LDAP or not, his alternate email. Storing the alternate email is interesting when you want to canonify your preferences and subscriptions, that is to say you want to use a unique address in ''user_table'' and ''subscriber_table'', which is the canonic email.
  * ''scope''  (Default value: ''sub'') \\ By default, the search is performed on the whole tree below the specified base object. This may be changed by specifying a scope:
    * ''base'': search only the base object,
    * ''one'': search the entries immediately below the base object,
    * ''sub'': search the whole tree below the base object. This is the default.
  * ''authentication_info_url'' \\ Defines the URL of a document describing LDAP password management. When hitting Sympa's //Send me a password// button, LDAP users will be redirected to this URL.
  * ''use_ssl'' \\ If set to ''1'', connection to the LDAP server will use SSL (LDAPS).
  * ''ssl_version'' \\ This defines the version of the SSL/TLS protocol to use. Defaults of Net::LDAPS to ''sslv2/3'', other possible values are ''sslv2'', ''sslv3'', and ''tlsv1''.
  * ssl_ciphers
Specify which subset of cipher suites are permissible for this connection, using the standard OpenSSL string format. The default value of Net::LDAPS for ciphers is ''ALL'', which permits all ciphers, even those that do not encrypt!

===== generic_sso paragraph =====

  * ''service_name'' \\  This is the SSO service name that will be offered to the user in the login banner menu.
  * ''service_id'' \\  This service ID is used as a parameter by Sympa to refer to the SSO service (instead of the service name). \\ A corresponding URL on the local web server should be protected by the SSO system; this URL would look like ''<nowiki>http://yourhost.yourdomain/sympa/sso_login/inqueue</nowiki>'' if the ''service_id'' is ''inqueue''.
  * ''http_header_prefix'' \\  Sympa gets user attributes from environment variables coming from the web server. These variables are then stored in the ''user_table'' DB table for later use in authorization scenarios (in structure). Only environment variables starting with the defined prefix will be kept.
  * ''email_http_header'' \\  This parameter defines the environment variable that will contain the authenticated user's email address.
  * ''logout_url'' \\ This optional parameter allows to specify the SSO logout URL. If defined, Sympa will redirect the user to this URL after the Sympa logout has been performed.


The following parameters define how Sympa can check the user email address, either provided by the SSO or by the user himself:

  * ''internal_email_by_netid'' \\  If set to ''1'', this parameter makes Sympa use its ''netidmap'' table to associate NetIDs to user email addresses.
  * ''netid_http_header'' \\  This parameter defines the environment variable that will contain the user's identifier. This netid will then be associated with an email address provided by the user.
  * ''force_email_verify'' \\  If set to ''1'', this parameter makes Sympa check the user's email address. If the email address was not provided by the authentication module, then the user is requested to provide a valid email address.

The following parameters define how Sympa can retrieve the user email address; **these are useful only in case the ''email_http_header'' entry was not defined:**

  * ''ldap_host'' \\  The LDAP host Sympa will connect to fetch user email. The ''ldap_host'' include the port number and it may be a comma separated list of redondant hosts.
  * ''ldap_bind_dn'' \\  The DN used to bind to this server. Anonymous bind is used if this parameter is not defined.
  * ''ldap_bind_password'' \\  The password used unless anonymous bind is used.
  * ''ldap_suffix'' \\  The LDAP suffix used when searching user email.
  * ''ldap_scope'' \\  The scope used when searching user email. Possible values are ''sub'', ''base'' and ''one''.
  * ''ldap_get_email_by_uid_filter'' \\ The filter used to perform the email search. It can refer to any environment variables inherited from the SSO module, as shown below. Example: <code>ldap_get_email_by_uid_filter    (mail=[SSL_CLIENT_S_DN_Email])</code>
  * ''ldap_email_attribute'' \\ The attribute name to be used as user canonical email. In the current version of Sympa, only the first value returned by the LDAP server is used.
  * ''ldap_timeout'' \\  The time out for the search.
  * ''ldap_use_ssl'' \\ If set to ''1'', connection to the LDAP server will use SSL (LDAPS).
  * ''ldap_ssl_version'' \\ This defines the version of the SSL/TLS protocol to use. Defaults of Net::LDAPS to ''sslv2/3'', other possible values are ''sslv2'', ''sslv3'', and ''tlsv1''.
  * ''ldap_ssl_ciphers'' \\ Specifies which subset of cipher suites are permissible for this connection, using the OpenSSL string format. The default value of Net::LDAPS for ciphers is ''ALL'', which permits all ciphers, even those that do not encrypt!




=====  cas paragraph =====

Note that Sympa will act as a CAS client to validate CAS tickets. During this exchange, Sympa will check the CAS server x.509 certificate. Therefore you should ensure that the certificate autority of the CAS server is known by Sympa ; this should be configured through the [[manual:conf-parameters:part3#cafile|cafile]] or [[manual:conf-parameters:part3#capath|capath]] sympa.conf configuration parameters.

  * ''auth_service_name'' \\  The friendly user service name as shown by Sympa in the login page.
  * ''host'' (OBSOLETE) \\  This parameter has been replaced by **base_url** parameter
  * ''base_url'' \\ The base URL of the CAS server.
  * ''non_blocking_redirection'' \\ This parameter only concerns the first access to Sympa services by a user, it activates or not the non blocking redirection to the related CAS server to check automatically if the user as been previously authenticated with this CAS server. Possible values are ''on'' and ''off'', default is ''on''. The redirection to CAS is used with the CGI parameter ''gateway=1'' that specifies to CAS server to always redirect the user to the original URL, but just check if the user is logged. If active, the SSO service is effective and transparent, but in case the CAS server is out of order, the access to Sympa services is impossible.
  * ''login_uri'' (OBSOLETE) \\  This parameter has been replaced by the ''login_path'' parameter.
  * ''login_path'' (OPTIONAL) \\  The login service path.
  * ''check_uri'' (OBSOLETE) \\  This parameter has been replaced by the ''service_validate_path'' parameter.
  * ''service_validate_path'' (OPTIONAL) \\  The ticket validation service path.
  * ''logout_uri'' (OBSOLETE) \\  This parameter has been replaced by the ''logout_path'' parameter.
  * ''logout_path'' (OPTIONAL) \\  The logout service path.
  * ''proxy_path'' (OPTIONAL) \\  The proxy service path, only used by the Sympa SOAP server.
  * ''proxy_validate_path'' (OPTIONAL) \\  The proxy validate service path, only used by the Sympa SOAP server.
  * ''ldap_host'' \\  The LDAP host Sympa will connect to fetch user email when user uid is return by CAS service. The ''ldap_host'' includes the port number and it may be a comma separated list of redondant hosts.
  * ''ldap_bind_dn'' \\  The DN used to bind to this server. Anonymous bind is used if this parameter is not defined.
  * ''ldap_bind_password'' \\  The password used unless anonymous bind is used.
  * ''ldap_suffix'' \\  The LDAP suffix used when searching user email.
  * ''ldap_scope'' \\  The scope used when searching user email. Possible values are ''sub'', ''base'' and ''one''.
  * ''ldap_get_email_by_uid_filter'' \\  The filter used to perform the email search.
  * ''ldap_email_attribute'' \\  The attribute name to be used as user canonical email. In the current version of Sympa, only the first value returned by the LDAP server is used.
  * ''ldap_timeout'' \\  The time out for the search.
  * ''ldap_use_ssl'' \\ If set to ''1'', connection to the LDAP server will use SSL (LDAPS).
  * ''ldap_ssl_version'' \\ This defines the version of the SSL/TLS protocol to use. Defaults of Net::LDAPS to ''sslv2/3'', other possible values are ''sslv2'', ''sslv3'', and ''tlsv1''.
  * ''ldap_ssl_ciphers'' \\ Specifies which subset of cipher suites are permissible for this connection, using the OpenSSL string format. The default value of Net::LDAPS for ciphers is ''ALL'', which permits all ciphers, even those that do not encrypt!



====== Sharing WWSympa's authentication with other applications ======

If you are not using a web Single Sign On system, you might want to make other web applications collaborate with Sympa and share the same authentication system. Sympa uses HTTP cookies to carry users' authentication information from page to page. This cookie contains no information about privileges. To make your application work with Sympa, you have two possibilities:

  * Delegating authentication operations to //WWSympa//\\  If you want to avoid spending a lot of time programming a CGI to do Login, Logout and Remindpassword, you can copy //WWSympa//'s login page to your application, and then make use of the cookie information within your application. The cookie format is: <code>sympauser=<user_email>:<checksum></code>where ''<user_email>'' is the user's complete e-mail address, and ''<checksum>'' represents the 8 last bytes of the MD5 checksum of the ''<user_email>''+Sympa ''cookie'' configuration parameter. Your application needs to know what the ''cookie'' parameter is, so it can check the HTTP cookie validity; this is a secret shared between //WWSympa// and your application. //WWSympa//'s ''loginrequest'' page can be called to return to the referer URL when an action is performed. Here is a sample HTML anchor:<code><A HREF=''/sympa/loginrequest/referer''>Login page</A></code>
You can also have your own HTML page submitting data to ''wwsympa.fcgi'' CGI. If you do so, you can set the ''referer'' variable to another URI. You can also set the ''failure_referer'' to make //WWSympa// redirect the client to a different URI if login fails.
  * Using //WWSympa//'s HTTP cookie format within your authentication module \\ To cooperate with //WWSympa//, you simply need to adopt its HTTP cookie format and share the secret it uses to generate MD5 checksums, i.e. the ''cookie'' configuration parameter. In this way, //WWSympa// will accept users authenticated through your application without further authentication.


====== Provide a Sympa login form in another application ======

You can easily trigger a Sympa login from another web page. The login form should look like this:

<code>
  <FORM ACTION=''http://listes.renater.fr/sympa'' method=''post''>
        <input type=''hidden'' name=''previous_action'' value=''arc'' />
        Access web archives of list
        <select name=''previous_list''>
        <option value=''sympa-users'' >sympa-users</option>
        </select><br/>
        <input type=''hidden'' name=''action'' value=''login'' />
        <label for=''email''>email address:
        <input type=''text'' name=''email'' id=''email'' size=''18'' value='''' /></label><br />
        <label for=''passwd'' >password:
        <input type=''password'' name=''passwd'' id=''passwd'' size=''8'' /></label> <br/>
        <input class=''MainMenuLinks'' type=''submit'' name=''action_login'' value="Login and access web archives" />
  </FORM>
</code>

The example above does not only perform the login action, but also redirects the user to another Sympa page, a list web archive here. The ''previous_action'' and ''previous_list'' variables define the action that will be performed after the login is done.====== Authorization scenarios ======

An authorization scenario is a small configuration language to describe who can perform an operation and which authentication method is requested for it. An authorization scenario is an ordered set of rules. The goal is to provide a simple and flexible way to configure authorization and required authentication method for each operation.

The function to evaluate scenario is described in section [[:internals|internals]].

===== Location of scenario file =====

List parameters controlling the behavior of commands are linked to different authorization scenarios. For example: the ''send private'' parameter is related to the ''send.private'' scenario. There are four possible locations for an authorization scenario. When Sympa seeks to apply an authorization scenario, it first looks in the related list directory ''/home/sympa/expl/<list>/scenari''. If it does not find the file there, it scans the current robot configuration directory ''/home/sympa/etc/my.domain.org/scenari'', then the site's configuration directory ''/home/sympa/etc/scenari'', and finally ''/home/sympa/bin/etc/scenari'', which is the directory installed by the Makefile.

When customizing scenario for your own site, robot or list, don't modify .../sympa/bin/scenari content or next Sympa update will overwrite it (you must never modify anything in .../sympa/bin/ unless your are patching Sympa). You can modify Sympa behavior if you create new scenario which name is the same as one of the scenario included in the distribution but with a location related to target site, robot or list. You can also add a new scenario ; it will automatically add an accepted value for the related parameter.

<note warning>
When modifying a existing scenario you need to restart Sympa or touch list config file before Sympa use it. 
</note>


====== Scenario structure ======

Basically, a scenario file is composed of a title on the first line and a set of rules on the following lines.

===== Scenario title =====

The first line of a scenario file can contain its title. This is the text that will later appear in the drop-down menu of your administration web interface. This title can be just plain text:

<code>Restricted to subscribers</code>

It can also be set to be internationalized:

<code>title.gettext Restricted to subscribers</code>

That way, the character string following ''title.gettext'' can be handled by Sympa internationalization process.

===== Rules overview =====

Each authorization scenario rule contains:

  * **a condition**: the condition is evaluated by Sympa. It can use variables such as ''sender'' for the sender's email, ''list'' for the list name, etc.
  * **an authentication method**. The authentication method can be ''smtp'', ''md5'' or ''smime''. The rule is applied by Sympa if both the condition and authentication method match the runtime context.
    * ''smtp'' is used if Sympa uses the SMTP ''From:'' header ,
    * ''md5'' is used if a unique MD5 key as been returned by the requestor to validate the message,
    * ''smime'' is used for signed messages (see [[x509#configuration_to_recognize_smime_signatures|configuration to recognize S/MIME signatures]]);

  * **a returned atomic action** that will be executed by Sympa if the rule matches.

Example:

<code>
  del.auth

  title.us deletion performed only by list owners, need authentication
  title.fr suppression r\'eserv\'ee au propri\'etaire avec authentification
  title.es eliminacin reservada slo para el propietario, necesita autentificacin

    is_owner([listname],[sender])  smtp       -> request_auth
    is_listmaster([sender])        smtp       -> request_auth
    true()                         md5,smime  -> do_it
</code>

===== Rules definition =====

An authorization scenario consists of rules, evaluated in order beginning with the first.

==== Conditions ====

''custom_vars'' allows you to introduce [[customizing#custom_parameters|custom parameters]] in your scenario.

''perl_regexp'' can contain the string [host] (interpreted at run time as the list or robot domain). The variable notation ''<nowiki>[msg_header-><smtp_key_word>]</nowiki>'' is interpreted as the SMTP header value only when evaluating the authorization scenario for sending messages. It can be used, for example, to require editor validation for multipart messages. ''<nowiki>[msg_part->type]</nowiki>'' and ''<nowiki>[msg_part->body]</nowiki>'' are the MIME part content-types and bodies; the body is available for MIME parts in text/xxx format only.

Refer to [[customizing#tasks|Tasks]] for date format definition

A bunch of authorization scenarios is provided with the Sympa distribution; they provide a large set of configuration that allow to create lists for most usages. But you will probably create authorization scenarios for your own need. In this case, do not forget to restart Sympa and //WWSympa//, because authorization scenarios are not reloaded dynamically.

These standard authorization scenarios are located in the ''/home/sympa/bin/etc/scenari/'' directory. Default scenarios are named ''<command>.default''.

You may also define and name your own authorization scenarios. Store them in the ''/home/sympa/etc/scenari'' directory. They will not be overwritten by newer Sympa releases. Scenarios can also be defined for a particular virtual host (using directory ''/home/sympa/etc/<robot>/scenari'') or for a list (''/home/sympa/expl/<robot>/<list>/scenari'' ). **Sympa will not dynamically detect that a list configuration should be reloaded after a scenario has been changed on disk.**

Example: copy the previous scenario to ''scenari/subscribe.rennes1'':

<code>
  equal([sender], 'userxxx@univ-rennes1.fr') smtp,smime -> reject
  match([sender], /univ-rennes1\.fr$/) smtp,smime -> do_it
  true()                               smtp,smime -> owner
</code>

You may now refer to this authorization scenario in any list configuration file, for example:
<code>
  subscribe rennes1
</code>

==== Authentification methods ====

Yous can specify three different authentication methods to base your rules on: ''smtp'', ''smime'' and ''md5''.

**these methods take a different meaning if you consider them in a web or mail context**.\\

Indeed if you consider, for example, the scenario ''send'': it will be evaluated when people try to send a message to a list.

  * If the message is sent through the web interface, Sympa will verify the identity of the sender based on its web authentication informations (login/password, certificate, etc.)
  * If it is sent by the mail client, the authentication is based on whatever authentication method the user's email client associated with the SMTP message (S/MIME signature, From field, etc.).

//But the same scenario file will be used in both cases.// That means that the same authentication method will be used, whichever context we're in. It is consequently important to understand what interpretation to give to each authentication method according to the context.

Here is a description of what is evaluated to authenticate the user depending of the context: web or mail.

^  Method  ^  Mail context  ^  Web context  ^
|  ''smtp''  |  the "From:" field of the message  |  //Nothing - unused in web context//  |
|  ''smime''  |  the S/MIME X509 signature of the email  |  An X509 certificate installed in the user's browser  |
|  ''md5''  |  the MD5 hash in the subject of the message  |  the authentication informations provided to Sympa (login/password)  |

Note that ''md5'' will be used, in a mail context, when users answer to an authentication request, or when editors moderate a message by replying to a moderation request mail.

In most cases, ''smtp'' will be used for mails, and ''md5'' for the web.

==== Actions ====

The difference between ''editor'' and ''editorkey'' is that, with ''editor'', the message is simply forwarded to moderators, who can then forward it to the list if they like. ''editorkey'' assigns a key to the message and sends it to moderators together with the message. So moderators can just send back the key to distribute the message. Please note that moderation from the web interface is only possible when using ''editorkey'', because otherwise there is no copy of the message saved on the server.

The ''quiet'' can be part of the scenario action result. When using this option, no notification is sent to the message sender. For example, if a scenario rule is applied and result in  ''editorkey,quiet'' the sender of teh message will not receive the automatic information message telling hilm that his message has been forwarded to the list editor. This is an important issue to prevent //backscatter// messages. backscatter messages are messages you receive as an automatic answer to a message you never sent. The following web page give you more details :
  *http://www.spamresource.com/2007/02/backscatter-what-is-it-how-do-i-stop-it.html 
  *http://en.wikipedia.org/wiki/Backscatter
Sympa version 5.5 and later of Sympa provide a better mechanism to prevent backscatter. See https://www.sympa.org/dev-manual/antispam

==== Formal specification of the rules ====

Rules are defined as follows:

<code>
  <rule> ::= <condition> <auth_list> -> <action>

  <condition> ::= [!] <condition
                  | true ()
                  | equal (<var>, <var>)
                  | match (<var>, /perl_regexp/)
  		| search (<named_filter_file>)
                  | is_subscriber (<listname>, <var>)
                  | is_owner (<listname>, <var>)
                  | is_editor (<listname>, <var>)
                  | is_listmaster (<var>)
                  | older (<date>, <date>)    # true if first date is anterior to the second date
                  | newer (<date>, <date>)    # true if first date is posterior to the second date
                  | CustomCondition::<package_name> (<var>*)

  <var> ::= [email] | [sender] | [user-><user_key_word>] | [previous_email]
                    | [env->remote_host] | [env->remote_addr] | [user_attributes-><user_attributes_keyword>]
  	 	  | [subscriber-><subscriber_key_word>] | [list-><list_key_word>] | [env-><env_var>]
  		  | [conf-><conf_key_word>] | [msg_header-><smtp_key_word>] | [msg_body]
  	 	  | [msg_part->type] | [msg_part->body] | [msg_encrypted] | [is_bcc] | [current_date]
  		  | [topic-auto] | [topic-sender,] | [topic-editor] | [topic] | [topic-needed]
  		  | [custom_vars-><custom_var_name>] | <string>

  [is_bcc] ::= set to 1 if the list is neither in To: nor Cc:

  [sender] ::= email address of the current user (used on web or mail interface). Default value is 'nobody'

  [previous_email] ::= old email when changing subscription email in preference page.

  [msg_encrypted] ::= set to 'smime' if the message was S/MIME encrypted

  [topic-auto] ::= topic of the message if it has been automatically tagged

  [topic-sender] ::= topic of the message if it has been tagged by sender

  [topic-editor] ::= topic of the message if it has been tagged by editor

  [topic]  ::= topic of the message (this variable has a value if any of the previous [topic-*] variable has a value.

  [topic-needed] ::= the message has not got any topic and message topic are required for the list

  /perl_regexp/ ::= a perl regular expression. Don't forget to escape special characters (^, $, \{, \(, ...)
  Check http://perldoc.perl.org/perlre.html for regular expression syntax.

  <date> ::= '<date_element> [ +|- <date_element>]'

  <date_element> ::= <epoch_date> | <var> | <date_expr>

  <epoch_date> ::= <integer>

  <date_expr> ::= <integer>y<integer>m<integer>d<integer>h<integer>min<integer>sec

  <custom_var_name> ::= name of the custom parameter you want to use.

  <listname> ::= [listname] | <listname_string>

  <auth_list> ::= <auth>,<auth_list> | <auth>

  <auth> ::= smtp|md5|smime

  <action> ::=   do_it [,notify]
               | do_it [,quiet]
  	     | reject(reason=<reason_key>) [,quiet]
  	     | reject(tt2=<tpl_name>) [,quiet]
               | request_auth
               | owner
  	     | editor
  	     | editorkey[,quiet]
  	     | listmaster

  <reason_key> ::= match a key in mail_tt2/authorization_reject.tt2 template corresponding to
                   an information message about the reason of the reject of the user

  notify ::= sends a notification to list owner

  <tpl_name> ::= corresponding template (<tpl_name>.tt2) is send to the sender

  <user_key_word> ::= email | gecos | lang | password | cookie_delay_user
  	            | <additional_user_fields>

  <user_attributes_key_word> ::= one of the user attributes provided by the SSO system via environment variables. The [user_attributes] structure is available only if user authenticated with a generic_sso.

  <subscriber_key_word> ::= email | gecos | bounce | reception
  	                  | visibility | date | update_date
  			  | <additional_subscriber_fields>

  <list_key_word> ::= name | host | lang | max_size | priority | reply_to |
  		    status | subject | account | total

  <conf_key_word> ::= domain | email | listmaster | default_list_priority |
  		      sympa_priority | request_priority | lang | max_size

  <named_filter_file> ::= filename ending with .ldap , .sql or .txt

  <package_name> ::= name of a perl package in /etc/custom_conditions/ (small letters)
</code>

====== Named Filters ======

At the moment, Named Filters are only used in authorization scenarios. They enable to select a category of people who will be authorized or not to realize some actions.

As a consequence, you can grant privileges in a list to people belonging to an LDAP directory, an SQL database or a flat text file, thanks to an authorization scenario.

Note that only a subset of variables available in the scenario context are available here (including [sender] and [listname]).


=====  LDAP Named Filters Definition =====

People are selected through an LDAP filter defined in a configuration file. This file must have the extension '.ldap'. It is stored in ''/home/sympa/etc/search_filters/''.

You must give a few information in order to create a LDAP Named Filter:

  * ''host'' \\ A list of host:port LDAP directories (replicates) entries.
  * ''suffix'' \\ Defines the naming space covered by the search (optional, depending on the LDAP server).
  * ''filter'' \\ Defines the LDAP search filter (RFC 2254 compliant). But you must absolutely take into account the first part of the filter which is: ''(mail_attribute = [sender])'', as shown in the example. You will have to replace ''mail_attribute'' by the name of the attribute for the email. Sympa checks whether the user belongs to the category of people defined in the filter.
  * ''scope'' \\ By default, the search is performed on the whole tree below the specified base object. This may be changed by specifying a scope:
    * ''base'': search only the base object.
    * ''one'': search the entries immediately below the base object.
    * ''sub'': search the whole tree below the base object. This is the default option.
  * ''bind_dn'' \\ If anonymous bind is not allowed on the LDAP server, a DN and password can be used.
  * ''bind_password'' \\ This password is used, combined with the ''bind_dn'' above.

''example.ldap'': we want to select the teachers of mathematics in the University of Rennes 1 in France:
<code>
  	host		ldap.univ-rennes1.fr:389,ldap2.univ-rennes1.fr:390
  	suffix		dc=univ-rennes1.fr,dc=fr
  	filter		(&(canonic_mail = [sender])(EmployeeType = prof)(subject = math))
  	scope		sub
</code>


=====  SQL Named Filters Definition =====

People are selected through an SQL filter defined in a configuration file. This file must have the extension '.sql'. It is stored in ''/home/sympa/etc/search_filters/''.

To create an SQL Named Filter, you have to configure SQL host, database and options, the same way you did it for the main Sympa database in ''sympa.conf''. Of course, you can use different database and options. Sympa will open a new Database connection to execute your statement.

Please refer to section [[conf-parameters/part3#database_related|Database related]] for a detailed explanation of each parameter.

Here, all database parameters have to be grouped in one ''sql_named_filter_query'' paragraph.

  * ''db_type'' \\ Format: ''db_type mysql|SQLite|Pg|Oracle|Sybase''; Database management system used. Mandatory and case sensitive.
  * ''db_host'' \\ Database host name. Mandatory.
  * ''db_name'' \\ Name of database to query. Mandatory.
  * ''statement'' \\ Mandatory. The SQL statement to execute to verify authorization. This statement must returns 0 to refuse the action, or anything else to grant privileges. The ''SELECT COUNT(*)...'' statement is the perfect query for this parameter. The keyword in the SQL query will be replaced by the sender's email.
  * Optional parameters \\  Please refer to main ''sympa.conf'' section for description.
    * ''db_user''
    * ''db_password''
    * ''db_options''
    * ''db_env''
    * ''db_port''
    * ''db_timeout''

''example.sql'': we want to select the teachers of mathematics in the University of Rennes 1 in France:
<code>
         sql_named_filter_query
         db_type         mysql
         db_name         people
         db_host         dbserver.rennes1.fr
         db_user         sympa
         db_passwd       pw_sympa_mysqluser
         statement       SELECT count(*) as c FROM users WHERE mail=[sender] AND EmployeeType='PROFESSOR' AND department='mathematics'
</code>

=====  Search condition =====

The search condition is used in authorization scenarios.

The syntax of this rule is:
<code>
  	search(example.ldap)      smtp,smime,md5    -> do_it
  	search(blacklist.txt)     smtp,smime,md5    -> do_it
</code>

The variable used by ''search'' is the name of the LDAP configuration file or a txt matching enumeration.

Note that Sympa processes maintain a cache of processed search conditions to limit access to the LDAP directory or SQL server; each entry has a lifetime of one hour in the cache.

When using the '.txt' file extension, the file is read looking for a line that matches the second parameter (usually the user email address). Each line is a string where the char ''*'' can be used once to mach any block. This feature is used by the blacklist implicit scenario rule (see [[conf-parameters:part2#use_blacklist|Blacklist]]).

The method of authentication does not change.


======  Scenario inclusion ======

Scenarios can also contain includes:
<code>
        include commonreject
        match([sender], /cru\.fr$/)          smtp,smime -> do_it
  	true()                               smtp,smime -> owner
</code>

In this case, Sympa applies recursively the scenario named ''include.commonreject'' before introducing the other rules. This possibility was introduced in order to facilitate the administration of common rules.

======  Scenario implicit inclusion ======

You can define a set of common scenario rules, used by all lists. ''include.<action>.header'' is automatically added to evaluated scenarios. Note that you will need to restart Sympa processes to force reloading of list config files.

======  Blacklist implicit rule ======

For each service listed in parameter ''use_blacklist'' (see [[.conf-parameters:part2#use_blacklist|use_blacklist]]), the following implicit scenario rule is added at the beginning of the scenario:
<code>
  search(blacklist.txt)  smtp,md5,pgp,smime -> reject,quiet
</code>

The goal is to block messages or other service requests from unwanted users. The blacklist can be defined for the robot or for the list. At the list level, the blacklist is to be managed by list owner or list editor via the web interface.

======  Custom Perl package conditions ======

You can use a Perl package of your own to evaluate a custom condition. It can be useful if you have very complex tasks to carry out to evaluate your condition (web services queries...). In this case, you should write a Perl module, place it in the ''CustomCondition'' namespace, with one verify fonction that has to return ''1'' to grant access, ''undef'' to warn of an error, or anything else to refuse the authorization.

This Perl module:

  * must be placed in a subdirectoy ''custom_conditions'' of the ''etc'' directory of your Sympa installation, or of a robot;
  * its filename must be lowercase;
  * must be placed in the ''CustomCondition'' namespace;
  * must contain one ''verify'' static fonction;
  * will receive all condition arguments as parameters.

For example, lets write the smallest custom condition that always returns ''1''.

<code>
    /home/sympa/etc/custom_conditions/yes.pm :

        #!/usr/bin/perl

        package CustomCondition::yes;

        use strict;
        use Log; # optional : we log parameters

        sub verify {
          my @args = @_;
          foreach my $arg (@args) {
            do_log ('debug3', 'arg: ', $arg);
          }
          # I always say 'yes'
          return 1;
        }
        ## Packages must return true.
        1;
</code>

We can use this custom condition that way:

<code>
  CustomCondition::yes(,,)      smtp,smime,md5    -> do_it
  true()                               smtp,smime -> reject
</code>

Note that the '',,'' are optional, but it is the way you can pass information to your package. Our ''yes.pm'' will print the values in the logs.

Remember that the package name has to be lowercase, but the ''CustomCondition'' namespace is case sensitive. If your package returns ''undef'', the sender will receive an 'internal error' mail. If it returns anything else but ''1'', the sender will receive a 'forbidden' error.

======  Hiding scenario files ======

Because Sympa is distributed with many default scenario files, you may want to hide some of them to list owners (to make list administration menus shorter and readable). To hide a scenario file, you should create an empty file with the '':ignore'' suffix. Depending on where this file has been created, it will make it be ignored at either a global, robot or list level.

Example: <code>/home/sympa/etc/my.domain.org/scenari/send.intranetorprivate:ignore</code>

The ''intranetorprivate'' ''send'' scenario will be hidden (on the web admin interface), at the my.domain.org robot level only.====== Virtual host ======

Sympa is designed to manage multiple distinct mailing list servers on a single host with a single Sympa installation. Sympa virtual hosts are like Apache virtual hosting. Sympa virtual host definition includes a specific email address for the robot itself and its lists and also a virtual HTTP server. Each robot provides access to a set of lists, each list is related to only one robot.

Most configuration parameters can be redefined for each robot, except for general Sympa installation parameters (binary and spool location, SMTP engine, antivirus plugin, ...).

The virtual host name as defined in Sympa documentation and configuration file refers to the Internet domain of the virtual host.

Note that Sympa allows you to manage 2 lists with the same name (local part) among different virtual domains. It used to be a limitation until Sympa 5.2.

======  How to create a virtual host ======

You do not need to install several Sympa servers. A single ''sympa.pl'' daemon and one or more fastcgi servers can serve all virtual host. Just configure the server environment in order to accept the new domain definition.

  * **The DNS** must be configured to define a new mail exchanger record (MX) to route message to your server. A new host (A record) or alias (CNAME) are mandatory to define the new web server.
  * Configure your **MTA** (sendmail, postfix, exim, ...) to accept incoming messages for the new robot domain. Add mail aliases for the robot. Examples (with sendmail):
<code>
    sympa@your.virtual.domain:      "| /home/sympa/bin/queue sympa@your.virtual.domain"
    listmaster@your.virtual.domain: "| /home/sympa/bin/queue listmaster@your.virtual.domain"
    bounce+*@your.virtual.domain:          "| /home/sympa/bin/bouncequeue sympa@your.virtual.domain"
</code>

  * Define a **virtual host in your HTTPD server**. The fastcgi servers defined in the common section of you HTTPD server can be used by each virtual host. You do not need to run dedicated fascgi server for each virtual host. Examples:
<code>
    FastCgiServer /home/sympa/bin/wwsympa.fcgi -processes 3 -idle-timeout 120
    .....
    <VirtualHost 195.215.92.16>
      ServerAdmin webmaster@your.virtual.domain
      DocumentRoot /var/www/your.virtual.domain
      ServerName your.virtual.domain
      <Location /sympa>
         SetHandler fastcgi-script
      </Location>
      ScriptAlias /sympa /home/sympa/bin/wwsympa.fcgi
      Alias /static-sympa /home/sympa/your.virtual.domain/static_content
    </VirtualHost>
</code>

  * Create a ''/home/sympa/etc/your.virtual.domain/robot.conf'' configuration file for the virtual host. Its format is a subset of ''sympa.conf'' and is described in the next section; a sample ''robot.conf'' is provided.
  * Create a ''/home/sympa/expl/your.virtual.domain/'' directory that will contain the virtual host mailing lists directories. This directory should have the ''sympa'' user as its owner and must have read and write access for this user.
<code>
    # su sympa -c 'mkdir /home/sympa/expl/your.virtual.domain'
    # chmod 750 /home/sympa/expl/your.virtual.domain
</code>



======  robot.conf ======

A robot is named by its domain, let's say ''my.domain.org'', and defined by a directory ''/home/sympa/etc/my.domain.org''. This directory must contain at least a ''robot.conf'' file. This file has the same format as ''/etc/sympa.conf'' (have a look at ''robot.conf'' in the sample dir). Only the following parameters can be redefined for a particular robot:

  * ''http_host'' \\ This hostname will be compared with the ''SERVER_NAME'' environment variable in ''wwsympa.fcgi'' to determine the current Virtual Host. You can add a path at the end of this parameter if you are running multiple virtual hosts on the same host. Examples:
<code>
    	http_host  myhost.mydom
    	http_host  myhost.mydom/sympa
</code>
  * ''host'' \\ This is the equivalent of the ''host'' ''sympa.conf'' parameter. The default for this parameter is the name of the virtual host (i.e. the name of the subdirectory);
  * ''wwsympa_url'' \\  The base URL of //WWSympa//;
  * ''soap_url'' \\ The base URL of Sympa's SOAP server (if it is running; see [[soap|soap]]);
  * ''cookie_domain'';
  * ''email'' \\ This not an email but just the local part of the Sympa email adress robot responder.
  * ''title'';
  * ''default_home'';
  * ''create_list'';
  * ''lang'';
  * ''supported_lang'';
  * ''log_smtp'';
  * ''listmaster'';
  * ''max_size'';
  * ''css_path'';
  * ''css_url'';
  * ''static_content_path'';
  * ''static_content_url'';
  * ''pictures_feature'';
  * ''pictures_max_size'';
  * ''logo_html_definition'';
  * ''color_0'', color_1 ... color_15;
  * deprecated color definition: ''dark_color'', ''light_color'', ''text_color'', ''bg_color'', ''error_color'', ''selected_color'', ''shaded_color''.

These settings overwrite the equivalent global parameter defined in ''/etc/sympa.conf'' for the ''my.domain.org'' robot; the main ''listmaster'' still has privileges on Virtual Robots though. The ''http_host'' parameter is compared by //WWSympa// with the ''SERVER_NAME'' environment variable to recognize which robot is in use.



=====  Virtual host customization =====

**Warning:** Full virtual host support in Sympa is the result of a long evolution within our source code. Consequently, in some places, this support can still retain some flaws that we urge you to report in our tracking system so they are quickly evened.


==== Adding a logo ====

You can quickly introduce a logo in the upper left corner of all pages by configuring the ''[[:manual:conf-parameters:part1#logo_html_definition|logo_html_definition]]'' parameter in the ''robot.conf'' file.



==== Static content parameters ====

**Foreword:** A lot of refinement is possible in the management of static content. Due to historical evolution of the Sympa organization, several parameter are likely to be used to configure it. However, you don't have to use any of these parameters, as reasonable default values exist for each of them. Consequently, **all you need to do to use static content is define the following alias in your Apache configuration:**

<code>
Alias /static-sympa {path to your sympa installation directory}/static-content
</code>

And make sure none of these parameters is set, neither in ''sympa.conf'' nor in ''robot.conf'': ''[[:manual:conf-parameters:part1#static_content_url|static_content_url]]'', ''[[:manual:conf-parameters:part1#static_content_path|static_content_path]]'', ''[[:manual:conf-parameters:part1#css_url|css_url]]'', ''[[:manual:conf-parameters:part1#css_path|css_path]]'', ''[[:manual:conf-parameters:part1#pictures_url|pictures_url]]'', ''[[:manual:conf-parameters:part1#pictures_path|pictures_path]]''.

Et voil√†!

However, if you want to customize your configuration, you can read the following sections.

----

Some features can be stored as static content for Sympa. For now, only CSS and pictures are managed this way. The way these static contents are stored and accessed through the web interface is managed by several parameters.

  * ''[[:manual:conf-parameters:part1#static_content_url|static_content_url]]'', ''[[:manual:conf-parameters:part1#css_url|css_url]]'', ''[[:manual:conf-parameters:part1#pictures_url|pictures_url]]'' define URL to access resources through the web.

  * ''[[:manual:conf-parameters:part1#static_content_path|static_content_path]]'', ''[[:manual:conf-parameters:part1#css_path|css_path]]'', ''[[:manual:conf-parameters:part1#pictures_path|pictures_path]]'' define paths where these resources will be accessed through the file system or stored when generated by Sympa.

If you want the URL to lead to the ressources Sympa generates, you must create aliases in your Apache configuration establishing a correspondence between the ''*_url'' parameters and their ''*_path'' counterpart.

The ''static_content_*'' parameters are used to build default values for the corresponding ''css_*'' and ''pictures_*'' parameters when those are not defined in the configuration. For example, if ''css_path'' isn't defined, its value is set to ''static_content_path/css''.

As all those parameters can be defined in ''sympa.conf'' and ''robot.conf'', it can be confusing which value your parameters will finally be set to. Generally speaking, values set in ''robot.conf'' always have precedence over those set in ''sympa.conf''.

The following tables show the values taken by the static content parameters regarding which values are set in the different configuration files available. We assume the name of the virtual host is ''vhost.com''.

In these tables, columns headers show the values set in ''robot.conf'' while rows headers show the values set in ''sympa.conf''. You can then read in the cell the value actually used for the parameter.

=== css_url ===

^sympa.conf\robot.conf^nothing^static_content_url = "a"^css_url = "a"^
^nothing|"static-sympa/css/vhost.com"|"a/css/vhost.com"|"a"|
^static_content_url = "b"|"b/css/vhost.com"|"a/css/vhost.com"|"a"|
^css_url = "b"|"b"|"a/css/vhost.com"|"a"|

=== css_path ===

^sympa.conf\robot.conf^nothing^static_content_path = "a"^css_path = "a"^
^nothing|"{sympa install directory}/static-content/css/vhost.com"|"a/css/vhost.com"|"a"|
^static_content_path = "b"|"b/css/vhost.com"|"a/css/vhost.com"|"a"|
^css_path = "b"|"b"|"a/css/vhost.com"|"a"|

=== pictures_url ===

^sympa.conf\robot.conf^nothing^static_content_url = "a"^pictures_url = "a"^
^nothing|"static-sympa/pictures/"|"a/pictures/"|"a"|
^static_content_url = "b"|"b/pictures/"|"a/pictures/"|"a"|
^pictures_url = "b"|"b"|"a/pictures/"|"a"|

Note that if you don't set ''pictures_url'' in ''robot.conf'', static pictures URL will //not// be virtual host-specific by default.

=== pictures_path ===

^sympa.conf\robot.conf^nothing^static_content_path = "a"^pictures_path = "a"^
^nothing|"{sympa install directory}/static-content/pictures/"|"a/pictures/"|"a"|
^static_content_path = "b"|"b/pictures/"|"a/pictures/"|"a"|
^pictures_path = "b"|"b"|"a/pictures/"|"a"|

Note that if you don't set ''pictures_path'' in ''robot.conf'', static pictures folder will //not// be virtual host-specific by default.


==== CSS customization ====

In order to customize the web look and feel, you may edit the CSS definition. CSS are defined in a template named ''css.tt2''.

Any virtual host can use static CSS file for making Sympa web interface faster. You can later edit this static definition and change web style. If you want to use static CSS, you can either set the path to these files using the ''[[:manual:conf-parameters:part1#css_path|css_path]]'' and ''[[:manual:conf-parameters:part1#css_url|css_url]]'' parameters or just follow the Sympa defaults.

=== Using css_path and css_url parameters ===

  * if you define ''[[:manual:conf-parameters:part1#css_path|css_path]]'' in robot.conf, the static CSS files will be created in the corresponding folder.
  * if you define ''[[:manual:conf-parameters:part1#css_url|css_url]]'' in robot.conf, the style sheets used will be those found by following this URL. //Note that this implies to use the style sheets located in the folder whose path is contained by ''[[:manual:conf-parameters:part1#css_path|css_path]]'' **only if** you set the relevant alias in you Apache configuration.//
  * if you define one of these parameters in the ''sympa.conf'' file, this value will be used as default for each virtual host for which it is not set in ''robot.conf''.

=== Using defaults ===

See [[:manual:virtual-hosts#static_content_parameters|the static content section]] to learn how defaults are handled for static CSS parameters.

==== Customizing templates and authorization scenario ====

In addition, if needed, you can customize each virtual host using its set of templates and authorization scenarios.

The ''/home/sympa/etc/my.domain.org/web_tt2/'', ''/home/sympa/etc/my.domain.org/mail_tt2/'' and ''/home/sympa/etc/my.domain.org/scenari/'' directories are searched when loading templates or scenarios before searching into ''/home/sympa/etc'' and ''/home/sympa/bin/etc''. This allows to define different privileges and a different GUI for a Virtual Host.

======  Managing multiple virtual hosts ======

If you are managing more than 2 virtual hosts, then you might consider moving all the mailing lists in the default robot to a dedicated virtual host located in the ''/home/sympa/expl/my.domain.org/'' directory. The main benefit of this organisation is the ability to define default configuration elements (templates or authorization scenarios) for this robot without inheriting them within other virtual hosts.

To create such a virtual host, you need to create the ''/home/sympa/expl/my.domain.org/'' and ''/home/sympa/etc/my.domain.org/'' directories; customize the ''host'', ''http_host'' and ''wwsympa_url'' parameters in the ''/home/sympa/etc/my.domain.org/robot.conf'', with the same values as the default robot (as defined in ''sympa.conf'' and ''wwsympa.conf'' files).