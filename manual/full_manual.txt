======  Presentation ======



Sympa is an electronic mailing list manager. It is used to automate list management functions such as subscription, moderation, archive and shared document management. It also includes management functions which would normally require a substantial amount of work (time-consuming and costly for the list owner). These functions include automatic management of subscription renewals, list maintenance, and many others.



Sympa manages many different kinds of lists. It includes a web interface for all list functions including management. It allows a precise definition of each list feature, such as sender authorization, moderating process, etc. Sympa defines, for each feature of each list, exactly who is authorized to perform the relevant operations, along with the authentication method to be used. Currently, authentication can be based on either an SMTP ''From'' header, a password, or an S/MIME signature.

\\ Sympa is also able to extract electronic addresses from an LDAP directory or SQL server and to include them dynamically in a list.



Sympa manages the dispatching of messages, and makes it possible to reduce the load on the computer system where it is installed. In configurations with sufficient memory, Sympa is especially well adapted to handle large lists: for a list of 20,000 subscribers, it requires less than 6 minutes to send a message to 95 0f the subscribers, assuming that the network is available (tested on a 300 MHz, 256 MB i386 server with Linux).



This guide covers the installation, configuration and management of version FIXME %manual_version of [[http://www.sympa.org|Sympa]].



======  License ======



Sympa is free software; you may distribute it under the terms of the [[http://www.gnu.org/copyleft/gpl.html|GNU General Public License Version 2]].



You may make and give away verbatim copies of the Source form of this package without restriction, provided that you duplicate all of the original copyright notices and associated disclaimers.









======  Features ======



Sympa provides all the basic features that any mailing list management software should include. While most Sympa features have their equivalents in other mailing list applications, Sympa is unique in including features in a single software package. These features are:



  * **High speed distribution processing** and **load control**. Sympa can be tuned to allow the system administrator to control the amount of computer resources used. Its optimized algorithm allows:

    * the use of your preferred SMTP engine, e.g. Sendmail, qmail or Postfix,

    * tuning of the maximum number of SMTP child processes,

    * grouping of messages according to recipients' domains, and tuning of the grouping factor,

    * detailed logging;

  * **Multilingual** user interface. The full user/admin interface (mail and web) and the online help are internationalized. Translations are gathered in standard PO files;

  * **Template-based** user interface. Every web page and service message can be customized through the **TT2** template format;

  * **MIME support**. Sympa naturally respects MIME in the distribution process, and in addition it allows list owners to configure their lists with welcome, goodbye and other predefined messages using complex MIME structures. For example, a welcome message can be in ''multipart/alternative'' format, using ''text/html'', ''audio/x-wav'' :-), or whatever (Note that Sympa commands in multipart messages are successfully processed, provided that one part is ''text/plain'');

  * **Fine control of authorizations**. The rights to perform controlled actions (such as sending a message, subscribe to a list, etc.) are set using an [[:manual:authorization-scenarios|authorization scenarios]]. Any listmaster can define new authorization scenarios in order to complement the 20 predefined configurations included in the distribution (Example: forward multipart messages to the list editor, while distributing others without requiring any further authorization);

  * **Privileged operations** can be performed by list editors or list owners (or any other user category), as defined in the list ''config'' file or by the robot administrator, the listmaster, defined in the ''/etc/sympa.conf'' global configuration file (a listmaster can also be defined for a particular virtual host). Privileged operations include the usual ''ADD'', ''DELETE'' and ''REVIEW'' commands, which can be authenticated through a unique password or an S/MIME signature;

  * **Web interface**: //WWSympa// is a global Web interface to all Sympa functions (including administration). It provides:

    * a classification of lists, along with a search index,

    * an access control to all functions, including the list of lists (which makes WWSympa particularly well suited to be the main groupware tool within an intranet),

    * the management of shared documents (download, upload, specific access control for each document),

    * an HTML presentation personalized for each user with the list of his/her current subscriptions, including access to message archives, subscription options, etc

    * management tools for list managers (bounce processing, changing of list parameters, moderating incoming messages),

    * tools for the robot administrator (list creation, global robot configuration);\\ To know more, refer to [[web-interface|WWSympa, Sympa's web interface]].

  * **RDBMS**: the internal subscriber and administrative data structure can be stored in a database or, for compatibility with versions 1.x, in text files for subscriber data. The introduction of databases came out of the //WWSympa// project. The database ensures a secure access to shared data. The PERL database API ''DBI''/''DBD'' enables interoperability with various RDBMS (MySQL, SQLite, PostgreSQL, Oracle, Sybase). To know more, refer to [[database|Sympa and its database]];

  * **Virtual hosting**: a single Sympa installation can provide multiple virtual robots with both email and web interface customization (see [[virtual-hosts|Virtual host]]);

  * **LDAP-based mailing lists**: e-mail addresses can be retrieved dynamically from a database accepting SQL queries, or from an LDAP directory. In order to maintain reasonable response times, Sympa retains the data source in an internal cache controlled by a TTL (Time To Live) parameter (see [[parameters-data-sources#include_ldap_query|include-ldap-query]]);

  * **LDAP authentication**: via uid and emails stored in LDAP Directories. Alternative email addresses, extracted from a LDAP directory, may be used to "unify" subscriptions (see [[authentication#authentication_with_email_address_uid_or_alternate_email_address|Authentication with email address, uid or alternate email address]]);

  * **Antivirus scanner**: Sympa extracts attachments from incoming messages and runs a virus scanner on them. Currently working with McAfee/uvscan, Fsecure/fsav, Sophos, AVP, Trend Micro/VirusWall and Clam Antivirus (see [[antivirus|Antivirus]]);

  * **Inclusion of the subscribers** of one list among the subscribers of another. This is real inclusion, not the dirty, multi-level cascading one might otherwise obtain by simply "subscribing list B to list A"

  * **RSS channel**.

  * **Custom user attributes**: you can customize the subscription form by requesting additional informations to future users when they request their subscription. See the doc regarding these [[:manual:customizing#custom_attributes|custom attributes]].



======  Project directions ======



Sympa is a very active project: check the [[:release_note|release notes]]. Thus it is not possible to maintain multiple documents about the Sympa project directions anymore. Please refer to the [[:dev:future|Future Sympa developments]] page for information about the project directions.





======  History ======



Sympa development started from scratch in 1995. The goal was to ensure continuity with the TULP list manager, produced partly by the initial author of Sympa: Christophe Wolfhugel.



New features were required, which the TULP code was just not able to handle. The initial version of Sympa brought authentication, the flexible management of commands, high performances in internal data access, and object oriented code for easy code maintenance.



It took nearly two years to produce the first market releases.



Other dates:

  * FIXME !!!!!!!!!

  * 2008 Web sessions, Custom user attributes

  * 2007 automatic list creation

  * 2006 full UTF-8 support

  * 2005 Changed HTML to XHTML + CSS, RSS, list families, ...

  * 2004 Changed for TT2 template format and PO catalogue format.

  * 2003 Sympa SOAP server, CAS-based and Shibboleth-based authentication.Automatic bounce management.

  * 2002 Virtual hosting, LDAP authentication.

  * 2001 Auto-install of aliases at list creation time, antivirus scanner plugin, Support for S/MIME (signing and encryption), list setup through the web interface, shared document repository for each list. Full rewrite of HTML look and feel.

  * 2000 List creation feature from the web, Archive search engine and message removal

  * 1999 Stable version of WWSympa, introduction of authorization scenarios, Internal use of a database (MySQL), definition of list subscriber with external data source (RDBMS or LDAP).

  



====== Mailing lists and support ======



If you wish to contact the authors of Sympa, please use the address ''sympa-authors(@)renater.fr''.



There are also a few [[http://listes.renater.fr/sympa/lists/informatique/sympa|mailing-lists about Sympa]]:



  * ''sympa-users(@)renater.fr'' general information list

  * ''sympa-fr(@)renater.fr'', for French-speaking users

  * ''sympa-announce(@)renater.fr'', Sympa announcements

  * ''sympa-dev(@)renater.fr'', Sympa developers

  * ''sympa-pootle(@)renater.fr'', Sympa translators



To join, send the following message to ''sympa(@)renater.fr'':



> ''subscribe'' //Listname// //Firstname// //Name//



(replace //Listname//, //Firstname// and //Name// by the list name, your first name and your last name).



You may also refer to the Sympa [[http://www.sympa.org|homepage]]; there you will find the [[http://www.sympa.org/distribution/latest version|latest version]], the [[:faq:index|FAQ]] and so on.

====== Organization ======



Here is a snapshot of what Sympa looks like once installed on your system. This also illustrates the Sympa philosophy, we guess. Almost all configuration files can be defined for a particular list, for a virtual host or for the entire site, and most of them have a reasonable default value provided by Sympa distribution.



The following reference manual assumes a particular location for all files and directories. Note that binary distributions usually change those locations according to the operating system file organization. When installing Sympa from source kit, //configure// can be called with command options in order to change all default file locations.





  *  ''/home/sympa'' \\  The root directory of Sympa. You will find almost everything related to Sympa under this directory, except logs and main configuration files.

  * ''/home/sympa/bin''\\  This directory contains the binaries, including the CGI.

  * ''/home/sympa/default''\\  Here Sympa stores the default versions of what it will otherwise find in ''/home/sympa/etc'' (task models, authorization scenarios, templates and configuration files, recognized S/Mime certificates, families). ''/home/sympa/default'' may be completely overwritten by the ''make install'' so you must not customize templates and authorization scenarios under ''/home/sympa/default''.

  * ''/home/sympa/etc''\\  This is your site's configuration directory. Consult ''/home/sympa/bin/etc'' when drawing up your own.

  * ''/home/sympa/etc/create_list_templates/''\\  List templates (suggested at list creation time).

  * ''/home/sympa/etc/scenari/''\\  This directory will contain your authorization scenarios. If you don't know what the hell an authorization scenario is, refer to [[authorization-scenarios|Authorization scenarios]]. Those authorization scenarios are default scenarios but you may look at ''/home/sympa/etc/my.domain.org/scenari/'' for default scenarios of my.domain.org virtual host and ''/home/sympa/list_data/mylist/scenari'' for scenarios specific to a particular list.

  * ''/home/sympa/etc/data_sources/''\\  This directory will contain your .incl files (see [[list-definition#data_inclusion_file|Data inclusion file]]). At the moment it only deals with files required by paragraphs ''owner_include'' and ''editor_include'' in the config file.

  * ''/home/sympa/etc/list_task_models/''\\  This directory will store your own list task models (see [[customizing#tasks|Customizing tasks]]).

  * ''/home/sympa/etc/global_task_models/''\\  Contains your global task models (see [[customizing#tasks|Customizing tasks]]).

  * ''/home/sympa/etc/web_tt2/'' (used to be ''/home/sympa/etc/wws_templates/'') \\  The web interface (//WWSympa//) is composed of template HTML files parsed by the CGI program. Templates can also be defined for a particular list in ''/home/sympa/list_data/mylist/web_tt2/'' or in ''/home/sympa/etc/my.domain.org/web_tt2/''

  * ''/home/sympa/etc/mail_tt2/'' (used to be ''/home/sympa/etc/templates/'') \\  Some of the mail robot's replies are defined by templates (''welcome.tt2'' for SUBSCRIBE). You can overload these template files in the individual list directories or for each virtual host, but these are the defaults.

  * ''/home/sympa/etc/families/''\\  Contains your family directories (see [[list-creation#list_creation|Mailing list creation]]). Family directories can also be created in ''/home/sympa/etc/my.domain.org/families/''

  * ''/home/sympa/etc/my.domain.org''\\  The directory to define the virtual host my.domain.org dedicated to management of all lists of this domain (list description of my.domain.org are stored in ''/home/sympa/list_data/my.domain.org''). Those directories for virtual hosts have the same structure as ''/home/sympa/etc'' which is the configuration dir of the default robot.

  * ''/home/sympa/list_data''\\ Sympa's working directory.

  * ''/home/sympa/list_data/mylist''\\  The list directory (refer to [[list-definition|Mailing list definition]]). Lists stored in this directory belong to the default robot as defined in sympa.conf file, but a list can be stored in ''/home/sympa/list_data/my.domain.org/mylist'' directory and it is managed by my.domain.org virtual host.

  * ''/home/sympa/list_data/X509-user-certs''\\  The directory where Sympa stores all user's certificates.

  * ''/home/sympa/locale''\\  Internationalization directory. It contains message catalogues in the GNU .po format.

  * ''/home/sympa/spool''\\ Sympa uses different spools (see [[#spools|Spools]]).

  * ''/home/sympa/src/''\\ Sympa sources.





====== Programs ======



<if manual_version >= 6.3>

  * ''spooler.pl'' \\ This daemon fetch messages from file system spools where they are delivered by the incomming MTA. It read messages and load them with various meta data into the database (table spool_table). When runnning spooler.pl daemon fork a child process for each separate directory location (queue, bouncequeue and automaticqueue).

</if>

<if manual_version >= 6.3>

  * ''sympa.pl''\\ The main daemon; it processes commands and messages found in spool_table. Continuously scans the ''msg'' and ''automatic'' db spool. The daemon check list  authorization and reject, accept, forward messages to list owners (it may also request authentication by email chalenge). It is also teh daemon that reply to commands submitted by email. How ever this daemon does not send messages it self but it prepare and store them in the data base spool distribute for bulk.pl handling. 

<else>

  * ''sympa.pl''\\ The main daemon; it processes commands and prepares messages in database. Continuously scans the ''msg''.

</if>

  * ''bulk.pl'' \\ The distribution message daemon ; Continuously scans the database (''bulkmailer_table'') and send messages as prepared by sympa.pl

  * ''sympa_wizard.pl''\\  A wizard to edit ''sympa.conf'' and ''wwsympa.conf''. Maybe it is a good idea to run it at the beginning, but these files can also be edited with your favorite text editor.

  * ''wwsympa.fcgi''\\  The CGI program offering a complete web interface to mailing lists. It can work in both classical CGI and FastCGI modes, although we recommend FastCGI mode, being up to 10 times faster.

  * ''bounced.pl''\\  This daemon processes bounces (non-delivered messages), looking for bad addresses. List owners will later access bounce information via //WWSympa//. Continuously scans the ''bounce/'' spool.

  * ''archived.pl''\\  This daemon feeds the web archives, converting messages to HTML format and linking them. It uses the amazing ''MhOnArc''. Continuously scans the ''outgoing/'' spool.

  * ''task_manager.pl''\\  The daemon which manages the tasks: creation, checking, execution. It regularly scans the ''task/'' spool.

  * ''sympa_soap_server.fcgi''\\  The server will process SOAP (web services) request. This server requires FastCGI; it should be referenced from within your HTTPS config.

  * ''queue''\\  This small program gets the incoming messages from the aliases and stores them in ''msg/'' spool.

  * ''bouncequeue''\\  Same as ''queue'' for bounces. Stores bounces in ''bounce/'' spool.

  * ''familyqueue''\\  Same as ''queue'' for automatic lists (lists defined by family and created when receiving a mesage for it. Stores incomming messages in spool 'automatic'.



























======  Configuration files ======



  * ''/etc/sympa.conf''\\  The main configuration file. See [[:manual:conf-parameters:index|Sympa.conf parameters]].

  * ''/etc/wwsympa.conf''\\ //WWSympa// configuration file. See [[presentation#wwsympa_intro|the description of WWSympa]].

  * ''edit_list.conf''\\  Defines which parameters/files are editable by owners. See [[list-creation#list_editing|List editing]].

  * ''topics.conf''\\  Contains the declarations of your site's topics (classification in //WWSympa//), along with their titles. A sample is provided in the ''sample/'' directory of the Sympa distribution. See [[customizing#topics|Topics]].

  * ''[[:manual:authentication#auth.conf|auth.conf]]''\\  Defines authentication backend organization (LDAP-based authentication, CAS-based authentication and Sympa internal).

  * ''robot.conf''\\  It is a subset of ''sympa.conf'' defining a Virtual host (one per Virtual host).

<html><A name="crawlers_detection.conf"></a></html>

  * ''crawlers_detection.conf''\\ This file specifies how Sympa detects web crawlers. It is used in order to optimize the Sympa web interface responses and internal mechanisms for crawlers. In this version the file is limited to a list of user agent strings, but in the future it may be enriched with IP adresses. When a crawler is detected, Sympa allows the web client to cache pages so crawlers should not browse old archives every day. In addition, Sympa does not create http sessions for crawlers. This keeps the Sympa session table quite small.  

  * ''nrcpt_by_domain.conf''\\  This file is used to limit the number of recipients per SMTP session. Some ISPs trying to block spams reject sessions with too many recipients. In such cases you can set the [[manual/conf-parameters:part2#nrcpt|nrcpt]] robot.conf parameter to a lower value but this will affect all SMTP sessions with any remote MTA. This file is used to limit the number of recipients for some specific domains. The file must contain a list of domains followed by the maximum number of recipients per SMTP session. Example:



         yohaa.com 3

         oal.com 5



  * ''data_structure.version''\\  This file is automatically created and maintained by Sympa itself. It contains the current version of your Sympa service and is used to detect upgrades and trigger maintenance procedures such as database structure changes.



  * ''ldap_alias_manager.conf''\\ This file defines the parameters for a LDAP directory, when using ''ldap_alias_manager.pl'' as the mail aliases management script.





====== Spools ======



See [[manual/conf-parameters:part2#spool_related|Spool related]] for spool definition in ''sympa.conf''.





<if manual_version >= 6.3>

Incomming messages are separated into 3 categories :

  * messages for predefined lists or for auto replying bot (command messages and messages for list owners)

  * messages for automatic lists (lists that are rcreated when receiving a message for the list)

  * [[http://en.wikipedia.org/wiki/Return_receipt|return receipts]] usually called //bounces//. They are  DSN (Delivery Status Notifications) and MDN (Message Disposition Notifications) More about [[bounces|bounce managment]]



All thoses messages are submitted to Sympa by a local MTA through a delivery agent program with is part of Sympa distribution. This program is one of queue, bouncequeue and familyqueue. They are very simple message that copy incomming message to a local directory which path is specified in sympa.conf. 





  * ''/home/sympa/spool/msg/''\\  For storing incoming messages (including commands). Files are created by the ''queue'' program (via mail aliases).

  * ''/home/sympa/spool/msg/bad/''\\ Sympa stores rejected messages in this directory. 

  * ''/home/sympa/spool/bounce/''\\  For storing incoming bouncing messages. Files are created by the ''bouncequeue'' program (via mail aliases).

  * ''/home/sympa/spool/bounce/bad/''\\  For storing bouncing messages for which bounce management failed, though an user was identified. Files are moved there by the ''bounced.pl'' daemon.

  * ''/home/sympa/spool/automatic \\  For storing incoming messages for // automatic lists// . Files are created by the ''familyqueue'' program (via mail aliases).



Many other spools are stored in the database, table spool_table with a spoolname value in ('msg','auth','mod','digest','archive','bounce','subscribe','topic','bulk','validated'). In version older than 6.3 they where directories. The listmaster can browse database spools in sympa admin web interface. 

<else>







  * ''/home/sympa/spool/auth/''\\  For storing messages until they have been confirmed. Files are created and processed by the ''sympa.pl'' program.

  * ''/home/sympa/spool/bounce/''\\  For storing incoming bouncing messages. Files are created by the ''bouncequeue'' program (via mail aliases) and processed by the ''bounced.pl'' daemon.

  * ''/home/sympa/spool/bounce/bad/''\\  For storing bouncing messages for which bounce management failed, though an user was identified. Files are moved there by the ''bounced.pl'' daemon.

  * ''/home/sympa/spool/digest/''\\  For storing message digests before they are sent. Files are created and processed by the ''sympa.pl'' daemon.

  * ''/home/sympa/spool/mod/''\\  For storing unmoderated messages. Files are created by the ''sympa.pl'' program and processed by either ''sympa.pl'' or ''wwsympa.fcgi''.

  * ''/home/sympa/spool/msg/''\\  For storing incoming messages (including commands). Files are created by the ''queue'' program (via mail aliases) and processed by the ''sympa.pl'' program.

  * ''/home/sympa/spool/msg/bad/''\\ Sympa stores rejected messages in this directory. Files are created by the ''sympa.pl'' daemon.

  * ''/home/sympa/spool/distribute/''\\  For storing messages ready for distribution. This spool is used only if the installation runs 2 ''sympa.pl'' daemons, one for commands, one for messages.

  * ''/home/sympa/spool/distribute/bad/''\\ Sympa stores rejected messages in this directory. Files are created by the ''sympa.pl'' process dedicated to message distribution.

  * ''/home/sympa/spool/task/''\\  For storing all tasks created. Files are created and processed by the ''task_manager.pl'' daemon.

  * ''/home/sympa/spool/outgoing/''\\ ''sympa.pl'' dumps messages in this spool to await archiving by ''archived.pl''. ''wwsympa.fcgi'' may also create files in this spool.

  * ''/home/sympa/spool/outgoing/bad/''\\ For storing messages which couldn't be archived. Files are moved there by the ''archived.pl'' daemon.

  * ''/home/sympa/spool/topic/''\\  For storing topic information files.

  * ''/home/sympa/spool/tmp/''\\  For storing temporary information, as stderr flux from processes or message parts submitted to the anti-virus



</if>



====== Roles and privileges ======



You can assign roles to users (identified via their email addresses) at different levels in Sympa; privileges are associated (or can be associated) to these roles. We list these roles below (from the most powerful to the least), along with the relevant privileges.



=====  (Super) listmasters =====



These are the persons administrating the service, defined in the ''sympa.conf'' file. They inherit the listmaster role in virtual hosts and are the default set of listmasters for virtual hosts.



=====  (Robot) listmasters =====



You can define a different set of listmasters at a virtual host level (in the ''robot.conf'' file). They are responsible for moderating mailing lists creation (if list creation is configured this way), editing default templates, providing help to list owners and moderators. Users defined as listmasters get a privileged access to the Sympa web interface. Listmasters also inherit the privileges of list owners (for any list defined in the virtual host), but not the moderator privileges.



=====  Privileged list owners =====



The first defined privileged owner is the person who requested the list creation. Later it can be changed or extended. They inherit (basic) owner privileges and are also responsible for managing the list owners and editors themselves (through the web interface). With Sympa's default behavior, privileged owners can edit more list parameters than (basic) owners can do; but this can be customized via the ''edit_list.conf'' file.



=====  (Basic) list owners =====



They are responsible for managing the members of the list, editing the list configuration and templates. Owners (and privileged owners) are defined in the list config file.



=====  Moderators (also called Editors) =====



Moderators are responsible for the messages distributed in the mailing list (as opposed to owners who look after list members). Moderators are active if the list has been setup as a moderated mailing list. If no moderator is defined for the list, then list owners will inherit the moderator role.



=====  Subscribers (or list members) =====



Subscribers are the people who are members of a mailing list; they either subscribed, or got added directly by the listmaster or via a data source (LDAP, SQL, another list, ...). These subscribers receive messages posted in the list (unless they have set the ''nomail'' option) and have special privileges to post in the mailing list (unless it is a newsletter). Most privileges a subscriber may have are not hard coded in Sympa but expressed via the so-called authorization scenarios (see [[authorization-scenarios|Scenarios]]).
======  Installing Sympa  ======



Most pieces of Sympa are written in Perl. It also includes a few dedicated programs written in C.





======  Obtaining Sympa, related links ======



The Sympa distribution is available from [[http://www.sympa.org|http://www.sympa.org]]. All important resources are available there:



  * sources;

  * release notes;

  * ''.rpm'' and ''.deb'' packages for Linux;

  * mailing list about Sympa (see [[presentation#mailing_lists_and_support|Mailing lists and support]]);

  * contributions;

  * ...



====== Migrating from another software ======



If you are moving your mailing list software from another software (majordomo, mailman, listserv, lyris, etc) you will need to migrate your data (list configration, list members, list archives) to the Sympa format. You can benefit from scripts written by other Sympa users and listed on our [[:contribs:index|contributions page]].



If you extend/fix the scripts, please submit the new version.





======  Prerequisites ======



Sympa installation and configuration are relatively easy tasks for experienced UNIX users who have already installed Perl packages.



Note that most of the installation time will involve putting in place the prerequisites, if they are not already on the system. No more than a handful of ancillary tools are needed, and on recent UNIX systems their installation is normally very straightforward. We strongly advise you to perform installation steps and checks in the order listed below; these steps will be explained in detail in later sections.



  * installing a RDBMS (Oracle, MySQL(version 4.1 minimum), SQLite, Sybase or PostgreSQL) and creating Sympa's Database. This is required for using the web interface for Sympa. Please refer to ([[database|Sympa and its database]]).

  * installing an MTA (Message Transfer Agent): sendmail, postfix, qmail or exim

  * installing a web server (Apache being the most commonly used)

  * installing [[http://xmlsoft.org/|libxml 2]], required by the LibXML Perl module;

  * installing **the gettext-devel** library;

  * installing CPAN [[http://www.perl.com/CPAN|CPAN (Comprehensive Perl Archive Network)]] modules;

  * creation of a dedicated UNIX user.





=====  System requirements =====



You should have a UNIX system that is more or less recent in order to be able to use Sympa. In particular, it is necessary that your system have an ANSI C compiler (in other words, your compiler should support prototypes).



Sympa has been installed and tested on the following systems, therefore you should not have any special problems:



  * Linux (various distributions);

  * FreeBSD 2.2.x and 3.x;

  * NetBSD;

  * Digital UNIX 4.x;

  * Solaris 2.5 and 2.6;

  * AIX 4.x;

  * HP-UX 10.20.



For remarks regarding problems specific to your OS, please refer to the [[:faq:|FAQ]].



Finally, most UNIX systems are now supplied with an ANSI C compiler; if this is not the case, you can install the ''gcc'' compiler.



To complete the installation, you should make sure that you have a sufficiently recent release of the ''sendmail'' MTA. You may also use ''postfix'', ''exim'' or ''qmail''.



===== Installing Perl and CPAN modules =====



To be able to use Sympa you must have release 5.8 or later of the Perl language, as well as several CPAN modules.



At ''make'' time, the ''check_perl_modules.pl'' script is run to check for installed versions of required Perl and CPAN modules. If a CPAN module is missing or out of date, this script will install it for you.



You can also download and install CPAN modules yourself. You will find a current release of the Perl interpreter in the nearest CPAN archive. If you do not know where to find a nearby site, use the [[http://www.perl.com/CPAN/src/latest.tar.gz|CPAN multiplexer]]; it will find one for you.



=====  Required CPAN modules =====



The following CPAN modules required by Sympa are not included in the standard Perl distribution. At ''make'' time, Sympa will prompt you for missing Perl modules and will attempt to install the missing ones automatically; this operation requires root privileges.



Because Sympa features evolve from one release to another, the following list of modules might not be up to date:



  * ''CGI'';

  * ''CipherSaber'';

  * ''DB_File'';

  * ''DBD'';

  * ''DBI'';

  * ''Digest-MD5'';

  * ''Encode'';

  * ''FCGI'';

  * ''File-Spec'';

  * ''IO-stringy'';

  * ''libintl-perl'';

  * ''libwww-perl'';

  * ''MailTools'';

  * ''MHonArc'';

  * ''MIME-Charset'';

  * ''MIME-EncWords'';

  * ''MIME-tools'';

  * ''MIME-Base64'';

  * ''Regexp-Common'';

  * ''Template-Toolkit'';

  * ''XML-LibXML''.



Since release 2, Sympa requires an RDBMS to work properly. It stores user subscriptions and preferences in a database. Sympa is also able to extract user data from an external database. These features require that you install database-related Perl libraries. This includes the generic Database interface (DBI) and a Database Driver for your RDBMS (DBD):



  * ''DBD'' (DataBase Driver) related to your RDBMS (e.g. Msql-Mysql-modules for MySQL);

  * If you plan to interface Sympa with an LDAP directory to build dynamical mailing lists, you need to install Perl LDAP libraries:\\ ''Net::LDAP'' (perlldap);

  * If you want to Download Zip files of list's Archives, you'll need to install the Perl Module for Archive Management:\\ ''Archive::Zip''.

  * ''SOAP-Lite'' is required if you are running the Sympa SOAP server.

  * ''File-NFSLock''' is required to have NFS locking support.

  * Optional features related to DKIM signature needs ''mail::DKIM''. Thsi module seems to be difficult to install using automatic CPAN cpan install command. It require a package named openssl-devel (for centos, redhat, run yum install openssl-devel) to be installed and the following list of cpan modules.

     *mail::DKIM

        *Crypt::OpenSSL::RSA

           *Cypt::OpenSSL::Random

              *Test::Harness

              *Crypt::OpenSSL::Bignum

           *Digest::SHA

        *Net::DNS

     *File::Temp (update to version 0.22 or higher)





=====  Creating a UNIX user =====



The final step prior to installing Sympa: create a UNIX user (and if possible a group) specific to the program. Most of the installation will be carried out with this account. We suggest that you use the name ''sympa'' for both user and group.



Numerous files will be located in the Sympa user's login directory. Throughout the remainder of this documentation we shall refer to this login directory as ''/home/sympa''.





===== Creating the database =====



See [[database#creating_a_sympa_database]]





======  Compilation and installation  ======



Before using Sympa, you must customize the sources in order to specify a small number of parameters specific to your installation.



First, extract the sources from the archive file, for example in the ''~sympa/src/'' directory: the archive will create a directory named ''sympa-5.3a.10/'' where all the useful files and directories will be located. In particular, you will have a ''doc/'' directory containing this documentation in various formats; a ''sample/'' directory containing a few examples of configuration files; a ''locale/'' directory where multilingual messages are stored; and, of course, the ''src/'' directory for the mail robot and the ''wwsympa'' directory for the web interface.



Example:



  # su -c "gzip -dc sympa-5.4.x.tar.gz | tar xf -" 



Now you can run the installation process:



  $ ./configure ; make ;make install



''configure'' will build the ''Makefile''; it recognizes the following command-line arguments:



  * ''%--prefix=PREFIX%'', the Sympa home directory (default ''/home/sympa/'');

  * ''%--with-bindir=DIR%'', user executables in DIR (default ''/home/sympa/bin/'') \\ ''queue'' and ''bouncequeue'' programs will be installed in this directory. If sendmail is configured to use smrsh (check the mailer prog definition in your sendmail.cf), this should point to ''/etc/smrsh''. This is probably the case if you are using Linux Red Hat;

  * ''%--with-sbindir=DIR%'', system admin executables in DIR (default ''/home/sympa/bin'');

  * ''%--with-libexecdir=DIR%'', program executables in DIR (default ''/home/sympa/bin'');

  * ''%--with-cgidir=DIR%'', CGI programs in DIR (default ''/home/sympa/bin'');

  * ''%--with-datadir=DIR%'', default configuration data in DIR (default ''/home/sympa/bin/etc'');

  * ''%--with-confdir=DIR%'', Sympa main configuration files in DIR (default ''/etc''); ''sympa.conf'' and ''wwsympa.conf'' will be installed there;

  * ''%--with-expldir=DIR%'', modifiable data in DIR (default ''/home/sympa/list_data/'');

  * ''%--with-libdir=DIR%'', code libraries in DIR (default ''/home/sympa/bin/'');

  * ''%--with-mandir=DIR%'', man documentation in DIR (default ''/usr/local/man/'');

  * ''%--with-docdir=DIR%'', man files in DIR (default ''/home/sympa/doc/'');

  * ''%--with-initdir=DIR%'', install System V init script in DIR (default ''/etc/rc.d/init.d'');

  * ''%--with-lockdir=DIR%'', create lock files in DIR (default ''/var/lock/subsys'');

  * ''%--with-piddir=DIR%'', create .pid files in DIR (default ''/home/sympa/'');

  * ''%--with-etcdir=DIR%'', config directories populated by the user are in DIR (default ''/home/sympa/etc'');

  * ''%--with-localedir=DIR%'', create language files in DIR (default ''/home/sympa/locale'');

  * ''%--with-scriptdir=DIR%'', create script files in DIR (default ''/home/sympa/script'');

  * ''%--with-sampledir=DIR%'', create sample files in DIR (default ''/home/sympa/sample'');

  * ''%--with-spooldir=DIR%'', create directory in DIR (default ''/home/sympa/spool'');

  * ''%--with-perl=FULLPATH%'', set full path to Perl interpreter (default ''/usr/bin/perl'');

  * ''%--with-openssl=FULLPATH%'', set path to OpenSSL (default ''/usr/local/ssl/bin/openssl'');

  * ''%--with-user=LOGIN%'', set sympa user name (default ''sympa''); Sympa daemons are running under this UID;

  * ''%--with-group=LOGIN%'', set sympa group name (default ''sympa''); Sympa daemons are running under this UID;

  * ''%--with-sendmail_aliases=ALIASFILE%'', set aliases file to be used by Sympa (default ''/etc/mail/sympa_aliases''). Set to ''none'' to disable alias management (you can overwrite this value at runtime giving its value in ''sympa.conf'');

  * ''%--with-virtual_aliases=ALIASFILE%'', set postfix virtual file to be used by Sympa (default ''/etc/mail/sympa_virtual''); this is used by the ''alias_manager.pl'' script;

  * ''%--with-newaliases=FULLPATH%'', set path to sendmail newaliases command (default ''/usr/bin/newaliases'');

  * ''%--with-newaliases_arg=ARGS%'', set arguments to newaliases command (default ''NONE''); this is used by the ''postfix_manager.pl'' script;

  * ''%--with-postmap=FULLPATH%'', set path to postfix postmap command (default ''/usr/sbin/postmap'');

  * ''%--with-postmap_arg=ARGS%'', set arguments to postfix postmap command (default ''NONE'');



''make'' will build a few binaries (''queue'', ''bouncequeue'' and ''aliaswrapper'') and help you install required CPAN modules.



''make install'' does the installation job. It recognizes the following option:



  * DESTDIR, can be set in the main Makefile to install sympa in DESTDIR/DIR (instead of DIR). This is useful for building RPM and DEB packages.



Since version 3.3 of Sympa, colors are ''sympa.conf'' parameters (see [[:manual:conf-parameters:part1#color_parameters|color parameters]]).



If everything goes smoothly, the ''~sympa/bin/'' directory will contain various Perl programs as well as the ''queue'' binary. You will remark that this binary has the //set-uid-on-exec// bit set (owner is the ''sympa'' user): this is deliberate, and necessary to have Sympa run correctly.





=====  Choosing directory locations =====



All directories are defined either in ''/etc/sympa.conf'' or in ''/etc/wwsympa.conf'' files, which are read by Sympa at runtime. For the default organization of directories, please refer to [[organization#organization|Organization]].



It would, of course, be possible to disperse files and directories to a number of different locations. However, we recommend storing all the directories and files in the ''sympa'' user's login directory.



These directories must be created manually. You can use restrictive authorizations if you like, since only programs running with the ''sympa'' account will need to access them.



======  Robot aliases ======



See [[mail-aliases#robot_aliases|Robot aliases]].





====== Web setup ======

 See [[web-interface#web_server_setup|Web server setup]]



======  Logs ======



Sympa keeps a trace of each of its procedures in its log file. However, this requires configuration of the ''syslogd'' daemon. By default Sympa will use the ''local1'' facility (''syslog'' parameter in ''sympa.conf''). //WWSympa//'s login behavior is defined by the ''log_facility'' parameter in ''wwsympa.conf'' (by default the same facility as Sympa). \\  To this end, a line must be added in the ''syslogd'' configuration file (''/etc/syslog.conf''). For example:



  local1.*       /var/log/sympa



Then reload ''syslogd''.



Depending on your platform, your syslog daemon may use either a UDP or a UNIX socket. Sympa's default is to use a UNIX socket; you may change this behavior by editing ''sympa.conf'''s [[conf-parameters/part2#par-log-socket-type|''log_socket_type'' parameter]]. You can test log feature by using ''testlogs.pl''.



If your system is running syslog-ng, add these lines to your syslog-ng.conf (in some cases, syslog-ng.conf.in):

  destination sympa { file ("/var/log/sympa") ; };

  log { source(src); filter(f_sympa); destination(sympa); };

  filter f_sympa     { facility(local1)  and match('sympa'); };

and restart syslog.



====== What server configuration? ======



Below are some practical informations to help to define your mailing list server configuration.



These figures are based on the CRU mailing list service; it has the following caracteristics:

  * 1100 mailing lists,

  * 290.000 list members

  * some very active and old mailing lists; it explains the size of the web archives.



===== Disk space =====



  * /home/sympa/list_data/ (5Gb): includes 

    * list config files and old list config.xx files

    * a few other small files (msg_count, stats, *.lock)

    * shared documents, when the feature has been actived for one list. This can become huge if list members makes heavy use of this file repository, see <http://www.sympa.org/manual/shared-documents>

  * /home/sympa/spool/ (1Gb): 

  * /home/sympa/bounces (500Mb on our server) ; it contains archived non delivery reports

  * /home/sympa/archive/ (62Gb), but we have a couple of very old and active mailing lists

====== sympa.pl ======



''sympa.pl'' is the main daemon; it processes mail commands and is in charge of messages distribution.



''sympa.pl'' recognizes the following command line arguments:



  * ''<nowiki>--add_list</nowiki> //familyname// <nowiki>--robot</nowiki> //robotname// <nowiki>--input_file</nowiki> ///path/to/list_file.xml//''\\ Adds the list described in the XML file to the //familyname// family. See: [[list-families#adding_a_list_to_a_list_family|Adding a list to a list family]].

  * ''<nowiki>--change_user_email</nowiki> //familyname// <nowiki>--current_email=xx</nowiki> <nowiki>--new_email=yy</nowiki>  ''\\ (introduced in Sympa 6.2) changes a user email address in all lists (membership and ownership) of all virtual robots.  

  * ''<nowiki>--close_family</nowiki> //familyname// <nowiki>--robot</nowiki> //robotname//''\\ Closes the //familyname// family. See: [[list-families#closure|List family closure]].

  * ''<nowiki>--close_list</nowiki> //listname@robot//''\\ Closes the list (changing its status to closed), removes aliases (if ''sendmail_aliases'' parameter was set) and removes subscribers from DB (a dump is created in the list directory to allow the list restoration). When you are in a family context, refer to: [[list-families#closure|List family closure]].

  * ''<nowiki>--close_unknown</nowiki>''\\ When instanciating a family, this option tells Sympa to silently close lists unknown to the family.

  * ''<nowiki>--config</nowiki> //config_file//'' | ''-f //config_file//''\\ Forces Sympa to use an alternative configuration file. The default behavior is to use the configuration file as defined in the ''Makefile'' (''$CONFIG'').

  * ''<nowiki>--create_list</nowiki> <nowiki>--robot</nowiki> //robotname// <nowiki>--input_file</nowiki> ///path/to/list_file.xml//''\\ Creates the list described by the xml file, see: [[list-creation#list_creation_on_command_line_with_sympa.pl|List creation on command line with sympa.pl]].

  * ''<nowiki>--rename_list</nowiki>=oldlist\@domain <nowiki>--new_listname=newlistname</nowiki>  <nowiki>--new_listrobot=newrobot</nowiki> ''\\ Renames list oldlist\@domain to newlistname, or moves it to another robot if <nowiki>--new_listrobot</nowiki> option was different from the current robot.

  * ''<nowiki>--debug</nowiki>'' | ''-d''\\ Sets Sympa in debug mode and keeps it attached to the terminal. Debugging information is output to STDERR, along with standard log information. Each function call is traced. Useful while reporting a bug.

  * ''<nowiki>--dump</nowiki> //listname ''|'' ALL//''\\ Dumps subscribers, either of the list //listname// or of all lists. Subscribers are dumped in ''subscribers.db.dump''.

  * ''<nowiki>--foreground</nowiki>''\\ the process remains attached to the TTY

  * ''<nowiki>--help</nowiki>'' | ''-h''\\ Prints sympa.pl usage.

  * ''<nowiki>--import</nowiki> //listname//''\\ Imports subscribers in the //listname// list. Data are read from STDIN.

  * ''<nowiki>--instantiate_family</nowiki> //familyname// <nowiki>--robot</nowiki> //robotname// <nowiki>--input_file</nowiki> ///path/to/family_file.xml//''\\ Instantiates the family //familyname//. See [[list-families|Lists families]].

  * ''<nowiki>--keepcopy</nowiki> //recipient_directory//'' | ''-k //recipient_directory//''\\ Tells Sympa to keep a copy of every incoming message instead of deleting them. //recipient_directory// is the directory to store messages.

  * ''<nowiki>--lang</nowiki> //catalog//'' | ''-l //catalog//''\\ Set this option to use a language catalog for Sympa. The corresponding catalog file must be located in ''~sympa/locale'' directory.

  * ''<nowiki>--lowercase</nowiki>''\\ Lowercases e-mail addresses in database.

  * ''<nowiki>--mail</nowiki>'' | ''-m''\\ Sympa will log calls to sendmail, including recipients. Useful to keep track of each mail sent (log files may grow faster though).

  * ''<nowiki>--make_alias_file</nowiki>''\\ Creates an aliases file in ''/tmp/'' with all list aliases (only lists whose status is 'open'). It uses the list_aliases.tt2 template.

  * ''<nowiki>--modify_list</nowiki> //familyname// <nowiki>--robot</nowiki> //robotname// <nowiki>--input_file</nowiki> ///path/to/list_file.xml//''\\ Modifies the existing family list, with description contained in the XML file. See: [[list-families#modifying_a_family_list|Modifying a family list]].

  * ''<nowiki>--quiet</nowiki>''\\ When instanciating a family, this option tells Sympa to skip output to STDOUT.

  * ''<nowiki>--reload_list_config</nowiki> <nowiki>--list=mylist@dom</nowiki> ''\\ Recreates all ''configbin'' files. You should run this command if you edit authorization scenarios. The ''list'' parameter is optional.

  * ''service'' //process_command// | //process_message// | //process_creation//\\ Sets Sympa daemon to process only message distribution (process_message) or only commands (process_command) or list creation requests (process_creation).

  * ''<nowiki>--sync_include</nowiki> //listaddress// ''\\ Triggers an update of list members, useful if the list uses external data sources.

  * ''<nowiki>--upgrade</nowiki> <nowiki>--from=X</nowiki> <nowiki>--to=Y</nowiki> ''\\ Runs Sympa maintenance script to upgrade from version X to version Y.

  * ''<nowiki>--version</nowiki>'' | ''-v''\\ Prints current version of Sympa.





====== INIT script ======



The ''make install'' step should have installed a sysV init script in your ''/etc/rc.d/init.d/'' directory (you can change this at ''configure'' time with the ''-with-initdir'' option). You should edit your runlevels to make sure Sympa starts after Apache and MySQL. Note that MySQL should also start before Apache because of ''wwsympa.fcgi''.



This script starts these daemons: ''sympa.pl'', ''bulk.pl'', ''archived.pl'', ''bounced.pl'' and ''task_manager.pl''.



====== Stopping Sympa and signals ======



==== kill -TERM ====



When this signal is sent to ''sympa.pl'' (''kill -TERM''), the daemon is stopped, ending message distribution in progress and this can be long (for big lists). If ''kill -TERM'' is used, ''sympa.pl'' will stop immediately whatever a distribution message is in progress. In this case, when ''sympa.pl'' restarts, messages will be distributed many times.



==== kill -HUP ====



When this signal is sent to ''sympa.pl'' (''kill -HUP''), it switches off the ''-mail'' logging option and continues current task.
====== Upgrading Sympa ======



Sympa upgrade is a relatively riskless operation, mainly because the install process preserves your customizations (templates, configuration, authorization scenarios, ...) and also because Sympa automates a few things (DB update, CPAN modules installation).



Upgrading Sympa means that you follow these steps:



  - [[installing-sympa#obtaining_sympa_related_links|retrieve]] the latest source version of Sympa

  - stop Sympa

  - [[installing-sympa#installing_sympa|install it]] : <code>./configure ; make ; make install</code>

  - run the following command.

<code>sympa.pl --upgrade </code>



And that' it!

This command will perform all the required DB changes (if running MySQL) and will update the configuration files if required.



====== Incompatible changes ======



New features, changes and bug fixes are summarized in the ''NEWS'' file, part of the tar.gz (the ''Changelog'' file is a complete log file of CVS changes).



For example, note that, starting from Sympa 5.3b.4, the minimum version for MySQL is 4.1.



Sympa is a long-term project, so some major changes may need some extra work. The following list consists of well known changes that require some attention:



  * version 5.1 (August 2005) uses XHTML and CSS in web templates;

  * version 4.2b3 (August 2004) introduces TT2 template format;

  * version 4.0a5 (September 2003) changes ''auth.conf'' (no default anymore so you may have the create this file);

  * version 3.3.6b2 (May 2002) the list parameter ''user_data_source'' as a new value include2 which is the recommended value for any list.



The file ''NEWS'' lists all changes and of course, all changes that may require some attention from the installer. As mentioned at the beginning of this file, incompatible changes are preceded by '<nowiki>*****</nowiki>'. While running the ''make install'' Sympa will detect the previously installed version and will prompt you with incompatible changes between both versions of the software. You can interrupt the install process at that stage if you are too frightened. Output of the ''make install'':



<code>

  You are upgrading from Sympa 4.2

  You should read CAREFULLY the changes listed below; they might be incompatible changes:

  <RETURN>



  *****   require new perlmodule XML-LibXML



  *****   You should update your DB structure (automatically performed by Sympa with MySQL), adding the following table (MySQL example):

  *****   CREATE TABLE admin_table (

  *****   list_admin              varchar(50) NOT NULL,

  *****   user_admin              varchar(100) NOT NULL,

  *****   role_admin              enum('listmaster','owner','editor') NOT NULL,

  *****   date_admin              datetime NOT NULL,

  *****   update_admin            datetime,

  *****   reception_admin         varchar(20),

  *****   comment_admin           varchar(150),

  *****   subscribed_admin        enum('0','1'),

  *****   included_admin          enum('0','1'),

  *****   include_sources_admin   varchar(50),

  *****   info_admin              varchar(150),

  *****   profile_admin           enum('privileged','normal'),

  *****   PRIMARY KEY (list_admin, user_admin,role_admin),

  *****   INDEX (list_admin, user_admin,role_admin)

  *****   );



  *****   Extend the generic_sso feature; Sympa is now able to retrieve the user email address in a LDAP directory

  <RETURN>

</code>





====== CPAN modules update ======



The installation of required and optional Perl modules (CPAN) is automatically handled at the ''make'' time. You are asked before each module is installed. For optional modules, associated features are listed.



Output of the ''make'' command:



  Checking for REQUIRED modules:

  ------------------------------------------

  perl module          from CPAN       STATUS

  -----------          ---------       ------

  Archive::Zip         Archive-Zip    OK (1.09   >= 1.05)

  CGI                  CGI            OK (2.89   >= 2.52)

  DB_File              DB_FILE        OK (1.806  >= 1.75)

  Digest::MD5          Digest-MD5     OK (2.20   >= 2.00)

  FCGI                 FCGI           OK (0.67   >= 0.67)

  File::Spec           File-Spec      OK (0.83   >= 0.8)

  IO::Scalar           IO-stringy     OK (2.104  >= 1.0)

  LWP                  libwww-perl    OK (5.65   >= 1.0)

  Locale::TextDomain   libintl-perl   OK (1.10   >= 1.0)

  MHonArc::UTF8        MHonArc        version is too old ( < 2.4.6).

  >>>>>>> You must update ''MHonArc'' to version '''' <<<<<<.

  Setting FTP Passive mode

  Description:

  Install module MHonArc::UTF8 ? n

  MIME::Base64         MIME-Base64    OK (3.05   >= 3.03)

  MIME::Tools          MIME-tools     OK (5.411  >= 5.209)

  Mail::Internet       MailTools      OK (1.60   >= 1.51)

  Regexp::Common       Regexp-Common  OK (2.113  >= 1.0)

  Template             Template-ToolkitOK (2.13   >= 1.0)

  XML::LibXML          XML-LibXML     OK (1.58   >= 1.0)



  Checking for OPTIONAL modules:

  ------------------------------------------

  perl module          from CPAN       STATUS

  -----------          ---------       ------

  Bundle::LWP          LWP            OK (1.09   >= 1.09)

  Constant subroutine CGI::XHTML_DTD redefined at /usr/lib/perl5/5.8.0/constant.pm line 108, <STDIN> line 1.

  CGI::Fast            CGI            CGI::Fast doesn't return 1 (check it).

  Crypt::CipherSaber   CipherSaber    OK (0.61   >= 0.50)

  DBD::Oracle          DBD-Oracle     was not found on this system.

  Description: Oracle database driver, required if you connect to a Oracle database.

  Install module DBD::Oracle ?



====== Database structure update ======



Whatever RDBMS you are using (MySQL, SQLite, Pg, Sybase or Oracle), Sympa will check every database tables and fields. If one is missing, ''sympa.pl'' will not start. If you are using MySQL, Sympa will also check field types and will try to change them (or create them) automatically, assuming that the DB user configured has sufficient privileges. If you are not using MySQL or if the DB user configured in ''sympa.conf'' does have sufficient privileges, then you should change the database structure yourself, as mentioned in the ''NEWS'' file (database structure is describe in the //src/etc/script/// directory of distribution).



Output of Sympa logs :



  Table admin_table created in database sympa

  Field 'comment_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...

  Field comment_admin added to table admin_table

  Field 'date_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...

  Field date_admin added to table admin_table

  Field 'include_sources_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...

  Field include_sources_admin added to table admin_table

  Field 'included_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...

  Field included_admin added to table admin_table

  Field 'info_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...

  Field info_admin added to table admin_table

  Field 'list_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...

  Field list_admin added to table admin_table

  Field 'profile_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...

  Field profile_admin added to table admin_table

  Field 'reception_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...

  Field reception_admin added to table admin_table

  Field 'role_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...

  Field role_admin added to table admin_table

  Field 'subscribed_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...

  Field subscribed_admin added to table admin_table

  Field 'update_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...

  Field update_admin added to table admin_table

  Field 'user_admin' (table 'admin_table' ; database 'sympa') was NOT found. Attempting to add it...

  Setting list_admin,user_admin,role_admin fields as PRIMARY

  Field user_admin added to table admin_table



You might need, for some reason, to make Sympa run the migration procedure from version //X// to version //Y//. This procedure is run automatically by ''sympa.pl -upgrade'' when it detects that ''/data_structure.version'' is older than the current version, but you can also run trigger this procedure yourself:



  sympa.pl --upgrade --from=4.1 --to=5.2





====== Preserving your customizations ======



Sympa comes with default configuration files (templates, scenarios,...) that will be installed in the ''/home/sympa/bin'' directory. If you need to customize some of them, you should copy the file first in a safe place, i.e. in the ''/home/sympa/etc'' directory. If you do so, the Sympa upgrade process will preserve your site customizations.





====== Running two Sympa versions on a single server ======



This can be very convenient to have a stable version of Sympa and a fresh version for test purpose, both running on the same server.



Both Sympa instances must be completely partitioned, unless you want the make production mailing lists visible through the test service.



The biggest part of the partitioning is achieved while running the ''./configure''. Here is a sample call to ''./configure'' on the test server side:



  ./configure --prefix=/home/sympa-dev \

              --with-confdir=/home/sympa-dev/etc \

              --with-mandir=/home/sympa-dev/man \

              --with-initdir=/home/sympa-dev/init \

  	    --with-piddir=/home/sympa-dev/pid

              --with-lockdir=/home/sympa-dev/lock \

              --with-sendmail_aliases=/home/sympa-dev/etc/sympa_aliases



You can also customize more parameters via the ''/home/sympa-dev/etc/sympa.conf'' file.



If you wish to share the same lists in both Sympa instances, then some parameters should have the same value : ''home'', ''db_name'', ''arc_path''.







====== Moving to another server ======



If you're upgrading and moving to another server at the same time, we recommend you first to stop the operational service, move your data and then upgrade Sympa on the new server. This will guarantee that Sympa upgrade procedures have been applied on the data.



The migration process requires that you move the following data from the old server to the new one:



  * the user database. If using MySQL you can probably just stop ''mysqld'' and copy the ''/var/lib/mysql/sympa/'' directory to the new server;

  * the ''/home/sympa/list_data'' directory that contains list config;

  * the  directory that contains the spools;

  * the  directory ''/etc/sympa.conf'' and ''wwsympa.conf''. Sympa new installation creates a file ''/etc/sympa.conf'' (see [[conf-parameters|sympa.conf parameters]]) and randomly initializes the cookie parameter. Changing this parameter will break all passwords. When upgrading Sympa on a new server, take care that you start with the same value of this parameter, otherwise you might have problems!

  * the web archive.



In some cases, you may want to install the new version and run it for a few days before switching the existing service to the new Sympa server. In this case, perform a new installation with an empty database and play with it. When you decide to move the existing service to the new server:



  - stop all sympa processes on both servers;

  - transfer the database;

  - edit the ''/data_structure.version'' on the new server; change the version value to reflect the old number;

  - start "sympa.pl -upgrade", it will upgrade the database structure according to the hop you do.
====== Mail aliases ======



Mail aliases are required in Sympa for ''sympa.pl'' to receive mail commands and list messages. Management of these aliases will depend on the MTA (''sendmail'', ''qmail'', ''postfix'', ''exim'') you are using, where you store aliases and whether you are managing virtual domains or not.



====== SMRSH ======



If using ''sendmail'', maybe it is configured to use the secured shell ''smrsh''. 

<code>

# grep smrsh /etc/mail/sendmail.mc

FEATURE(`smrsh', `/usr/sbin/smrsh')dnl

</code>



Smrsh obliges you to copy all the programs that are called from the mail aliases into the dedicated ''/etc/smrsh'' directory. Therefore you will have to tell Sympa that binaries should be installed in the ''/etc/smrsh'' directory. This can be performed via the ''--with-bindir'' option of sympa’s ''configure'':

  ./configure --with-bindir=/etc/smrsh



====== Robot aliases ======



An electronic list manager such as Sympa is built around two processing steps.



  * A message sent to a list or to Sympa itself (commands such as subscribe or unsubscribe) is received by the SMTP server. When receiving the message, the SMTP server runs the ''queue'' program (supplied in this package) to store the message in a spool.

  * The ''sympa.pl'' daemon, set in motion at system startup, scans this spool. As soon as it detects a new message, it processes it and performs the requested action (distribution or processing of a command).



To separate the processing of commands (subscription, unsubscription, help requests, etc.) from the processing of messages destined to mailing lists, a special mail alias is reserved for administrative requests, so that Sympa can be permanently accessible to users. The following lines must therefore be added to the ''sendmail'' alias file (often ''/etc/aliases'').



<code>

  sympa: "| /home/sympa/bin/queue sympa@my.domain.org"

  listmaster: "| /home/sympa/bin/queue listmaster@my.domain.org"

  bounce+*: "| /home/sympa/bin/bouncequeue sympa@my.domain.org"

  abuse-feedback-report: "| /home/sympa/bin/bouncequeue sympa@my.domain.org"

  sympa-request: postmaster

  sympa-owner: postmaster

</code>



Note: If you run Sympa virtual hosts, you will need one ''sympa'' alias entry per virtual host (see [[virtual-hosts|Virtual host]]).



''sympa-request'' should be the address of the robot administrator, i.e. a person who manages Sympa (here ''postmaster(@)renater.fr'').



''sympa-owner'' is the return address for Sympa error messages.



The alias bounce+* is dedicated to collect bounces where VERP (variable envelope return path) was active. It is useful if ''welcome_return_path unique'' or ''remind_return_path unique'' or the ''verp_rate'' parameter is not null for at least one list.



The alias ''abuse-feedback-report'' is used for processing automatically feedback that respect ARF format (Abuse Report Feedback), which is a draft to specify how end users can complain about spam. It is mainly used by AOL.



Don not forget to run ''newaliases'' after any change to the ''/etc/aliases'' file!



Note: Aliases based on ''listserv'' (in addition to those based on ''sympa'') can be added for the benefit of users accustomed to the ''listserv'' and ''majordomo'' names. For example:



  listserv:          sympa

  listserv-request:  sympa-request

  majordomo:         sympa

  listserv-owner:    sympa-owner





====== List aliases ======



For each new list, it is necessary to create up to six mail aliases (at least three). If you managed to setup the alias manager (see [[mail-aliases#alias_manager|Alias manager]]), then Sympa will install automatically the following aliases for you.



For example, to create the ''mylist'' list, the following aliases must be added:



<code>

  mylist:               |/home/sympa/bin/queue mylist@my.domain.org

  mylist-request:       |/home/sympa/bin/queue mylist-request@my.domain.org

  mylist-editor:        |/home/sympa/bin/queue mylist-editor@my.domain.org

  mylist-owner:         |/home/sympa/bin/bouncequeue mylist@my.domain.org

  mylist-subscribe:     |/home/sympa/bin/queue mylist-subscribe@my.domain.org

  mylist-unsubscribe:   |/home/sympa/bin/queue mylist-unsubscribe@my.domain.org

</code>



The address ''mylist-request'' should correspond to the person responsible for managing ''mylist'' (the owner). Sympa will forward messages sent to ''mylist-request'' to the owner of ''mylist'', as defined in the ''/home/sympa/list_data/mylist/config'' file. Using this feature means you will not need to modify the alias file if the list owner were to change.



Similarly, the address ''mylist-editor'' can be used to contact the list editors, if defined in ''/home/sympa/list_data/mylist/config''. This address definition is not compulsory.



The address ''mylist-owner'' is the address receiving non-delivery reports (note that the ''-owner'' suffix can be customized, see [[manual:conf-parameters:part3#return_path_suffix|return path suffix]]. The ''bouncequeue'' program stores these messages in the ''queuebounce'' directory. [[web-interface|WWSympa]] may then analyze them and provide a web access to them.



The address ''mylist-subscribe'' is an address enabling users to subscribe in a manner which can easily be explained to them. Beware: subscribing this way is so straightforward that you may find spammers subscribing to your list by accident.



The address ''mylist-unsubscribe'' is the equivalent for unsubscribing. By the way, the easier it is for users to unsubscribe, the easier it will be for you to manage your list!







====== Alias manager ======



The ''alias_manager.pl'' script does aliases management. It is run by [[web-interface|WWSympa]] and will install aliases for a new list and delete aliases for closed lists. To use a different alias management tool (''ldap_alias_manager.pl'' for example), you should edit the ''alias_manager'' sympa.conf parameter (see [[manual:conf-parameters:part2#alias_manager]]).



The script expects the following arguments :



  - ''add'' | ''del''

  - ''<''list name''>''

  - ''<''list domain''>''



Example:



<code>

  /home/sympa/bin/alias_manager.pl add mylist renater.fr

</code>



''/home/sympa/bin/alias_manager.pl'' works on the alias file as defined in ''sympa.conf'' with the ''sendmail_aliases'' variable (default is ''/etc/mail/sympa_aliases'', inherited from ''Constants.pm'').



You must refer to this aliases file in your ''sendmail.mc'' (if using sendmail):

<code>

  define(`ALIAS_FILE', `/etc/aliases,/etc/mail/sympa_aliases')dnl

</code>

If using postfix: edit /etc/postfix/main.cf:

<code>

alias_maps = hash:/etc/aliases,hash:/etc/mail/sympa_aliases

alias_database = hash:/etc/aliases,hash:/etc/mail/sympa_aliases

</code>

and chown the files ''/etc/mail/sympa_aliases'' and ''/etc/mail/sympa_aliases.db'' as the sympa user.



Note that ''sendmail'' has requirements regarding the ownership and rights on both ''sympa_aliases'' and ''sympa_aliases.db'' files (the later being created by sendmail via the ''newaliases'' command). Anyhow, these two files should be located in a directory, every path component of which being owned by and writable only by the root user.



''/home/sympa/bin/alias_manager.pl'' runs a ''newaliases'' command (via ''aliaswrapper''), after any changes to aliases file. With Postfix, ''newaliases'' will create the alias file databases given with ''alias_database'' and uses all the aliases given with ''alias_maps'' – this is why above we add two lines into ''main.cf''.



If you manage virtual domains with your mail server, then you might want to change the form of aliases used by the alias manager. You can customize the ''list_aliases'' template that is parsed to generate list aliases (see [[list-definition#list_aliases.tt2|list_aliases.tt2]]).



Note that you do not need alias management if you use MTA functionalities such as Postfix' ''virtual_transport''. Then you can disable alias management in Sympa by positioning the ''sendmail_aliases'' parameter to ''none''.



Ludovic Marcotte has written a version of ''ldap_alias_manager.pl'' that is LDAP enabled. This script is distributed with Sympa distribution. The script has later been extended by Philippe Baumgart, British Telecom. You can customize the LDAP parameteres via the ''ldap_alias_manager.conf'' file.



====== Virtual domains ======



When using virtual domains with ''sendmail'' or ''postfix'', you can not refer to ''mylist@my.domain.org'' on the right-hand side of a ''/etc/aliases'' entry. You need to define an additional entry in a virtual table. You can also add a unique entry, with a regular expression, for your domain.



With Postfix, you should edit the ''/etc/postfix/virtual.regexp'' file as follows:



<code>

  /^(.*)@my.domain.org$/ my.domain.org-$1

</code>



Entries in the 'aliases' file will look like this:



<code>

  my.domain.org-sympa:                                /home/sympa/bin/queue

  sympa@my.domain.org  .....  my.domain.org-listA:    /home/sympa/bin/queue listA@my.domain.org

</code>



With Sendmail, add the following entry to ''/etc/mail/virtusertable'' file:



<code>

  @my.domain.org my.domain.org-%3

</code>



====== Internal mail routing ======



If your Sympa server does virtual hosting, then it needs to perform mail routing internally. Here is how mail routing is handled :

  - incoming messages are spooled with a file name (and a X-Sympa-To SMTP header) that corresponds to the ''queue'' program parameter defined in the mail aliases ;

  - when processed by the ''sympa.pl'' process, Sympa determines the current virtual host by comparing the domain part of the file name with the ''domain'' parameter defined in the ''sympa.conf'' or in the ''robot.conf'' files of each virtual host.



Therefore you should ensure that the domain used as a parameter to the ''queue'' program in mail aliases corresponds to the ''domain'' configuration parameter of the virtual host.
====== sympa.conf parameters ======



The ''/etc/sympa.conf'' configuration file contains numerous parameters which are read on start-up of Sympa. If you change this file, do not forget that you will need to restart Sympa afterwards.



The ''/etc/sympa.conf'' file contains directives in the following format:



//keyword value//



Comments start with the ''#'' character at the beginning of a line. Empty lines are also considered as comments and are ignored. There should only be one directive per line, but their order in the file is of no importance.



{{page>toc}}



====== sympa.conf parameters part 1 ======





The ''/etc/sympa.conf'' configuration file contains numerous parameters which are read on start-up of Sympa. If you change this file, do not forget that you will need to restart Sympa afterwards.



The ''/etc/sympa.conf'' file contains directives in the following format:



//keyword value//



Comments start with the ''#'' character at the beginning of a line. Empty lines are also considered as comments and are ignored. There should only be one directive per line, but their order in the file is of no importance.



Also see: \\

[[manual/conf-parameters/index|sympa.conf parameters index]]\\

[[manual/conf-parameters/part2|sympa.conf parameters part 2]]\\

[[manual/conf-parameters/part3|sympa.conf parameters part 3]]\\





======  Site customization ======



===== domain =====



This parameter used to ba named ''host''.



This keyword is **mandatory**. It is the domain name used in the ''From:'' header of mail sent by the Sympa engine. So the SMTP engine (qmail, sendmail, postfix or whatever) must recognize this domain as a local address. This parameter is also the default domain for the mailing lists and is used for mail routing internaly in Sympa if you have defined virtual hosts. Note that a list domain be changed on a per-list basis (see ''host'' parameter). 



Example: <code>domain lists.my.tld</code>





===== email =====



(Default value: ''sympa'')



Username (the part of the address preceding the ''@'' sign) used in the ''From:'' header in replies to administrative requests.



Example: <code>email listserv</code>



===== email_gecos =====



Developped in Sympa 6.2



(Default value: ''SYMPA'')



Defines the gecos used in the From SMTP header field of service messages sent by Sympa.



===== listmaster =====



The list of the email addresses of the listmasters (users authorized to perform global server commands). Listmasters can be defined for each virtual host.



Example: <code>listmaster postmaster@renater.fr,root@renater.fr</code>





===== listmaster_email =====



(Default value: ''listmaster'')



Username (the part of the address preceding the @ sign) used in the listmaster email. This parameter is useful if you want to run more than one sympa on the same host (a sympa test for example).



If you change the default value, you must modify the sympa aliases too.



For example, if you put:



<code>listmaster_email listmaster-test</code>



you must modify the sympa aliases like this:



<code>listmaster-test: | /home/sympa/bin/queue listmaster@my.domain.org</code>



See [[manual:mail-aliases#robot_aliases|Robot aliases]] for all aliases.







===== wwsympa_url =====



(Default value: ''<nowiki>http://your.host/sympa</nowiki>'')



This is the root URL of the Sympa web interface. This parameter is used to construct URLs while sending notification emails to users.



Example: <code>wwsympa_url https://my.server/sympa</code>





===== soap_url =====



This is the root URL of Sympa's SOAP server. Sympa's WSDL document refers to this URL in its service section.



Example: <code>soap_url http://my.server/sympasoap</code>



===== max_wrong_password =====



default : 19 



This parameter is the count limit (integer) of wrong password submition. If this limit is reached, the account is locked until the user renew his password. The default value is choosen in order to block bots trying to log in using brut force strategy. This value should never be reached by real users that will probably uses the renew password service before he performs so many tries. 





===== spam_protection javascript | at | none =====



(Default value: ''javascript'')



There is a need to protect Sympa website against spambot which collect email addresses in public websites. Description of the supported values:



  * javascript: the address is hidden using a javascript. Users who enable Javascript can see nice mailto addresses where others have nothing.

  * at: the "@" char is replaced by the string  "AT".

  * none: no protection against spammers.



===== web_archive_spam_protection javascript | at | none | cookie =====



(Default value: ''cookie'')



The same as ''spam_protection'', but restricted to the web archive. An additional value is available: ''cookie'', which means that users must submit a small form in order to receive a cookie before browsing the web archive. This block all robots, including search engine robots.





===== color_0, color_1, ..., color_15 =====



They are the color definition parameters for the web interface. These parameters can be overwritten in each virtual host definition. Colors are used in the CSS files and unfortunately they are also in use in some web templates. The sympa admin interface shows all colors in use.



To know the exact role of each color_x parameter please consult [[manual:customizing#sympa_colors_customization_guide|the color customization guide]].



===== Obsolete color parameters =====



A few color parameters were used in the past for color definition of the web interface: 

''dark_color'', ''light_color'', ''text_color'', ''bg_color'', ''error_color'', ''selected_color'', ''shaded_color''. 



These parameters are not used in version 5.1 and higher anymore, but still available in ''style.css'', ''print.css'', ''print-preview.css'' and ''fullPage.css''.



__Note:__ light_color is still used for the header color of the New lists presentation array.



===== logo_html_definition =====



This parameter allows you to insert in the upper left corner of the page a piece of HTML code, usually to insert a logo in the page. This is a very basic but easy customization. Example: <code>logo_html_definition <a href="http://www.mycompany.com"><img style="float: left; margin-top: 7px; margin-left: 37px;" src=''http:/logos/mylogo.jpg'' alt="my company" /></a></code>



===== favicon_url =====



Added in Sympa 6.2



This parameter allows you to customized the favicon used by Sympa web interface. This parameter can be defined for a robot.





===== main_menu_custom_button =====



You may modify the main menu content by editing the menu.tt2 file but you can also edit the following robot parameters in order to add up to 3 button. each button is defined by a title (the text in the button), an URL and optionnaly a target.



  * main_menu_custom_button_1_title

  * main_menu_custom_button_1_url

  * main_menu_custom_button_1_target



Replace digit 1 by 2 or 3 for the second and third custom button. 



example :

<code>

  main_menu_custom_button_1_title faq



  main_menu_custom_button_1_url http://www.renater.fr/faq/universalistes/index



  main_menu_custom_button_1_target help

</code>



===== css_path =====



Pre-parsed CSS files (let's say static CSS files) can be installed using the Sympa server skin module. These CSS files are installed in a part of the web server that can be reached without using the Sympa web engine. In order to do this, edit the ''robot.conf'' file and set the ''css_path'' parameter. Then restart the server and use the skin module from the "Admin sympa" page to install preparsed CSS file. In order to replace dynamic CSS files by these static files, set the ''css_url'' parameter.

The server admin module includes a CSS administration page. By pushing the "Install static css" button in this page, you create the CSS files in the folder whose path is contained by the ''css_url'' parameter.



**After an upgrade, ''sympa.pl'' automatically updates the static CSS files with the newly installed ''css.tt2''. Therefore, this is not a good place to store customized CSS files.**





===== css_url =====



By default, CSS files ''style.css'', ''print.css'', ''print-preview.css'' and ''fullPage.css'' are delivered by the Sympa web interface itself using a Sympa action named ''css''. URLs look like <nowiki>''http://foo.org/sympa/css/style.css''</nowiki>. CSS files are built by parsing a template named ''css.tt2''. This allows dynamic definition of colors, and in a near future a complete definition of the skin, user preference skins, etc.



In order to make Sympa web interface faster, it is strongly recommended to install static CSS files somewhere in your website. This way, Sympa will deliver only one page instead of one page and four CSS files at each click. This can be done using the ''css_url'' parameter. The parameter must contain the URL of the directory where ''style.css'', ''print.css'', ''print-preview.css'' and ''fullPage.css'' are installed. You can make your own sophisticated new skin by editing these files.



If you want to use the Sympa color parameters inside a static CSS file, you must do two things :



  - define an alias in your Apache configuration that associates the content of the folder whose path is stored in the [[:manual:conf-parameters:part1#css_path|css_path]] parameter to the URL specified in [[:manual:conf-parameters:part1#css_url|css_url]];

  - use the Skins administration page after you changed colors in your configuration file to generate the static CSS files.





===== static_content_path =====



(Default value : ''{Sympa install directory}/static-content'')



Some content may be delivered by the HTTP server (Apache) without any need to be controlled or parsed by Sympa. It is stored in the directory chosen through the ''static_content_dir'' parameter. The current Sympa version stores subscribers' pictures in this directory. Later updates will add stylesheets, icons, ... The directory is created by ''sympa.pl'' when started. This parameter can be defined also in ''robot.conf''.



===== static_content_url =====



(Default value : ''/static-sympa'')



Content stored in the directory specified by parameter ''static_content_url'' must be served by the HTTP server under the URL specified by ''static_content_url''. Check Apache configuration in order to make this directory available. This parameter can be defined in ''robot.conf''.



===== pictures_feature =====



(Default value: ''off'') 



Example: <code>pictures_feature on</code>



Subscribers can upload their picture (from the 'Subscriber option' page) to use as an avatar so that reviewing subscribers shows a gallery. This parameter defines the default for corresponding list parameter but it does NOT allow to disable the feature overall. If you want to disable the feature for your entire site, you need to customize the ''edit-list.conf'' file to deny editing of the corresponding list parameter.



Pictures are stored in a directory specified by the ''static_content_path'' parameter.



===== pictures_max_size =====



The maximum size of the uploaded avatar file (bytes).



===== cookie =====



This string is used to generate MD5 authentication keys. It allows generated authentication keys to differ from a site to another. It is also used for reversible encryption of user passwords stored in the database. The presence of this string is one reason why access to ''sympa.conf'' needs to be restricted to the ''sympa'' user.



Note that changing this parameter will break all HTTP cookies stored in users' browsers, as well as all user passwords and lists X509 private keys. To prevent a catastrophe, ''sympa.pl'' refuses to start if the ''cookie'' parameter was changed.



Example: <code>cookie gh869jku5</code>



===== create_list =====



(Default value: ''public_listmaster'')



The ''create_list'' parameter is defined by an authorization scenario (see [[manual:authorization-scenarios#authorization_scenarios|Authorization scenarios]]).



Defines who can create lists (or request list creations). Sympa will use the corresponding authorization scenario.



Example: <code>create_list intranet</code>



===== automatic_list_feature =====



(Default value: ''off"''



Example: <code>automatic_list_feature on</code>



If set to ''on'', Sympa will enable automatic list creation through family instantiation (see [[manual:list-families#automatic_list_creation|Automatic list creation]]).



===== automatic_list_creation =====



(Default value: ''none'')



The ''automatic_list_creation'' parameter is defined by an authorization scenario (see [[manual:authorization-scenarios#authorization_scenarios|Authorization scenarios]]).



If ''automatic_list_feature'' is activated, this parameter (corresponding to an authorization scenario) defines who is allowed to use the automatic list creation feature.



===== automatic_list_removal =====



(Default value: '''')



Example: <code>automatic_list_feature if_empty</code>



If set to ''if_empty'', then Sympa will remove automatically created mailing lists just after their creation, if they contain no list member (see [[manual:list-families#automatic_list_creation|Automatic list creation]]).



===== automatic_list_families =====



(Default value: '''')



Example: <code>automatic_list_families  name=family_one:prefix=f1:display=My automatic lists:prefix_separator=+:classes separator=-:family_owners_list=alist@domain.tld;name=family_two:prefix=f2:display=My other automatic lists:prefix_separator=+:classes separator=-:family_owners_list=anotherlist@domain.tld;</code>



This parameter is used to define the families used in [[:manual:list-families#user-friendly_automatic_lists|user-friendly automatic lists]].



It is a character string structured as follows:



  * each family is separated from the other by a semi-column (;)

  * inside a family definition, each field is separated from the other by a column (:)

  * each field has the structure: ''<field name>=<filed value>''



There are no contraint on the field names. They are used in the ''automatic_list_request.tt2'' file. You can cutomize it as you wish.



Basically, each time Sympa uses the automatic lists families, the values defined in this parameter will be available in the family object.



For example, in the example above, you can access the "name" sub-parameter whoes value is "family_one" in templates and scenari in Sympa using:



  * for scenari: [family->name]

  * for templates: [ 0.000000amily.name %]



===== global_remind =====



(Default value: ''listmaster'')



The ''global_remind'' parameter refers to an authorization scenario (see [[manual:authorization-scenarios#authorization_scenarios|Authorization scenarios]]).



Defines who can run a ''REMIND *'' command.



===== allow_subscribe_if_pending =====



(Default value: ''on'')



If set to "off", it is forbidden to add subscribers (through wwsympa) to a list whose status is different from "open".



===== custom_robot_parameter =====



(No default value)



This is a free parameter, a placeholder for data you need to use and are not already present in your Sympa config. As of 6.1, you have only one parameter, but we want to change the code so that you can have as much values as you want for this parameter. That's the reason why the format for this parameter is kind of weird: it is a composite of a parameter name and a parameter value, separated by a semicolon.



==== Example: ====



Add this line to your sympa.conf

<code>

custom_robot_parameter          param_name ; param_value

</code>



You will be able to access the custom parameter value in web templates by using this tag:



<code>

[ onf.custom_robot_parameter.param_name %]

</code>
====== sympa.conf parameters part 2 ======



Also see: \\

[[manual/conf-parameters/index|sympa.conf parameters index]]\\

[[manual/conf-parameters/part1|sympa.conf parameters part 1]]\\

[[manual/conf-parameters/part3|sympa.conf parameters part 3]]\\





======  Directories ======



===== home =====



(Default value: ''''/home/sympa/list_data'''')



The directory whose subdirectories correspond to the different lists.



Example: home /home/sympa/list_data



===== etc =====



(Default value: ''/home/sympa/etc'')



This is the local directory for configuration files (such as ''edit_list.conf''. It contains 5 subdirectories:

  * ''scenari'' for local authorization scenarios;

  * ''mail_tt2'' for the site's local mail templates and default list templates;

  * ''web_tt2'' for the site's local HTML templates;

  * ''global_task_models'' for local global task models;

  * ''list_task_models'' for local list task models.



Example: <code>etc /home/sympa/etc</code>



======  System related ======



===== syslog =====



(Default value: ''LOCAL1'')



Name of the sub-system (facility) for logging messages.



Example: <code>syslog LOCAL2</code>



===== log_level =====



(Default value: ''0'')



This parameter sets the verbosity of Sympa processes (including) in log files. With level ''0'' only main operations are logged, in level ''3'' almost everything is logged.



Example: <code>log_level 2</code>



===== log_socket_type =====



(Default value: ''unix'')



Sympa communicates with ''syslogd'' using either UDP or UNIX sockets. Set ''log_socket_type'' to ''inet'' to use UDP, or ''unix'' for UNIX sockets.



===== pidfile =====



(Default value: ''/home/sympa/etc/sympa.pid'')



The file where the ''sympa.pl'' daemon stores its process number. Warning: the ''sympa'' user must be able to write to this file, and to create it if it does not exist.



Example: <code>pidfile /var/run/sympa.pid</code>



===== pidfile_creation =====



(Default value: ''/home/sympa/etc/sympa-creation.pid'')



The file where the automatic list creation dedicated ''sympa.pl'' daemon stores its process number. Warning: the ''sympa'' user must be able to write to this file, and to create it if it does not exist.



Example: <code>pidfile_creation /var/run/sympa-creation.pid</code>



===== umask =====



(Default value: ''027'')



Default mask for file creation (see umask). Note that it will be interpreted as an octual value.



Example: <code>umask 007</code>



======  Sending related ======



===== distribution_mode =====



(Default value: ''single'')



Use this parameter to determine whether your installation runs only one ''sympa.pl'' daemon that processes both messages to distribute and commands (single), or if ''sympa.pl'' will fork to run two separate processes, one dedicated to message distribution and one dedicated to commands and message pre-processing (fork). The second choice makes a better priority processing for message distribution and faster command response, but it requires a bit more computer resources.



Example: <code>distribution_mode fork</code>



===== maxsmtp =====



(Default value: ''20'')



Maximum number of SMTP delivery child processes spawned by Sympa. This is the main load control parameter.



Example: <code>maxsmtp 500</code>



===== log_smtp =====



(Default value: ''off'')



Set logging of each MTA call. Can be overwritten by ''-m'' sympa option.



Example: <code>log_smtp on</code>



===== use_blacklist =====



(Default value: ''send,create_list"'')



Sympa provides a blacklist feature available for list editors and owners. The ''use_blacklist'' parameter defines which operations use the blacklist. Search in blacklist is mainly useful for the ''send'' service (distribution of a message to the subscribers). You may use blacklist for other operations such as review, archive, etc., but be aware that those web services need fast response and blacklist may require some resources.



If you do not want blacklist at all, define ''use_blacklist'' to ''none'' so that the user interface to manage blacklist will disappear from the web interface.



Sympa black list uses scenario. See [[:manual:authorization-scenarios#blacklist_implicit_rule|blacklist implicit rule]]



===== reporting_spam_script_path =====



This  parameter can be set to some local script. In that case list editor can report undetected spams in web interface for list moderation. Then messages are flushed in this script stdin.  



===== max_size =====



(Default value: ''5 Mb'')



Maximum size (in bytes) allowed for messages distributed by Sympa. This may be customized per virtual host or per list by setting the ''max_size'' robot or list parameter.



Example: <code>max_size 2097152</code>



===== misaddressed_commands =====



(Default value: ''reject'')



When a robot command is sent to a list, by default Sympa rejects this message. This feature can be turned off setting this parameter to ignore.





===== misaddressed_commands_regexp =====



(Default value: ''(subscribe|unsubscribe|signoff)'')



This is the Perl regular expression applied on messages subject and body to detect misaddressed commands, see [[#misaddressed_commands|misaddressed_commands parameter]].





===== nrcpt =====



(Default value: ''25'')



Maximum number of recipients per ''sendmail'' call. This grouping factor makes it possible for the (''sendmail'') MTA to optimize the number of SMTP sessions for message distribution. If needed, you can limit the number of recipients for a particular domain. Check the ''nrcpt_by_domain'' configuration file (see [[manual:organization#nrcptbydomain|nrcpt_by_domain]]).





===== avg =====



(Default value: ''10'')



Maximum number of different Internet domains within addresses per ''sendmail'' call.







===== alias_manager =====



(Default value: ''/home/sympa/bin/alias_manager.pl'')



The absolute path to the script that will add/remove mail aliases, see [[manual:mail-aliases]]. 



Example: <code>alias_manager /home/sympa/bin/ldap_alias_manager.pl</code>



===== sendmail =====



(Default value: ''/usr/sbin/sendmail'')



Absolute path to SMTP message transfer agent binary. Sympa expects this binary to be sendmail compatible (postfix, Qmail and Exim binaries all provide sendmail compatibility).



Example: <code>sendmail /usr/sbin/sendmail</code>



===== sendmail_args =====



(Default value: ''-oi -odi -oem'')



Arguments passed to the SMTP message transfer agent.



===== sendmail_aliases =====



(Default value: ''defined by makefile, sendmail_aliases | none'')



Path of the alias file that contains all list related aliases. It is recommended to create a specific alias file so that Sympa never overwrites the standard alias file, but only a dedicated file. You must refer to this aliases file in your ''sendmail.mc'': set this parameter to ''none'' if you want to disable alias management in Sympa (e.g. if you use ''virtual_transport'' with Postfix).



===== rfc2369_header_fields =====



(Default value: ''help,subscribe,unsubscribe,post,owner,archive'')



RFC2369 compliant header fields (List-xxx) to be added to distributed messages. These header fields should be implemented by MUA's, adding menus.



Starting with version 6.2, Sympa also adds Archived-At SMTP header field, as defined in RFC 5064.



===== remove_headers =====



(Default value: ''Return-Receipt-To,Precedence,X-Sequence,Disposition-Notification-To'')



This is the list of SMTP headers fields that Sympa should remove from incoming messages. Use it, for example, to ensure some privacy for your users by discarding anonymous options. An equivalent parameter can be set in list configuration files. The removal of these header fields is applied before Sympa adds his own header fields (''rfc2369_header_fields'' and ''custom_header'').



Example: <code>remove_headers Resent-Date,Resent-From,Resent-To,Resent-Message-Id,Sender,Delivered-To"</code>





===== remove_outgoing_headers =====



(Default value: ''none'')



You can define a comma-separated list of SMTP header fields that you wish Sympa to remove from outgoing headers. An equivalent parameter can be set in list configuration files. The removal happens after Sympa's own header fields are added ; therefore, it is a convenient way to remove Sympa's own header fields (like ''X-Loop'' or ''X-No-Archive'') if you wish.



Example: <code>remove_outgoing_headers X-no-archive"</code>



===== reject_mail_from_automates_feature =====



(Default value: ''on'')



Sympa can be configured to reject messages that seem to be from an automates, based on the From header field value (see [[manual:conf-parameters:part3#loop_prevention_regex]]) and other SMTP header fields (Content-Identifier, Auto-Submitted). Note that you can disable this feature at a list level too, see [[manual:parameters-sending#reject_mail_from_automates_feature]].



Example: <code>reject_mail_from_automates_feature off</code>



===== ignore_x_no_archive_header_feature =====



(Default value: ''off'')



Sympa's default behavior is to skip archiving of incoming messages that have an ''X-no-archive'' SMTP header filed set. The ''ignore_x_no_archive_header_feature'' parameter allows to change this behavior.



Example: <code>ignore_x_no_archive_header_feature on</code>





===== anonymous_headers_fields =====



(Default value:\\ ''Sender,X-Sender,Received,Message-id,From,X-Envelope-To,Resent-From,Reply-To,Organization,Disposition-Notification-To,X-Envelope-From,X-X-Sender'')



This parameter defines the list of SMTP header fields that should be removed when a mailing list is setup in anonymous mode (see [[manual:parameters-sending#anonymous_sender|anonymous_sender]]).





===== list_check_smtp =====



(Default value: ''NONE'')



If this parameter is set with a SMTP server address, Sympa will check if alias with the same name as the list you are creating already exists on the SMTP server. It is robot specific, i.e. you can specify a different SMTP server for every virtual host you are running. This is needed if you are running Sympa on somehost.foo.org, but you handle all your mail on a separate mail relay.



===== list_check_suffixes =====



(Default value: ''request,owner,unsubscribe'')



This parameter is a comma-separated list of admin suffixes you are using for Sympa aliases, i.e. ''mylist-request'', ''mylist-owner'', etc. This parameter is used with the ''list_check_smtp'' parameter. It is also used to check list names at list creation time.



===== urlize_min_size =====



(Default value: ''10240'')



This parameter is related to the ''URLIZE'' subscriber delivery mode; it defines the minimum size (in bytes) for MIME attachments to be urlized.



====== Bulk mailer ======



===== pidfile_bulk =====



//Default: <default_pid_dir>/bulk.pid//



The location in which the bulk.pl pidfile is created.



===== sympa_packet_priority =====



// Default: 5//



The default priority set to a packet to be sent by the bulk.



===== bulk_fork_threshold =====



// Default: 1//



The minimum number of packets in database before the bulk forks to increase sending rate.



===== bulk_max_count =====



// Default: 3//



The max number of bulks that will run on the same server.



===== bulk_lazytime =====



// Default: 600//



The number of seconds a slave bulk will remain running without processing a message before it spontaneously dies.



===== bulk_wait_to_fork =====



// Default: 10//



The number of seconds a master bulk waits between two packets number checks.



====== Quotas ======





===== default_shared_quota =====



The default disk quota (the unit is Kbytes) for lists' document repositories.



===== default_archive_quota =====



The default disk quota (the unit is Kbytes) for lists' web archive.



====== Spool related ======



===== spool =====



(Default value: ''/home/sympa/spool'')



The parent directory which contains all the other spools.



===== queue =====



The absolute path of the directory which contains the queue, used both by the ''queue'' program and the ''sympa.pl'' daemon. This parameter is mandatory.



Example: <code>/home/sympa/spool/msg</code>



===== queuebounce =====



(Default value: ''/home/sympa/spool/bounce'')



This parameters value contains the full path to the spool for bounces (non-delivery reports).



Any message addressed to the ''mylist-owner'' (unless this suffix was customized) or ''bounce+*'' addresses (when using VERP) are transmitted by the incoming MTA to the ''bouncequeue'' program. 



This program will then put the messages into the directory defined by ''queuebounce''.



This parameter must be an absolute path.



**Warning:** this parameter must not be mistaken with [[:manual:web-interface#bounce_path]] which defines the directory where the last bounce message for each list member is kept for consultation purpose.





===== queueautomatic =====



(Default value: ''none'')



The absolute path of the directory which contains the queue for automatic list creation, used by both the ''familyqueue'' program and the ''sympa.pl'' daemon. This parameter is mandatory when enabling ''automatic_list_creation''.



Example: <code>/home/sympa/spool/msg</code>



<if manual_version <= 6.3>

===== queuedistribute =====



(Default value: ''/home/sympa/spool/distribute'')



This parameter is optional and retained solely for backward compatibility.



===== queuemod =====



(Default value: ''/home/sympa/spool/moderation'')



This parameter is optional and retained solely for backward compatibility.



===== queuedigest =====



This parameter is optional and retained solely for backward compatibility.



===== queueauth =====



(Default value: ''/home/sympa/spool/auth'')



This parameter is optional and retained solely for backward compatibility.



===== queueoutgoing =====



(Default value: ''/home/sympa/spool/outgoing'')



This parameter is optional and retained solely for backward compatibility.



===== queuetopic =====



(Default value: ''/home/sympa/spool/topic'')



This parameter is optional and retained solely for backward compatibility.







===== queuetask =====



(Default value: ''/home/sympa/spool/task'')



Spool to store task files created by the task manager. This parameter is mandatory and must be an absolute path.



</if>



===== tmpdir =====



(Default value: ''/home/sympa/spool/tmp'')



Temporary directory used by OpenSSL and antiviruses.



===== sleep =====



(Default value: ''5'')



Waiting period (in seconds) between each scan of the main queue. Never set this value to 0!





===== clean_delay_queue =====



(Default value: ''7'')

<if manual_version <= 6.3>

Retention period (in days) for "bad" messages in the messages spool (as specified by ''[[#queue|queue]]''). Sympa keeps messages rejected for various reasons (badly formatted, looping, 

etc.) in this directory. This configuration variable controls the number of days these messages are kept.

<else>

Retention period (in days) for messages with status ''bad''in the database spool_table table (spoolname = 'msg'). Sympa keeps messages rejected for various reasons (badly formatted, looping, 

etc.) in this directory. This configuration variable controls the number of days these messages are kept.

</if>

Example: <code>clean_delay_queue 3</code>



===== clean_delay_queueoutgoing =====



(Default value: ''7'')

<if manual_version <= 6.3>

Retention period (in days) for "bad" messages in the outgoing spool (as specified by ''[[#queueoutgoing|queueoutgoing]]''). Sympa keeps messages rejected for various reasons (unable to create archive directory, to copy file, etc.) in this directory. This configuration variable controls the number of days these messages are kept.

<else>

Retention period (in days) for messages with status "bad" in the outgoing database spool_stable (spoolname ='archive'). Sympa keeps messages rejected for various reasons (unable to create archive directory, to copy file, etc.) in this directory. This configuration variable controls the number of days these messages are kept.

</if>

Example: <code>clean_delay_queueoutgoing 3</code>





===== clean_delay_queuebounce =====



(Default value: ''7'')

<if manual_version < 6.3>

Retention period (in days) for "bad" messages in the bounce spool (as specified by ''[[#queuebounce|queuebounce]]''). Sympa keeps messages rejected for various reasons (unknown original sender, unknown feedback type) in this directory. This configuration variable controls the number of days these messages are kept.

<else>

Retention period (in days) for messages with status bad in the database spool_table (spoolname='bounce'). Sympa keeps messages rejected for various reasons (unknown original sender, unknown feedback type) in this directory. This configuration variable controls the number of days these messages are kept.

</if>



Example: <code>clean_delay_queuebounce 3</code>









===== clean_delay_queuemod =====



(Default value: ''30'')

<if manual_version < 6.3>

Expiration delay (in days) in the moderation spool (as specified by ''[[#queuemod|queuemod]]''). Beyond this deadline, messages that have not been processed are deleted. For moderated lists, the contents of this spool can be consulted using a key along with the ''MODINDEX'' command.

<else>

Expiration delay (in days) in the database spool spool_table (spoolname = 'mod'). Beyond this deadline, messages that have not been processed are deleted. For moderated lists, the contents of this spool can be consulted using a key along with the ''MODINDEX'' command.

</if>



===== clean_delay_queueauth =====



(Default value: ''30'')

<if manual_version < 6.3>

Expiration delay (in days) in the authentication queue. Beyond this deadline, messages not enabled are deleted.

<else>

Expiration delay (in days) in the database spool (spool_table, spoolname = 'auth'). Beyond this deadline, messages not enabled are deleted.

</if>



===== clean_delay_queuesubscribe =====



(Default value: ''30'')

<if manual_version < 6.3>

Expiration delay (in days) in the subscription requests queue. Beyond this deadline, requests not validated are deleted.

<else>

Expiration delay (in days) in the database spool (spool_table spoolname = 'subscribe' requests queue. Beyond this deadline, requests not validated are deleted.

</if>

===== clean_delay_queuetopic =====



(Default value: ''30'')

<if manual_version < 6.3>

Delay for keeping message topic files (in days) in the topic queue. Beyond this deadline, files are deleted.

<else>

Delay for keeping message topic files (in days) in the spool database (spool_table spoolname='topic'). Beyond this deadline, files are deleted.

</if>



===== clean_delay_queueautomatic =====



(Default value: ''10'')

<if manual_version < 6.3>



Retention period (in days) for "bad" messages in automatic spool (as specified by ''[[#queueautomatic|queueautomatic]]''). Sympa keeps messages rejected for various reasons (badly formatted, looping, etc.) in this directory, with a name prefixed with ''BAD''. This configuration variable controls the number of days these messages are kept.

<else>

Retention period (in days) for "bad" messages in databae spool_table  (spoolname = 'automatic'). Sympa keeps messages rejected for various reasons (badly formatted, looping, etc.) in this directory, with a name prefixed with ''BAD''. This configuration variable controls the number of days these messages are kept.

</if>

===== clean_delay_tmpdir =====



(Default value: ''7'')



Retention period (in days) for files put in the tmp dir (as specified by ''[[#tmpdir|tmpdir]]''). This configuration variable controls the number of days these files are kept.
====== sympa.conf parameters part 3 ======



Also see: \\

[[manual/conf-parameters/index|sympa.conf parameters index]]\\

[[manual/conf-parameters/part1|sympa.conf parameters part 1]]\\

[[manual/conf-parameters/part2|sympa.conf parameters part 2]]\\



======  Internationalization related ======



===== localedir =====



(Default value: ''/home/sympa/locale'')



The location of multilingual catalog files. Must correspond to ''~src/locale/Makefile''.



===== supported_lang =====



Example: <code>supported_lang fr,en_US,de,es</code>



This parameter lists all supported languages (comma separated) for the user interface. The default value will include all message catalogs but it can be narrowed by the listmaster.



===== lang =====



(Default value: ''en_US'')



This is the default language for Sympa. The message catalog (''.po'', compiled as a ''.mo'' file) located in the corresponding locale directory will be used.



===== web_recode_to =====



(OBSOLETE)



All web pages now use UTF-8 charset



===== filesystem_encoding =====



OBSOLETE



Now all files (including configuration files, templates, authorization scenarios,...) must use UTF-8 charset.



======  Bounce related ======







See [[manual:bounce|bounce managment and tracking]] for general informations.



===== verp_rate =====



(Default value: ''0%'')



See [[manual:bounces#verp|VERP]] for more information on VERP in Sympa.



When ''verp_rate'' is null, VERP is not used; if ''verp_rate'' is 100%, VERP is always in use. VERP is used for each subscriber where previous bounce where recognized. In addition VERP for 1000f subscribers if tracking is actived for a list or a message.



VERP requires plussed aliases to be supported and the ''bounce+*'' alias to be installed.



===== welcome_return_path =====



(Default value: ''owner'')



If set to string unique, Sympa enables VERP for welcome messages and bounce processing will remove the subscription if a bounce is received for the welcome message. This prevents to add bad address in the subscriber list.



===== remind_return_path =====



(Default value: ''owner'')



Like ''welcome_return_path'', but relates to the remind message.



===== return_path_suffix =====



(Default value: ''-owner'')



This defines the suffix that is appended to the list name to build the return-path of messages sent to the lists. This is the address that will receive all non delivery reports (also called bounces).



===== expire_bounce_task =====



(Default value: ''daily'')



This parameter tells what task will be used by ''task_manager.pl'' to perform bounce expiration. This task resets bouncing information for addres

ses not bouncing in the last 10 days after the latest message distribution.



===== purge_orphan_bounces_task =====



(Default value: ''Monthly'')



This parameter tells what task will be used by ''task_manager.pl'' to perform bounce cleaning. This task deletes bounce archive for unsubscribed users.



===== eval_bouncers_task =====



(Default value: ''daily'')



The task ''eval_bouncers'' evaluates all bouncing users

 for all lists, and fill the field ''bounce_score_suscriber'' in table ''suscriber_table'' with a score. This score allows the auto-management of bouncing users.



===== process_bouncers_task =====



(Default value: ''monthly'')



The task ''process_bouncers'' executes configured actions on bouncing users, according to their score. The association between score and actions has to be done in List configuration. This parameter defines the frequency of execution for this task.



===== minimum_bouncing_count =====



(Default value: ''10'')



This parameter is for the bounce-score evaluation: the bounce-score is a mark that allows the auto-management of bouncing users. This score is evaluated with, in particular, the number of message bounces received for the user. This parameter sets the minimum number of these messages to allow the bounce-score evaluation for a user.



===== minimum_bouncing_period =====



(Default value: ''10'')



Determine the minimum bouncing period for a user to allow his bounce-score evaluation. Like previous parameter, if this value is too low, bounce-score will be 0.



===== bounce_delay =====



(Default value: ''0'')



Another parameter for the bounce-score evaluation: this one represents the average time (in days) for a bounce to come back to the Sympa server after a post was send to a list. Usually bounces are delivered on the same day as the original message.





===== default_bounce_level1_rate =====



(Default value: ''45'')



This is the default value for ''bouncerslevel1 rate'' entry (see [[manual:parameters-bounces#bouncers_level1|bouncers_level1]]).





===== default_bounce_level2_rate =====



(Default value: ''75'')



This is the default value for ''bouncerslevel2 rate'' entry ( see [[manual:parameters-bounces#bouncers_level2|bouncers_level2]]).





===== bounce_email_prefix =====



(Default value: ''bounce'')



The prefix string used to build variable envelope return path (VERP). In the context of VERP enabled, the local part of the address starts with a constant string specified by this parameter. The email is used to collect bounce. Plussed aliases are used in order to introduce the variable part of the email that encodes the subscriber address. This parameter is useful if you want to run more than one Sympa on the same host (a test Sympa for example).



If you change the default value, you must modify the sympa aliases too.



For example, if you set it as:



<code>

bounce_email_prefix bounce-test

</code>



you must modify the sympa aliases like this:



<code>

bounce-test+*: | /home/sympa/bin/queuebounce sympa@my.domain.org

</code>



See [[manual:mail-aliases#robot_aliases|Robot aliases]] for all aliases.



===== bounce_warn_rate =====



(Default value: ''30'')



Site default value for bounce. The list owner receives a warning whenever a message is distributed and the number of bounces exceeds this value.



===== bounce_halt_rate =====



(Default value: ''50'')



FOR FUTURE USE



Site default value for bounce. Messages will cease to be distributed if the number of bounces exceeds this value.





===== tracking_delivery_status_notification  =====



Format: ''on'' | ''off'' (Default value: ''off'')



This the default value applied to list tracking / delivery_status_notification parameter . see FIXME



===== tracking_message_delivery_notification  =====



Format: ''on ''| ''off'' |  ''on_demand'' (Default value: ''off'')



This the default value applied to list tracking / message_delivery_notification parameter . see FIXME



===== default_remind_task =====



(Default value: ''2month'')



This parameter defines the default ''remind_task'' list parameter.



======  Tuning ======





===== cache_list_config =====



Format: ''none | binary_file'' (Default value: ''none'')



If this parameter is set to ''binary_file'', then Sympa processes will maintain a binary version of the list config structure on disk (''config.bin'' file). This file is bypassed whenever the ''config'' file changes on disk. Thanks to this method, the startup of Sympa processes is much faster because it saves the time of parsing all config files. The drawback of this method is that the list config cache can live for a long time (not recreated when the Sympa processes restart); the Sympa processes could still use authorization scenario rules or default for list parameters (set in sympa.conf) that have changed on disk in the meantime. You can work this problem out by frequently running a <html><span style="font-family: courier">sympa.pl --reload_list_config</span></html> using the crontab. In the long term, Sympa should update ''config.bin'' files via the task_manager.



You should use list config cache if you are managing a big amount of lists (1000+).



===== lock_method =====



Format: ''flock | nfs'' (Default value: ''flock'')



This parameter will tell Sympa how it should perform locks when required (updating DB, updating config file,...). The default method uses the standard ''flock'' function. Another option is to use NFS locking ; it requires that you install ''File::NFSLock'' perl module first.



===== sympa_priority =====



(Default value: ''1'')



Priority applied to Sympa commands while running the spool.



Available since release 2.3.1.



===== request_priority =====



(Default value: ''0'')



Priority for processing of messages for ''mylist-request'', i.e. for owners of the list.



Available since release 2.3.3.





===== owner_priority =====



(Default value: ''9'')



Priority for processing messages for ''mylist-owner'' in the spool. This address will receive non-delivery reports (bounces) and should have a low priority.



Available since release 2.3.3.



===== default_list_priority =====



(Default value: ''5'')



Default priority for messages if not defined in the list configuration file.



Available since release 2.3.1.



====== Database related ======



The following parameters are needed when using a RDBMS, but are otherwise not required.



===== update_db_field_types =====



Format: <code>update_db_field_types auto | disabled</code>



(Default value: ''auto'')



This parameter defines whether Sympa automatically updates database structure to match the expected datafield types. This feature is only available with MySQL. Note howevere that since version 5.3b.5, Sympa will not alter DB fileds that have a bigger size (if ''update_db_fields_types'' is set to ''auto'').



===== db_type =====



Format: <code>db_type mysql | SQLite | Pg | Oracle | Sybase</code>



Database management system used (e.g. MySQL, Pg, Oracle)



This corresponds to the PERL DataBase Driver (DBD) name and is therefore case-sensitive.



===== db_name =====



(Default value: ''sympa'')



Name of the database containing user information. If you are using SQLite, then this parameter is the DB file name.



===== db_host =====



Database host name.



===== db_port =====



Database port.



===== db_user =====



User with read access to the database.



===== db_passwd =====



Password for db_user.



===== db_timeout =====



This parameter is used for SQLite only.



===== db_options =====



If these options are defined, they will be appended to the database connect string.



Example for MySQL: <code>db_options	mysql_read_default_file=/home/joe/my.cnf;mysql_socket=tmp/mysql.sock-test</code>



Check the related DBD documentation to learn about the available options.



===== db_env =====



Gives a list of environment variables to set before database connection. This is a ';' separated list of variable assignments.



Example for Oracle: <code>db_env	ORACLE_TERM=vt100;ORACLE_HOME=/var/hote/oracle/7.3.4</code>



===== db_additional_subscriber_fields =====



If your ''subscriber_table'' database table has more fields than required by Sympa (because other programs access this table), you can make Sympa recognize these fields. You will then be able to use them from within mail/web templates and authorization scenarios (as [subscriber->field]). These fields will also appear in the list members review page and will be editable by the list owner. This parameter is a comma-separated list.



Example: <code>db_additional_subscriber_fields 	billing_delay,subscription_expiration</code>



===== db_additional_user_fields =====



If your ''user_table'' database table has more fields than required by Sympa (because other programs access this table), you can make Sympa recognize these fields. You will then be able to use them from within mail/web templates (as [user->field]). This parameter is a comma-separated list.



Example: <code>db_additional_user_fields 	address,gender</code>





===== purge_user_table_task =====



This parameter refers to the name of the task (Example: ''monthly'') that will be regularly run by the ''task_manager.pl'' to remove entries in the ''user_table'' table that have no corresponding entries in the ''subscriber_table'' table.



===== purge_tables_task =====



This parameter refers to the name of the task (Example: ''monthly'') that will be regularly run by the ''task_manager.pl'' to remove entries in the ''bulkspool_table'' table that don't have any relationships to a packet in the bulkmailer_table.



===== purge_logs_table_task =====



(Default value: ''daily'')



This parameter refers to the name of the task (Example: ''monthly'') that will be regularly run by the ''task_manager.pl'' to remove entries in the ''logs_table'' table.



===== logs_expiration_period =====



(Default value: ''3'')



Datas in ''logs_table'' table are removed when they are older than ''logs_expiration_period''. The parameter value is interpreted as a number of month. (FIXME it should be replaced by stand duration expression).  



===== purge_session_table_task =====



(Default value: ''daily'')



This parameter refers to the name of the task (Example: ''monthly'') that will be regularly run by the ''task_manager.pl'' to remove entries in the ''session_table'' table.



===== session_table_ttl =====



(Default value: ''3d'')



Session duration is controled by ''sympa_session'' cookie validity attribute, but it is needed for security reason to control this delay on the server side. The default time to leave for sessions. Session with unactivity period longer than this parameters are removed. If this parameter is very long then the session_table may become very large, mainly because most crawler robots do not manage cookies.



Duration values format are easy to read, the format is a string without spaces including y for years, m for months d for days, h for hours min for minutes and sec for secondes.



===== purge_chalenge_table_task =====



(Default value: ''daily'')



This parameter refers to the name of the task (Example: ''monthly'') that will be regularly run by the ''task_manager.pl'' to remove entries in the ''chalenge_table'' table. (This table is  used to store information about email authentication chalenges).



===== chalenge_table_ttl =====



(Default value: ''5d'') 



Chalenge sent by email are store until they are used, but Sympa may remove chalenges that are //too old// both for security reasons and to keep table in a reasonable size. This parameter is used to specify what does mean //a too old chalenge//.



===== default_ttl =====



(Default value: ''3600'') 



Defines the default value for the [[:manual:parameters-data-sources#ttl|ttl list configuration parameter]].



===== default_distribution_ttl =====



(Default value: ''300'') 



Defines the default value for the [[:manual:parameters-data-sources#distribution_ttl|distribution_ttl list configuration parameter]].



===== default_sql_fetch_timeout =====



(Default value: ''300'') 



Defines the default value for the [[:manual:parameters-data-sources#sql_fetch_timeout|sql_fetch_timeout list configuration parameter]].



======  Loop prevention ======



The following define your loop prevention policy for commands (see [[manual:customizing#loop_detection|Loop detection]]).



===== loop_command_max =====



(Default value: ''200'')



The maximum number of command reports sent to an email address. When it is reached, messages are stored with the ''BAD'' prefix, and reports are no longer sent.



===== loop_command_sampling_delay =====



(Default value: ''3600'')



This parameter defines the delay in seconds before decrementing the counter of reports sent to an email address.



===== loop_command_decrease_factor =====



(Default value: ''0.5'')



The decrementation factor (from 0 to 1), used to determine the new report counter after expiration of the delay.



===== loop_prevention_regex =====



(Default value: ''mailer-daemon|sympa|listserv|majordomo|smartlist|mailman'')



This regular expression is applied to message sender addresses. If the sender address matches the regular expression, then the message is rejected. The goal of this parameter is to prevent loops between Sympa and other robots.



===== msgid_table_cleanup_ttl =====



Implemented in Sympa 6.2



(Default value: 86400)



Sympa.pl maintains a hash table of all processed messages, used to prevent loops and duplicate messages to be sent. This in-memory data structure can grow. The cleanup process removes old entries. The value is expressed in seconds.



===== msgid_table_cleanup_frequency =====



Implemented in Sympa 6.2



(Default value: 3600)



Defines how frequently sympa.pl cleans up this hash table. The value is expressed in seconds.



======  S/MIME configuration ======



Sympa can optionally check and use S/MIME signatures for security purposes. In this case, the first three of the following parameters must be set by the listmaster (see [[manual:x509#configuration_in_sympa.conf|Configuration in sympa.conf]]). The other two are optional.



===== openssl =====



The path for the OpenSSL binary file.



===== capath =====



The directory path use by OpenSSL for trusted CA certificates.



A directory of trusted certificates. The certificates should have names of the form ''hash.0'' or have symbolic links of this form to them (''hash'' is the hashed certificate subject name: see the ''-hash'' option of the OpenSSL x509 utility). This directory should be the same as the directory ''SSLCACertificatePath'' specified for the ''mod_ssl'' module for Apache.



===== cafile =====



This parameter sets the all-in-one file where you can assemble the Certificates of Certification Authorities (CA) whose clients you deal with. These are used for Client Authentication. Such a file is simply the concatenation of the various PEM-encoded Certificate files, in order of preference. This can be used alternatively and/or additionally to ''capath''.



===== key_passwd =====



The password for list private key encryption. If not defined, Sympa assumes that list private keys are not encrypted.





====== DKIM  ======

Sympa can deal with DKIM signature, both for verifying signature of incoming messages and for signing outgoing messages. Please read [[../dkim|the DKIM related documentation]].



<if manual_version>=6.1>

===== dkim_feature  =====

on|off

(default off)



Enabling this feature will allow Sympa to verify DKIM signatures of incoming messages. This require Mail::DKIM to be installed and **your custom scenario to be updated** ((if not, scenario may return incorrect results !)). 

If you want outgoing messages to be signed by Sympa server This parameter must also be set to ''on''. If not the following parameters are ignored : 



  *dkim_add_signature_to 

  *dkim_signature_apply_on

  *dkim_private_key_path

  *dkim_selector

  *dkim_signer_domain

  *dkim_signer_identity

  *<del>dkim_header_list</del> (OBSOLETE)



===== dkim_add_signature_to =====

none|robot,list (default robot,list)



You may choose if Sympa sign both services messages (messages from the robot) and messages broadcasted to list members. If set to ''robot'', all messages from the robot itself are signed ; this include welcome digest messages etc. If set to list messages sent to subscribers via the list are signed depending on parameter ''dkim_signature_apply_on''.



===== dkim_signature_apply_on =====



Possible values are ''none'', ''any'' or a comma separated list of key words from ''md5_authenticated_messages'', ''smime_authenticated_messages'', ''dkim_authenticated_messages'', ''editor_validated_messages'' \\

(default ''md5_authenticated_messages,smime_authenticated_messages,dkim_authenticated_messages,editor_validated_messages'')



This parameter can be overwritten righted by ''robot.conf'' or list configuration files. Setting this parameter, you decide which messages are signed by your organization. Remember that the semantic of DKIM signature is really different from the one of PGP or S/MIME: apply signature to a message does not mean you validate with its content.



===== dkim_private_key_path =====



Location of the file where the PEM private key used for DKIM signature is stored. ((The PEM private key format uses the header and footer lines:\\

''-----BEGIN RSA PRIVATE KEY-----''\\

''-----END RSA PRIVATE KEY-----''))



===== dkim_signer_domain =====



The signer domain. This domain must match the domain part of the Sympa server (or list domain). It is used as the //d=// DKIM tag.



===== dkim_selector =====



The DKIM selector used to fetch public keys by DNS query. If ''dkim_selector'' value is ''selector_for_lists'', and ''dkim_signer_domain'' set to ''mylistdomain.org'', the public key  should be published as a TXT DNS record for ''selector_for_lists._domainkey.mylistdomain.org''.



===== dkim_signer_identity =====



The signer identity. You should probably leave that optional parameter empty. It will be used as //i=// dkim tag.



===== dkim_header_list =====

This parameter is now obsolete.

<else>

DKIM features has been introduced in version 6.1. Please report to the appropriate manual version.

</if>



====== Antivirus plug-in ======



Sympa can optionally check incoming messages before delivering them, using an external antivirus solution. You must then set two parameters.



===== antivirus_path =====



The path to your favorite antivirus binary file (including the binary file).



Example: <code>antivirus_path		/usr/local/bin/uvscan</code>





===== antivirus_args =====



The arguments used by the antivirus software to look for viruses. You must set them so as to get the virus name. You should use, if available, the ''unzip'' option and check all extensions.



Example with uvscan: <code>antivirus_args		--summary --secure</code>



Example with fsav: <code>antivirus_args		--dumb	--archive</code>



Example with AVP:



<code>

  antivirus_path  /opt/AVP/kavscanner

  antivirus_args  -Y -O- -MP -I0

</code>



Example with Sophos:



  antivirus_path  /usr/local/bin/sweep

  antivirus_args  -nc -nb -ss -archive



Example with Clamav:



<code>

  antivirus_path  /usr/local/bin/clamdscan

  antivirus_args  --stdout

</code>





===== antivirus_notify =====



''sender | nobody''



(Default value: ''sender'')



This parameter defines whether Sympa should notify the email sender when a virus has been detected.fdkim
====== Mailing list definition ======



This chapter describes what a mailing list is made of within a Sympa environment.



====== Mail aliases ======



See list aliases section, [[list-definition#mail_aliases|Mail aliases]].





====== List configuration file ======



The configuration file for the ''mylist'' list is named ''/home/sympa/list_data/my.domain.org/mylist/config'' (or ''/home/sympa/list_data/mylist/config'' if no virtual host is defined). Sympa reloads it into memory whenever this file has changed on disk. The file can either be edited via the web interface or directly via your favourite text editor.



If you have set the ''cache_list_config'' ''sympa.conf'' parameter (see [[:manual:conf-parameters:part3#cache_list_config|cache_list_config]]), a binary version of the config (''/home/sympa/list_data/my.domain.org/mylist/config.bin'' is maintained to allow a faster restart of daemons (this is especialy useful for sites managing lots of lists).



Be careful to provide read access for Sympa user to this file!



You will find a few configuration files in the ''sample'' directory.



List configuration parameters are described in the list creation section, [[list-parameters|List configuration parameters]].



======  Examples of configuration files ======



This first example is for a list open to everyone:



<code>

  subject First example (an open list)



  visibility noconceal



  owner

  email Pierre.David@prism.uvsq.fr



  send public



  review public

</code>



The second example is for a moderated list with authenticated subscription:



<code>

  subject Second example (a moderated list)



  visibility noconceal



  owner

  email moi@ici.fr



  editor

  email big.prof@ailleurs.edu



  send editor



  subscribe auth



  review owner



  reply_to_header

  value list



  cookie 142cleliste

</code>



The third example is for a moderated list, with subscription controlled by the owner, and running in digest mode. Subscribers who are in digest mode receive messages on Mondays and Thursdays.



<code>

  owner

  email moi@ici.fr



  editor

  email prof@ailleurs.edu



  send editor



  subscribe owner



  review owner



  reply_to_header

  value list



  digest 1,4 12:00

</code>







====== Subscribers file ======



**Be careful**: since version 3.3.6 of Sympa, a RDBMS is required for internal data storage. Flat files should not be use anymore except for testing purpose. Sympa will not use these files if the list is configured with ''include'', ''database'' or ''user_data_source''.



The ''/home/sympa/list_data/mylist/subscribers'' file is automatically created and populated. It contains information about list subscribers. It is not advisable to edit this file. Main parameters are:



  * ''email'' //address// \\ Email address of the subscriber.

  * ''gecos'' //data// \\ Information about the subscriber (last name, first name, etc.) This parameter is optional at subscription time.

  * ''reception | nomail | digest | summary | notice | txt | html | urlize | not_me'' \\ Special delivery modes which the subscriber may select. Special modes can be either ''nomail'', ''digest'', ''summary'', ''notice'', ''txt'', ''html'', ''urlize'' and ''not_me''. In normal delivery mode, the delivery attribute for a subscriber is not displayed. In this mode, subscription to message topics is available. See the [[sympa-commands#set_summary|SET LISTNAME SUMMARY]] command, the [[sympa-commands#user_commands|SET LISTNAME NOMAIL]] command and the [[parameters-sending#digest|digest]] parameter.

  * ''visibility'' ''conceal'' \\ Special mode which allows the subscriber to remain invisible when a ''REVIEW'' command is issued for the list. If this parameter is not declared, the subscriber will be visible for ''REVIEW''. Note: this option does not affect the results of a ''REVIEW'' command issued by an owner. See the [[sympa-commands#user_commands|SET LISTNAME CONCEAL]] command for details.



======  Info file ======



''/home/sympa/list_data/mylist/info'' should contain a detailed text description of the list, to be displayed by the ''INFO'' command. It can also be referenced from template files for service messages.



======  Homepage file ======



''/home/sympa/list_data/mylist/homepage'' is the HTML text on the //WWSympa// info page for the list.













====== Data inclusion file ======



Every file has the .incl extension. Moreover, these files must be declared in paragraphs ''owner_include'' or ''editor_include'' in the list configuration file (without the .incl extension) (see [[list-parameters|List configuration parameters]]). This files can be template files.



Sympa looks for them in the following order:



  - ''/home/sympa/list_data/mylist/data_sources/<file>.incl'';

  - ''/home/sympa/etc/data_sources/<file>.incl'';

  - ''/home/sympa/etc/my.domain.org/data_sources/<file>.incl''.



These files are used by Sympa to load administrative data in a relational database: owners or editors are defined //intensively// (definition of criteria owners or editors must satisfy). Includes can be performed by extracting email addresses using an SQL or LDAP query, or by including other mailing lists.



A data inclusion file is made of paragraphs separated by blank lines and introduced by a keyword. Valid paragraphs are ''include_file'', ''include_remote_file'', ''include_list'', ''include_remote_sympa_list'', ''include_sql_query'', ''include_ldap_2level_query'' and ''include_ldap_query''. They are described in the [[list-parameters|List configuration parameters]] chapter.



When this file is a template, the variables used are array elements (''param'' array). This array is instantiated by values contained in the subparameter ''source_parameter'' of ''owner_include'' or ''editor_include''.



Example:



  * in the list configuration file ''/home/sympa/list_data/mylist/config'' :

<code>

    	owner_include

    	source myfile

    	source_parameters mysql,rennes1,stduser,mysecret,studentbody,student

</code>

  * in ''/home/sympa/etc/data_sources/myfile.incl'':

<code>

    	include_sql_query

    	db_type [193c3b08aram.0 %]

    	host sqlserv.admin.univ-[193c3b08aram.1 %].fr

    	user [193c3b08aram.2 %]

    	passwd [193c3b08aram.3 %]

            db_name [193c3b08aram.4 %]

    	sql_query SELECT DISTINCT email FROM [193c3b08aram.5 %]

</code>

  * once it has been parsed with provided parameters, the inclusion directives would look like this:

<code>

    	include_sql_query

    	db_type mysql

    	host sqlserv.admin.univ-rennes1.fr

            user stduser

            passwd mysecret

            db_name studentbody

            sql_query SELECT DISTINCT email FROM student

</code>







====== List template files ======



These files are used by Sympa as service messages for commands such as ''SUB'', ''ADD'', ''SIG'', ''DEL'', ''REJECT''. These files are interpreted (parsed) by Sympa and respect the template format; every file has the .tt2 extension. See [[customizing#template_file_format|Template file format]].



Sympa looks for these files in the following order:



  - ''/home/sympa/list_data/mylist/mail_tt2/<file>.tt2'';

  - ''/home/sympa/etc/mail_tt2/<file>.tt2'';

  - ''/home/sympa/bin/etc/mail_tt2/<file>.tt2''.



If the file starts with a ''From:'' line, it is considered to be a full message and will be sent (after parsing) without the addition of SMTP headers. Otherwise the file is treated as a text/plain message body.



The following variables may be used in list template files:



  * ''[ onf.email %]'': Sympa email address local part;



  * ''[ onf.domain %]'': Sympa's robot domain name;



  * ''[ onf.sympa %]'': Sympa's complete email address;



  * ''[ onf.wwsympa_url %]'': //WWSympa//'s root URL;



  * ''[ onf.listmaster %]'': listmasters' email addresses;



  * ''[ 0st.name %]'': list name;



  * ''[ 0st.host %]'': list hostname (default is Sympa robot domain name);



  * ''[ 0st.lang %]'': list language;



  * ''[ 0st.subject %]'': list subject;



  * ''[ 0st.owner %]'': list owners table hash;



  * ''[0ser.email %]'': user email address;



  * ''[0ser.gecos %]'': user gecos field (usually his/her name);



  * ''[0ser.password %]'': user password;



  * ''[0ser.lang %]'': user language;



  * ''[ 0.000000e+00xecution_date %]'': the date when the scenario is executed.



You may also dynamically include a file from a template using the ''[% INSERT %]'' directive.



Example:



<code>

  Dear [0ser.email %],



  Welcome to list [ 0st.name %]@[ 0st.host %].



  Presentation of the list:

  [% INSERT 'info' %]



  The owners of [ 0st.name %] are:

  [ 0.000000OREACH ow = list.owner %]

     [0w.value.gecos %] <[0w.value.email %]>

  [ 0.000000E+00ND %]

</code>



=====  welcome.tt2 =====



Sympa will send a welcome message for every subscription. The welcome message can be customized for each list.



=====  bye.tt2 =====



Sympa will send a farewell message for each ''SIGNOFF'' mail command received.



=====  removed.tt2 =====



This message is sent to users who have been deleted (using the ''DELETE'' command) from the list by the list owners.



=====  reject.tt2 =====



Sympa will send a reject message to the senders of messages rejected by the list editors. If they prefixe their ''REJECT'' with the keyword ''QUIET'', the reject message will not be sent.



=====  invite.tt2 =====



This message is sent to users who have been invited (using the ''INVITE'' command) to subscribe to a list.



You may use additional variables



  * ''[% requested_by %]'': email of the person who sent the ''INVITE'' command;



  * ''[0rl %]'': the mailto: URL to subscribe to the list.



=====  remind.tt2 =====



This file contains a message sent to each subscriber when one of the list owners sends the [[sympa-commands#user_commands|REMIND command]].



=====  summary.tt2 =====



Template for summaries (reception mode close to digest), see the [[sympa-commands#user_commands|SET LISTNAME SUMMARY]] command.





===== list_aliases.tt2 =====



Template that defines list mail alises. It is used by the ''alias_manager'' script.



**Note that this template is not a service messages, therefore it is not located in a mail_tt2/ subdirectory.**



====== Stats file ======



''/home/sympa/list_data/mylist/stats'' is a text file containing statistics about the list. Data are numerics separated by white space within a single line:



  * number of messages sent, used to generate X-sequence headers;

  * number of messages X number of recipients;

  * number of bytes X number of messages;

  * number of bytes X number of messages X number of recipients;

  * number of subscribers;

  * last update date (epoch format) of the subscribers cache in DB, used by lists in **include2** mode only.



====== List model files ======



These files are used by Sympa to create task files. They are interpreted (parsed) by the task manager and respect the task format. See [[customizing#tasks|Tasks]].



=====  remind.annual.task =====



Every year Sympa will send a message (the template ''remind.tt2'') to all subscribers of the list to remind them of their subscription.



=====  expire.annual.task =====



Every month Sympa will delete subscribers older than one year who haven't answered two warning messages.



====== Message header and footer ======



You may create the ''/home/sympa/list_data/mylist/message.header'' and ''/home/sympa/list_data/mylist/message.footer'' files. Their content is added, respectively at the beginning and at the end of each message before the distribution process. You may also include the content-type of the appended part (when ''footer_type'' list parameter is set to ''mime'') by renaming the files to ''message.header.mime'' and ''message.footer.mime''.



The ''footer_type'' list parameter defines whether to attach the header/footer content as a MIME part (except for multipart/alternative messages), or to append them to the message body (for text/plain messages).



Under certain circumstances, Sympa will NOT add headers/footers, here is its algorythm:



<code>

  if message is not multipart/signed

          if footer_type==append

  	        if message is text/plain

  		       append header/footer to it

  		else if message is multipart AND first part is text/plain

  		       append header/footer to first part



          if footer_type==mime

  	        if message is not multipart/alternative

  		       add header/footer as a new MIME part

</code>



=====  Archive directory =====



The ''/home/sympa/list_data/mylist/archives/'' directory contains the messages archived for lists which are archived; see [[parameters-archives#archive|archive]]. The files are named in accordance with the archiving frequency defined by the ''archive'' parameter.

====== List creation, editing and removal ======



The list creation can be done in two ways, according to listmaster needs:



  * family instanciation, to create and manage a large number of related lists. In this case, lists are linked to their family all along their life (moreover, you can let Sympa automatically create lists when needed. See [[list-families#automatic_list_creation|Automatic list creation]]).

  * command line creation of individual list with ''sympa.pl'' or on the web interface according to privileges defined by listmasters. In this case, lists are free from their creation model.



Management of mailing lists by list owners is usually done through the web interface: when a list is created, whatever its status (''pending'' or ''open''), the owners can use //WWSympa// administration features to modify list parameters, to edit the welcome message, and so on.



//WWSympa// keeps logs of the creation and all modifications to a list as part of the list's ''config'' file (old configuration files are archived). A complete installation requires some careful planning, although default values should be acceptable for most sites.



====== List creation ======



Mailing lists can have many different uses. Sympa offers a wide choice of parameters to adapt a list behavior to different situations. Users might have difficulty selecting all the correct parameters to make the list configuration, so instead of selecting each parameters, list configuration is made with a list profile. This is an almost complete list configuration, but with a number of unspecified fields (such as owner email) to be replaced by Sympa at list creation time. It is easy to create new list templates by modifying existing ones. \\ //Please note that contributions to the distribution are welcome to complete the set of existing templates...// ;-)



=====  Data for list creation =====



To create a list, some data concerning list parameters are required:



  * **listname **: name of the list;

  * **subject**: subject of the list (a short description);

  * **owner(s)**: by static definition and/or dynamic definition. In case of static definition, the parameter ''owner'' and its subparameter ''email'' are required. For dynamic definition, the parameter ''owner_include'' and its subparameter ''source'' are required, indicating source file of data inclusion;

  * **list creation template**: the typical list profile.



in addition to these required data, provided values are assigned to vars being in the list creation template. Then the result is the list configuration file:



On the web interface, these data are given by the list creator in the web form. On command line, these data are given through an XML file.









===== XML file format =====



The XML file provides information on:



  * the list name;

  * values to assign vars in the list creation template;

  * the list description in order to be written in the list file information;

  * the name of the list creation template (only for list creation on command line with ''sympa.pl''; in a family context, the template is specified by the family name).



 Here is an example of XML document that you can map with the following example of list creation template:

  

<code>

  <?xml version="1.0" ?>

  <list>

  	<listname>example</listname>

    	<type>my_profile</type>

    	<subject>a list example</subject>

    	<description/>

    	<status>open</status>

    	<shared_edit>editor</shared_edit>

      	<shared_read>private</shared_read>

  	<language>fr</language>

  	<owner multiple="1">

  	   <email>serge.aumont@renater.fr</email>

  	   <gecos>C.R.U.</gecos>

  	</owner>

  	<owner multiple="1">

  	   <email>olivier.salaun@renater.fr</email>

  	</owner>

  	<owner_include multiple="1">

  	   <source>my_file</source>

  	</owner_include>

  	<moderator>

           <email>user@domain.org</email>

        </moderator>

        <topic>Computing</topic>

        <sql>

  	   <type>Oracle</type>

  	   <host>sqlserv.admin.univ-x.fr</host>

  	   <port>1521</port>

           <user>stdutilisateur</user>

  	   <pwd>monsecret</pwd>

  	   <name>les_etudiants</name>

           <env>ORACLE_HOME=/[oracle_path]</env>

  	   <query>SELECT DISTINCT email FROM etudiant</query>

  	</sql>

  </list>

</code>

Then edit List Creation Template - example: /[sympahome]/bin/etc/create_list_templates/discussion_list/config.tt2

<code>

  subject [ubject %]



  status [tatus %]



  [% IF topic %]

  topics [% topic %]



  [ 0.000000E+00ND %]

  visibility noconceal



  send privateoreditorkey



  Web_archive

    access public



  subscribe open_notify



  shared_doc

    d_edit [hared_edit %]

    d_read [hared_read %]



  lang [% language %]



  [ 0.000000OREACH o = owner %]

  owner

    email [0.email %]

    profile privileged

    [% IF o.gecos %]

    gecos [0.gecos %]

    [ 0.000000E+00ND %]



  [ 0.000000E+00ND %]

  [% IF moderator %]

     [ 0.000000OREACH m = moderator %]

  editor

    email [% m.email %]



     [ 0.000000E+00ND %]

  [ 0.000000E+00ND %]



  [% IF sql %]

  include_sql_query

    db_type [ql.type %]

    db_port [ql.port %]

    host [ql.host %]

    user [ql.user %]

    passwd [ql.pwd %]

    db_name [ql.name %]

    db_env [ql.env %]

    sql_query [ql.query %]



  [ 0.000000E+00ND %]

 

   default_user_options

    reception urlize|mail|digest



  ttl 360

</code>



The XML file format should comply with the following rules:



  * The root element is ''<list>''.

  * One XML element is mandatory: ''<listname>'' contains the name of the list. That does not exclude mandatory parameters for list creation ("listname, subject,owner.email and/or owner_include.source").

  * ''<type>'': this element contains the name of template list creation, it is used for list creation on command line with ''sympa.pl''. In a family context, this element is no used.

  * ''<description>'': the text contained in this element is written in list ''info'' file (it can be a CDATA section).

  * For other elements, the name is the name of the var to assign in the list creation template.

  * Each element concerning multiple parameters must have the ''multiple'' attribute set to ''1'', example: ''<nowiki><owner multiple="1"></nowiki>''

  * For composed and multiple parameters, sub-elements are used. Example for the ''owner'' parameter: ''<email>'' and ''<gecos>'' elements are contained in the ''<owner>'' element. An element can only have homogeneous content.

  * A list requires at least one owner, defined in the XML input file with one of the following elements:

    * ''<nowiki><owner multiple="1"> <email> ... </email> </owner></nowiki>''

    * ''<nowiki><owner_include multiple="1"> <source> ... </source> </owner_include></nowiki>''



======  List families ======



See chapter [[list-families|Lists families]].





====== List creation on command line with sympa.pl ======



This way to create lists is independent of family.



Here is a sample command to create one list:.



<code>sympa.pl --create_list --robot my.domain.org --input_file /path/to/my_file.xml</code>



The list is created under the ''my_robot'' robot and the list is described in the file ''my_file.xml''. The XML file is described before, see [[list-creation#xml_file_format|XML file format]].



By default, the status of the list created is ''open''.



==== Typical list profile (list template creation) ====



The list creator has to choose a profile for the list and put its name in the XML element ''<type>''.



List profiles are stored in ''/home/sympa/etc/create_list_templates'' or in ''/home/sympa/bin/etc/create_list_templates'' (default of distrib).



You might want to hide or modify profiles (not useful, or dangerous for your site). If a profile exists both in the local site directory ''/home/sympa/etc/create_list_templates'' and in the ''/home/sympa/bin/etc/create_list_templates'' directory, then the local profile will be used by //WWSympa//.



====== Creating and editing mailing lists using the Web ======



The management of mailing lists is based on a strict definition of privileges which pertain respectively to the listmaster, to the main list owner, and to basic list owners. The goal is to allow each listmaster to define who can create lists, and which parameters may be set by owners.



=====  List creation on the web interface =====



Listmasters are responsible for validating new mailing lists and, depending on the configuration chosen, might be the only ones who can fill out the create list form.The listmaster is defined in ''sympa.conf'' and others are defined at the virtual host level. By default, any authenticated user can request a list creation, but newly created lists are then validated by the listmaster.



The list rejection message and list creation notification message are both templates you can customize (''list_rejected.tt2'' and ''list_created.tt2'').





=====  Who can create lists on the web interface =====



This is defined by the [[conf-parameters/part1#create_list|create_list]] ''sympa.conf'' parameter. This parameter refers to a ''create_list'' authorization scenario. It will determine whether the //create list// button is displayed and whether list creation requires a listmaster confirmation.



The authorization scenario can accept any condition concerning the [sender] (i.e. //WWSympa// user), and it returns ''reject'', ''do_it'' or ''listmaster'' as an action.



Only in cases where a user is authorized by the ''create_list'' authorization scenario will the ''create'' button be available in the main menu. If the scenario returns ''do_it'', the list will be created and installed. If the scenario returns ''listmaster'', the user is allowed to create a list, but the list is created with the ''pending'' status, which means that only the list owner may view or use it. The listmaster will need to open the list of pending lists using the ''pending list'' button in the ''server admin'' menu in order to install or refuse a pending list.





=====  Typical list profile and web interface =====



As on command line creation, the list creator has to choose a list profile and to fill in the owner's email and the list subject together with a short description. But in this case, you do not need any XML file. Concerning these typical list profiles, they are described before, see [[list-creation#typical_list_profile_list_template_creation|Typical list profile (list template creation)]]. You can check available profiles. On the web interface, another way to control publicly available profiles is to edit the ''create_list.conf'' file (the default for this file is in the ''/home/sympa/bin/etc'' directory, and you may create your own customized version in ''/home/sympa/etc''). This file controls which of the available list templates are to be displayed. Example:

<code>

  ## This sample hides the public_anonymous create_list template

  public_anonymous hidden

  defaults read

</code>



===== customize create_list_request.tt2 =====



The list creation form is in a template named create_list_request.tt2 . You may modify this template in order to some other input that will be used to modify the created list. Any new input variable will be catched by wwsympa.fcgi and available in the tt2 hash [ ustom_input %] when using the list template to create teh list. 

 

exemple : 

''

  ## This is an html part added in create_list-request.tt2\\

  <input type="text" name="<hi #ffff00>custom_input.ldap_group</hi>" />\\

''



In config.tt2 you may use

''…\\

include_ldap_query\\

      host ldap.foo.edu\\

      suffix ou=accounts,dc…

      filter (&(isMemberOf=[% <hi #ffff00>custom_input.ldap_group</hi> %]))\\

…''



For more details on tt2 customization, templates path etc please go to the [[/dev-manual/customizing#web_template_files|web template files section]]



===== List editing =====



For each parameter, you may specify (through the ''/home/sympa/etc/edit_list.conf'' configuration file) who has the right to edit the parameter concerned; the default ''/home/sympa/bin/etc/edit_list.conf'' is reasonably safe.



Each line is a set of 3 field.



<code>

  <Parameter> <Population> <Privilege>

  <Population>: <listmaster|privileged_owner|owner>

  <Privilege>: <write|read|hidden>

</code>



**Parameter** can be any list config parameter or the name of a template (thus controlling the edition of the template through the //customize// web admin feature. You can refer to a subentry of a structured list parameter using the '.' as a separator (examples: **owner.email** or **web_archive.quota**). **default** is a reserved parameter name that means //any other parameter//.



There is no hierarchical relationship between populations in this configuration file. You need to explicitely list populations.



For example, ''listmaster'' will not match rules refering to ''owner'' or ''privileged_owner''.



Examples:

<code>

  	# only listmaster can edit user_data_source, priority, ...

  	user_data_source listmaster write



  	priority 	owner,privileged_owner 		read

  	priority 	listmaster 			write



  	# only privileged owner can modify  editor parameter, send, ...

  	editor privileged_owner write



  	send 		owner 				read

  	send 		privileged_owner,listmaster 	write



  	# other parameters can be changed by simple owners

  	default 	owner 				write

</code>



Privileged owners are defined in the list's ''config'' file as follows:

<code>

  	owner

  	email owners.email@foo.bar

  	profile privileged

</code>



Using ''edit_list.conf'', you can define privileges on the following lists parameters:

  * All the lists config parameters ([[:manual:conf-parameters:index|those used in the config file]]),

  * Any file used in list context and likely to be edited through the web interface:

    * homepage

    * info

    * welcome.tt2

    * rejection messages

    * invite.tt2

    * remind.tt2

    * message.footer

    * message.header

    * bye.tt2

    * removed.tt2

    * tour_infected_msg.tt2



<WRAP round tip 90%>



Starting Sympa 6.1.10, a **unique** exception exists in the matching between file names and edition rights in the edit_list.conf: the "info" term.



"info" represents both a list parameter and a list file:



  * The info **list parameter** controls the authorization scenario that will be used to know who can view the lists information text, both in the list welcome page and by using the "info" command. the value to use in the edit_list.conf to control who can edit this parameter's value is "info".

  * The info **file** contains the text to be displayed when somebody requests to see the list's informations. This is the content whose access is controlled by the info **list parameter**. the value to use in the edit_list.conf to control who can edit this parameter's value is "info.file".



Obviously, there is no reason why the exact same people would have the same rights on these two informations. But as they have the same name, one must use differetn keys in the "edit_list.conf" file to discriminate them.



In the following example, an owner and a privileged owner can both edit the info file, but only the privileged owner can change the info scenario to be used (the owner is only allowed to read it):



<code>

  	info.file	owner,privileged_owner		write

  	info		privileged_owner		write

  	info		privileged_owner		read

</code>



</WRAP>



The following rules are hard coded in //WWSympa//:



  * Only the listmaster can edit the ''profile privileged'' owner attribute.

  * Owners can edit their own attributes (except profile and email).

  * The person creating a new list becomes its privileged owner.

  * Privileged owners can edit any gecos/reception/info attribute of any owner.

  * Privileged owners can edit owners' email addresses (but not privileged owners' email addresses).



Sympa aims at defining two levels of trust for owners (some being entitled simply to edit secondary parameters such as ''custom_subject'', others having the right to manage more important parameters), while leaving control of crucial parameters (such as the list of privileged owners and ''user_data_sources'') in the hands of the listmaster. Consequently, privileged owners can change owners' emails, but they cannot grant the responsibility of list management to others without referring to the listmaster.



Concerning list editing in a family context, see [[list-families#editing_list_parameters_in_a_family_context|editing list parameters in a family context]].



====== Removing a list ======



You can remove (close) a list either from the command line or by using the web interface.



''sympa.pl'' provides an option to remove a mailing list, see the example below:



<code>sympa.pl --close_list=mylist@mydomain</code>



Privileged owners can remove a mailing list through the list administration part of the web interface. Removing the mailing list consists in removing its subscribers from the database and setting its status to //closed//. Once removed, the list can still be restored by the listmaster; list members are saved in a ''subscribers.closed.dump'' file.
====== List families ======



A list can have from three up to dozens of parameters. Some listmasters need to create a set of lists that have the same profile. In order to simplify the apprehension of these parameters, list families define a lists typology. Families provide a new level for defaults: in the past, defaults in Sympa were global and most sites using Sympa needed multiple defaults for different groups of lists. Moreover, families allow listmasters to delegate a part of configuration list to owners, in a controlled way according to family properties. Distribution will provide defaults families.



====== Family concept ======



A family provides a model for all of its lists. It is specified by the following characteristics:



  * a list creation template providing a common profile for each list configuration file;

  * a degree of independence between the lists and the family: list parameters editing rights and constraints on these parameters can be ''free'' (no constraint), ''controlled'' (a set of available values defined for these parameters) or ''fixed'' (the value for the parameter is imposed by the family). That prevents lists from diverging from the original and it allows list owner customizations in a controlled way;

  * a filiation kept between lists and family all along the list life: family modifications are applied on lists while keeping listowners customizations.



Here is a list of operations performed on a family:



  * definition: definition of the list creation template, the degree of independence and family customizations;

  * instantiation: list creation or modifications of existing lists while respecting family properties. The set of data defining the lists is an XML document;

  * modification: modification of family properties. The modification is effective at the next instantiation time and has consequences on every list;

  * closure: closure of each list;

  * adding a list to a family;

  * closing a family list;

  * modifying a family list.



====== Using family ======



=====  Definition =====



Families can be defined at the robot level, at the site level or on the distribution level (where default families are provided). So, you have to create a sub directory named after the family's name in a ''families'' directory:



Examples:

<code>

  /home/sympa/etc/families/my_family

  /home/sympa/etc/my_robot/families/my_family

</code>



In this directory, you must provide the following files:



  * ''config.tt2'' (mandatory);

  * ''param_constraint.conf'' (mandatory);

  * ''edit_list.conf'';

  * ''automatic_lists_description.conf'';

  * ''message.footer.tt2'',''message.header.tt2'',''message.footer.mime.tt2'',''message.header.mime.tt2'',''info.tt2'';

  * customizable files.





==== config.tt2 ====



This is a list creation template, this file is mandatory. It provides default values for parameters. This file is an almost complete list configuration, with a number of missing fields (such as owner email) to be replaced by data obtained at the time of family instantiation. It is easy to create new list templates by modifying existing ones. See [[list-definition#list_template_files|List template files]] and [[customizing#template_file_format|Template file format]].



Example:

<code>

  subject [ubject %]



  status [tatus %]



  [% IF topic %]

  topics [% topic %]



  [ 0.000000E+00ND %]

  visibility noconceal



  send privateoreditorkey



  web_archive

    access public



  subscribe open_notify



  shared_doc

    d_edit [hared_edit %]

    d_read [hared_read %]



  lang [% language %]



  [ 0.000000OREACH o = owner %]

  owner

    email [0.email %]

    profile privileged

    [% IF o.gecos -%]

    gecos [0.gecos %]

    [ 0.000000E+00ND %]



  [ 0.000000E+00ND %]

  [% IF moderator %]

     [ 0.000000OREACH m = moderator %]

  editor

    email [% m.email %]



     [ 0.000000E+00ND %]

  [ 0.000000E+00ND %]



  [% IF sql %]

  include_sql_query

    db_type [ql.type %]

    host [ql.host %]

    user [ql.user %]

    passwd [ql.pwd %]

    db_name [ql.name %]

    sql_query [ql.query %]



  [ 0.000000E+00ND %]

  ttl 360

</code>



==== param_constraint.conf ====



This file is mandatory. It defines constraints on parameters. There are three kinds of constraints:



  * ''free'' parameters: no constraint on these parameters, they are not written in the ''param_constraint.conf'' file.

  * ''controlled'' parameters: these parameters must select their values in a set of available values indicated in the ''param_constraint.conf'' file.

  * ''fixed'' parameters: these parameters must have the imposed value indicated in the ''param_constraint.conf'' file.



The parameters constraints will be checked at every list loading.



**WARNING**: Some parameters cannot be constrained, they are: ''msg_topic.keywords'' (see [[parameters-sending#msg_topic|msg-topic]]),''owner_include.source_parameter'' (see [[parameters-definition#owner_include|owner_include]]) and ''editor_include.source_parameter'' (see [[parameters-definition#editor_include|editor_include]]). About ''digest'' parameter (see [[parameters-sending#digest|digest]]), only days can be constrained.



Example:

<code>

  lang                fr,us

  archive.period      days,week,month

  visibility          conceal,noconceal

  shared_doc.d_read   public

  shared_doc.d_edit   editor

</code>



====  edit_list.conf ====



This is an optional file. It defines which parameters/files are editable by owners. See [[list-creation#list_editing|List editing]]. If the family does not have this file, Sympa will look for the one defined on robot level, server site level or distribution level (this file already exists without family context). \\ Note that by default, the ''family_name'' parameter is not writable, you should not change this editing right.



==== automatic_lists_description.conf ====



This file is used if you want to let users create / access to automatic lists using the Sympa web interface. Please, see the [[#user-friendly_automatic_lists|documentation related to this functionnality]].



==== Common list files ====



You can parse several files at list creation, later used by the list. Here are the files you can parse: 



  * ''message.footer.tt2'',

  * ''message.header.tt2'',

  * ''message.footer.mime.tt2'',

  * ''message.header.mime.tt2'',

  * ''info.tt2''



These files will be parsed using the list family data defined in the XML file. You can use the same data in these files as in the [[#config_tt2|config.tt2]] file.



For example, if you add to the family directory a file named ''info.tt2'' containing the following code :



<code>

List [ 0stname %] home page



[ 0escription %]

</code>



If your XML file contain something like this for each list :



<code>

<listname>mylist</listname>

<description>A loooong text describing the purpose of the list</description>

</code>



Then, once you have instantiated the family, each list will contain an ''info'' file with the following content:



<code>

List mylist home page



A loooong text describing the purpose of the list

</code>





Message footers and headers are likely to contain TT2 code themselves (for example, to create [[:manual:message-handling#unsubscription_url|unsubscription links]] at the bottom of the list messages).



In that case, you can use the capacity, offered by TT2, to define [[http://template-toolkit.org/docs/manual/Config.html#section_START_TAG_END_TAG|custom tag delimitors]].



Here's an example of such usage. Let's say I want to create lists with a family, and I want that each list automatically adds an unsubscription URL at the bottom of each message. For this, I'll need to use a message.footer file in each list.



I add a file named ''message.footer.tt2'' to the family directory. It contains the following code :



<code>

[% TAGS <+ +> -%]

The subject of the list is "<+ subject +>", click here to unsubscribe : [% wwsympa_url %]/auto_signoff/[ 0stname %]/[0ser.escaped_email %]

</code>



"Subject" corresponds to a tag in the XML file. Let's say it contains a short description of the list.



Once the family has been instantiated, each list directory will contain a message.footer file containing the following code :



<code>



The subject of the list is "create and share our passion of scrap cooking", click here to unsubscribe : [% wwsympa_url %]/auto_signoff/[ 0stname %]/[0ser.escaped_email %]

</code>



Each time a message is sent to the list (provided you set the ''merge_feature'' parameter to ''on''), this file will be parsed and allow to display the following text at the bottom of each message:



<code>



The subject of the list is "create and share our passion of scrap cooking", click here to unsubscribe : http://lists.domain.tld/auto_signoff/mylist/bob.mcbob                                       0omain.tld

</code>





====  customizable files ====



Families provide a new level of customization for scenarios (see [[authorization-scenarios#authorization_scenarios|Authorization scenarios]]), templates for service messages (see [[customizing#site_template_files|Site template files]]) and templates for web pages (see [[customizing#web_template_files|Web template files]]). Sympa looks for these files in the following level order: list, family, robot, server site or distribution.



Example of custom hierarchy:

<code>

  /home/sympa/etc/families/myfamily/mail_tt2/

  /home/sympa/etc/families/myfamily/mail_tt2/bye.tt2

  /home/sympa/etc/families/myfamily/mail_tt2/welcome.tt2

</code>





===== Instantiation =====



Instantiation allows to generate lists. You must provide an XML file made of list descriptions, the root element being ''family'' and which is only composed of ''list'' elements. List elements are described in section [[list-creation#xml_file_format|XML file format]]. Each list is described by the set of values for affectation list parameters.



Here is a sample command to instantiate a family:



<code>

sympa.pl --instantiate_family my_family --robot samplerobot --input_file /path/to/my_file.xml

</code>



This means lists that belong to family ''my_family'' will be created under the robot ''my_robot'' and these lists are described in the file ''my_file.xml''. Sympa will split this file into several XML files describing lists. Each list XML file is put in each list directory.



**--close_unknown** option can be added to automatically close undefined lists during a new instantation\\

**--quiet** option can be added to skip the report printed to STDOUT



Example:



<code>

  <?xml version="1.0" ?>

  <family>

    <list>

      <listname>liste1</listname>

      <subject>a list example</subject>

      <description/>

      <status>open</status>

      <shared_edit>editor</shared_edit>

      <shared_read>private</shared_read>

      <language>fr</language>

      <owner multiple="1">

        <email>foo@renater.fr</email>

        <gecos>C.R.U.</gecos>

      </owner>

      <owner multiple="1">

        <email>foo@emnsp.fr</email>

      </owner>

      <owner_include multiple="1">

        <source>my_file</source>

      </owner_include>

      <sql>

        <type>oracle</type>

        <host>sqlserv.admin.univ-x.fr</host>

        <user>stdutilisateur</user>

        <pwd>monsecret</pwd>

        <name>les_etudiants</name>

        <query>SELECT DISTINCT email FROM etudiant</query>

      </sql>

    </list>

    <list>

      <listname>liste2</listname>

      <subject>a list example</subject>

      <description/>

      <status>open</status>

      <shared_edit>editor</shared_edit>

      <shared_read>private</shared_read>

      <language>fr</language>

      <owner multiple="1">

        <email>foo@renater.fr</email>

        <gecos>C.R.U.</gecos>

      </owner>

      <owner multiple="1">

        <email>foo@enmsp.fr</email>

      </owner>

      <owner_include multiple="1">

        <source>my_file</source>

      </owner_include>

      <sql>

        <type>oracle</type>

        <host>sqlserv.admin.univ-x.fr</host>

        <user>stdutilisateur</user>

        <pwd>monsecret</pwd>

        <name>les_etudiants</name>

        <query>SELECT DISTINCT email FROM etudiant</query>

      </sql>

    </list>

     ...

  </family>

</code>



Each instantiation describes lists. Compared with the previous instantiation, there are three cases:



  * list creation: new lists described by the new instantiation;

  * list modification: lists already existing but possibly changed because of changed parameters values in the XML file or because of changed family properties;

  * list removal: lists no more described by the new instantiation. In this case, the listmaster must validate his choice on command line. If the list is removed, it is set in status ''family_closed'', or if the list is recovered, the list XML file from the previous instantiation is got back to go on as a list modification then.



After list creation or modification, parameters constraints are checked:



  * ''fixed'' parameter: the value must be the one imposed;

  * ''controlled'' parameter: the value must be one of the set of available values;

  * ''free'' parameter: there is no checking.



diagram



In case of modification (see diagram), allowed customizations can be preserved:



  * (1): for all parameters modified  (through the web interface), indicated in the ''config_changes'' file, values can be collected in the old list configuration file, according to new family properties:

    * ''fixed'' parameter: the value is not collected,

    * ''controlled'' parameter: the value is collected only if constraints are respected,

    * ''free'' parameter: the value is collected;

  * (2): a new list configuration file is made with the new family properties;

  * (3): collected values are set in the new list configuration file.



Notes:



  * For each list problem (as family file error, error parameter constraint, error instantiation, etc.), the list is set in status ''error_config'' and listmasters are notified. Then they will have to perform any necessary action in order to put the list in use.

  * For each list closure in family context, the list is set in status ''family_closed'' and owners are notified.

  * For each overwritten list customization, owners are notified.



=====  Modification =====



To modify a family, you have to edit family files manually. The modification will be effective while the next instanciation. \\ **WARNING**: The family modification must be done just before an instantiation. Otherwise, alive lists would not respect new family properties and they would be set in status ''error_config'' immediately.



=====  Closure =====



Closes every list (installed under the indicated robot) of this family: list status is set to ''family_closed'', aliases are removed and subscribers are removed from DB (a dump is created in the list directory to allow restoration of the list).



Here is a sample command to close a family:

<code>

   sympa.pl --close_family my_family --robot samplerobot

</code>





=====  Adding a list to a list family =====



Adds a list to the family without instantiating the whole family. The list is created as if it was created during an instantiation, under the indicated robot. The XML file describes the list and the root element is ''<list>''. List elements are described in section [[list-creation#list_creation_on_command_line_with_sympa.pl|List creation on command line with sympa.pl]].



Here is a sample command to add a list to a family:

<code>

   sympa.pl --add_list my_family --robot samplerobot  --input_file /path/to/my_file.xml

</code>



=====  Removing a list from a list family =====



Closes the list installed under the indicated robot: the list status is set to ''family_closed'', aliases are removed and subscribers are removed from DB (a dump is created in the list directory to allow restoring the list).



Here is a sample command to close a list family (same as an orphan list):

<code>

   sympa.pl --close_list my_list@samplerobot

</code>





===== Modifying a family list =====



Modifies a family list without instantiating the whole family. The list (installed under the indicated robot) is modified as if it was modified during an instantiation. The XML file describes the list and the root element is ''<list>''. List elements are described in section [[list-creation#list_creation_on_command_line_with_sympa.pl|List creation on command line with sympa.pl]].



Here is a sample command to modify a list to a family:

<code>

   sympa.pl --modify_list my_family --robot samplerobot --input_file /path/to/my_file.xml

</code>



===== Editing list parameters in a family context =====



According to file ''edit_list.conf'', editing rights are controlled. See [[list-creation#list_editing|List editing]]. But in a family context, constraints parameters are added to editing right as it is summarized in this array:



array



Note: in order to preserve list customization for instantiation, every parameter modified (through the web interface) is indicated in the ''config_changes'' file.



===== Family unsubscription =====



Using a global family message.footer.tt2 file, you can add at the end of each message sent from a family list a global unsubscription link. Here's what you could put in such message.footer.tt2:



<code>

[% TAGS <+ +> -%]

To stop receiving messages from <+ family_config.display +>, click on this link: [% wwsympa_url %]/family_signoff_request/<+ family_config.name +>/[0ser.escaped_email %]



</code>



By clicking this link, the user will  be redirected to the Sympa web interface where she will be informed that a confirmation message was just sent to her. If she clicks the confirmation link in this mesasge, she will be removed from all the past and future lists of this family.



====== Automatic list creation ======



<note tip>**Situation**: you want to create lists according to specified criteria (age, geographical location, etc.).\\

**Problem**: Creating all the possible lists would result in thousands of list creation, many of them (but you don't know which one...) would never be used.</note>



Automatic list creation allows you to define those potential lists through family parameters, but they will not be created at once. The mailing list creation is triggered when Sympa receives a message addressed to this list.



To enable automatic list creation, you will have to:



  * configure your MTA to queue messages for these lists in an appropriate spool;

  * define a family associated to such lists;

  * configure Sympa to enable the feature.







=====  Configuring your MTA =====



==== The familyqueue solution (with postfix) ====





To do so, you have to configure your MTA for it to add a custom header field to messages. The easiest way is to customize your aliases manager, so that mails for automatic lists are not delivered to the normal ''queue'' program, but to the ''familyqueue'' dedicated one. For example, you can decide that the name of those lists will start with the ''auto-'' pattern, so you can process them separately from other lists you are hosting.



''familyqueue'' expects 2 arguments: the list name and family name (whereas the ''queue'' program only expects the list address).



Now let's start with a use case: we need to communicate to groups of co-workers, depending on their age and their occupation. We decide that, for example, if we need to write to all CTOs who are fifty years old, we will use the ''auto-cto.50@lists.domain.com'' mailing list. The occupation and age informations are stored in our LDAP directory (but of course we could use any Sympa data source: SQL, files...). We will create the ''age-occupation'' family.



First of all we configure our MTA to deliver mail to '''auto-*''' to ''familyqueue'' for the ''age-occupation'' family.  We'll also need to tell the MTA to accept mail for addresses that do not yet exist since by default postfix will reject mail for unknown local users.



<code>

  /etc/postfix/main.cf

      ...

      transport_maps = regexp:/etc/postfix/transport_regexp

      local_recipient_maps = pcre:/etc/postfix/local_recipient_regexp unix:passwd.byname $alias_maps



  /etc/postfix/transport_regexp

      /^.*-owner\@lists\.domain\.com$/      sympabounce:

      /^auto-.*\@lists\.domain\.com$/       sympafamily:

      /^.*\@lists\.domain\.com$/            sympa:



  /etc/postfix/local_recipient_regexp

      /^.*-owner\@lists\.domain\.com$/  1

      /^auto-.*\@lists\.domain\.com$/   1



  /etc/postfix/master.cf

      sympa     unix  -       n       n       -       -       pipe

        flags=R user=sympa argv=/home/sympa/bin/queue ${recipient}

      sympabounce  unix  -       n       n       -       -       pipe

        flags=R user=sympa argv=/home/sympa/bin/bouncequeue ${user}

      sympafamily  unix  -       n       n       -       -       pipe

        flags=R user=sympa argv=/home/sympa/bin/familyqueue ${user} age-occupation



</code>



A mail sent to ''auto-cto.50@lists.domain.com'' will be queued to the ''/home/sympa/spool/automatic'' spool, defined by the ''queueautomatic'' ''sympa.conf'' parameter (see [[conf-parameters/part2#queueautomatic|queueautomatic]]). The mail will first be processed by an instance of the ''sympa.pl'' process dedicated to automatic list creation, then the mail will be sent to the newly created mailing list.



==== The sympa-milter solution (with sendmail) ====



If you don't use postfix or don't want to dig in postfix alias management, you have an alternative solution for automatic listes management: sympa-milter.



This program is a contribution by [[Jose-Marcio.Martins@ensmp.fr|Jose-Marcio Martins da Cruz]].



What it does is checking all incoming mails and, if it recognizes a message to an automatic list, adds the relevant headers in it and places it in Sympa's automatic spool. It replaces familyqueue.



For all the doc, we assume you're using sendmail.



This is the procedure to make it work:



=== Install sympa-milter ===



You can download the latest version at the following address: [[http://j-chkmail.ensmp.fr/sympa-milter/]].



Once you have the archive, decompress it: ''tar xzvf sympa-milter-0.6.tgz''.



You will need the ''libmilter'' library to build the sympa milter. This can be found in the development files of sendmail. You can install it, for example on a RedHat system, with the following command:



<code>

yum install sendmail-devel

</code>



Then install the program:



<code>

# cd sympa-milter-0.6/

# ./configure

# make

# make install

</code>



The default install directory is ''/usr/local/sympa-milter/'' (you can change this value with the ''--prefix'' configure option).



The install process also adds a launcher into ''/etc/init.d/'', named ''sympa-milter''. You'll need to setup links to it under ''/etc/rc3.d''. If you're using Fedora like Linux distributions, you can use ''/sbin/chkconfig'' to setup these links.



<code>

/sbin/chkconfig sympa-milter on

</code>



You must then set up the configuration file, ''sympa-milter.conf''. You will find a sample configuration file inside ''/usr/local/sympa-milter/etc'' directory. This file contains two sections whose border are XML-like tags. Inside a section, a parameter is defined on a single line by the sequence:



''parameters_name            parameter_value''



  * the general section, between the ''<general>'' and ''</general>'' tags is used to define, well general parameters, related to the program execution. It contains the following items:



    * log_level (positive integer value):	the amount of logs generated by sympa-milter;



    * log_facility (string):			the syslog facility in which the program will log;



    * log_severity (string: yes/no):		If you enable this, ''syslog'' will include a string like ''[ID 000000 local6.info]'' in each log line, allowing you to identify the log level and facility.



    * socket (string):				the socket used by the application; must be the same as the one defined in your MTA;



    * spool_dir (string): 			the absolute path to the''[[http://www.sympa.org/wiki/manual/organization#spools|automatic]]'' spool in which messages should be placed;



    * pid_file (string):			the absolute path to the pid file (default = ''/usr/local/sympa-milter/var/sympa-milter.pid'');



    * run_as_user (string)			the user the uid under which to execute sympa-milter (default = ''sympa'', but changeable by a ''configure'' script option); this must be the same as the one running sympa;



    * run_as_group				the group the gid under which to execute sympa-milter (default = ''sympa'', but changeable by a ''configure'' script option); this must be the same as the one running sympa;



  * the family definition section, between the ''<families>'' and ''</families>'' tags is used to define the regular expressions which will allow sympa-milter to catch list creation messages. This section can contain an unlimited number of identically built lines, following this syntax:



<code>

family		recipient_regular_expression

</code>



You should use "plussed aliases" (at least with sendmail) to identify user existence more easily.



Here is an example of ''sympa-milter.conf'', filled-up with default values :



<code>

#

# Section general

#

<general>

log_level		10

log_facility            local6

log_severity            yes



socket                  inet:2030@localhost



spool_dir               /usr/local/sympa-milter/var



pid_file                /usr/local/sympa-milter/var/sympa-milter.pid



run_as_user             sympa

run_as_group            sympa

</general>

#

# Section families

#

<families>

# Syntax :

#     family		recipient regular expression

#

joe                  ^joe+.*@one.domain.com

toto                 ^bob+toto@other.domain.com

best                 ^best.*@another.domain.com

</families>

</code>



<note>

**Note:** It is probably better to make all your regular expression start with "^". This way, bouncing messages won't be caught by sympa-milter and normally processed.

</note>



You can use any regular expression to define the addresses used by your family.



=== Set up your MTA ===



What you must do to make all the thingy to work is:



  * setting up your MTA to use sympa-milter:



<code>O InputMailFilters=sympa-milter

Xsympa-milter, S=inet:2030@localhost, T=C:2m;S:20s;R:20s;E:5m

</code>



  * defining aliases to prevent sendmail from howling that a user (corresponding to your automatic list) doesn't exist. If all your automatic lists start with "auto", for example you can write:



<code>

auto    : /dev/null

</code>



**or**



<code>

auto	: "some_file"

</code>



Reload your MTA config. All set!



=====  Defining the list family =====



We need to create the appropriate ''etc/families/age-occupation/config.tt2''. All the magic comes from the TT2 language capabilities. We define on-the-fly the LDAP source, thanks to TT2 macros.



<code>

  /home/sympa/etc/families/age-occupation/config.tt2

      ...

      user_data_source include2



      [%

      occupations = {

          cto = { title=>"chief technical officer", abbr=>"CHIEF TECH OFF" },

          coo = { title=>"chief operating officer", abbr=>"CHIEF OPER OFF" },

          cio = { title=>"chief information officer", abbr=>"CHIEF INFO OFF" },

      }

      nemes = listname.split('-');

      THROW autofamily "SYNTAX ERROR: listname must begin with 'auto-' " IF (nemes.size != 2 || nemes.0 != 'auto');

      tokens = nemes.1.split('\.');

      THROW autofamily "SYNTAX ERROR: wrong listname syntax" IF (tokens.size != 2 || ! occupations.${tokens.0} || tokens.1 < 20 || tokens.1 > 99 );

      age = tokens.1 div 10;

      %]



      custom_subject [[0ccupations.${tokens.0}.abbr %] OF [% tokens.1 %]]



      subject Every [% tokens.1 %] years old [0ccupations.${tokens.0}.title %]



      include_ldap_query

      attrs mail

      filter (&(objectClass=inetOrgPerson)(employeeType=[0ccupations.${tokens.0}.abbr %])(personAge=[% age %]*))

      name ldap

      port 389

      host ldap.domain.com

      passwd ldap_passwd

      suffix dc=domain,dc=com

      timeout 30

      user cn=root,dc=domain,dc=com

      scope sub

      select all

</code>



The main variable you get is the name of the current mailing list via the ''listname'' variable as used in the example above.



=====  Configuring Sympa =====



Now we need to enable automatic list creation in Sympa. To do so, we have to:



  * set the ''automatic_list_feature'' parameter to ''on'' and define who can create automatic lists via the ''automatic_list_creation'' (points to an automatic_list_creation scenario);

  * set the ''queueautomatic'' ''sympa.conf'' parameter to the spool location where we want these messages to be stored (it has to be different from the ''/home/sympa/spool/msg'' spool).



You can make Sympa delete automatic lists that were created with zero list members; to do so, you should set the ''automatic_list_removal'' parameter to ''if_empty''.



<code>

  /home/sympa/etc/sympa.conf

      ...

      automatic_list_feature  on

      automatic_list_creation public

      queueautomatic          /home/sympa/spool/automatic

      automatic_list_removal    if_empty

</code>



While writing your own ''automatic_list_creation'' scenarios, be aware that:



  * when the scenario is evaluated, the list is not yet created; therefore you can not use the list-related variables;

  * you can only use the ''smtp'' and ''smime'' authentication methods in scenario rules (you cannot request the md5 challenge). Moreover, only the ''do_it'' and ''reject'' actions are available.



Now you can send message to auto-cio.40 or auto-cto.50, and the lists will be created on the fly.



You will receive an 'unknown list' error if either the syntax is incorrect or the number of subscriber is zero.





====== User-friendly automatic lists ======



<WRAP center round important 60%>

This feature is available starting Sympa 6.1.12

</WRAP>





While [[#automatic_list_creation|automatic lists]] save a lot of efforts to listmasters, they still remain hard to use for users. Most of the difficulty resides in the proper constitution of a list name. For example, if you use three fields to build your lists names, users will need to know, in order to use an automatic list:

  * the prefix to tag the automatic lists

  * the order of the fields to use

  * the separator between each field value

  * the values each field can take and the semantics associated to each value.



Most users will never adopt this system as long as you have to manually compose the list email address. That's why most systems using automatic lists do it through a specialized user interface, using Thunderbird plugins or a dedicated web service.



The user-friendly automatic lists is there to let user create and find automatic lists using a point and click interface in the Sympa web GUI (though the classical approach - lists are created by a mail sending - still works).



===== Feature =====



==== Pseudo demo ====



Here are three screenshots describing the core functionnalities of the automatic lists in the Sympa web interface.



Once it is configured, users can select a new tab from the main Sympa tab panel. It displays a form. In this form, the user must select one value in each category. These categories describe the people the user wants to contact. The name of the automatic list created will be a concatenation of the values corresponding to the radio buttons selected.



{{:manual:listes_auto_creation_form.png|}}



Once the form is submitted, Sympa check whether the list exists already. If not, the list is created with the same mechanism described in the [[#automatic_list_creation|automatic lists feature]]. The user is then automatically redirected to the message composing space of the automatic list.



{{listes_auto_composition.png?800|Message composiing in the newly created list}}



The list keeps existing after its creation. the user can therefore use its archives. Finding a list is just a matter of filling the first form and, once the message composing space is displayed, click on the "archives" link in the list menu.



{{listes_auto_archives.png?800|Archives from an automatic list}}



==== Configuration ====



=== Sympa.conf configuration ===



To make the automatic lists available through the web interface, these families must be declared in sympa.conf (or robot.conf) using the ''[[manual:conf-parameters:part1#automatic_list_families|automatic_list_families]]'' parameter.



The following values are expected for each family:



  * ''name'': the name of the family to be used by Sympa. It is the actual family name (i.e. the name of the directory containing the family definition);

  * ''display'': a short name used in the web interface

  * ''prefix'': the prefix that will be used to tag the lists of this family (to be interpreted by the MTA to redirect messages to this list to the familyqueue program;

  * ''prefix_separator'': the prefix that will be inserted between the prefix and the string composed from informations taken from the list creation form.

  * ''classes_separator'': the character string that will separate each class value in the list name.

  * ''family_owners_list'': the name of a list whose users will be allowed to create automatic lists if you use the ''automatic_list_creation.family_owner'' scenario.



In this doc, we suppose you have defined this parameter with the following value:



<code>

automatic_list_families	name=fo:prefix=fo:display=Company contact lists:prefix_separator=+:classes_separator=-:family_owners_list=fo@dev-sympa.renater.fr;name=cgt:prefix=cgt:display=Company other contact lists:prefix_separator=+:classes_separator=-:family_owners_list=cgt@dev-sympa.renater.fr

</code>



Also, to make the automatic lists creation form available, you must change the value of the ''[[manual:conf-parameters:part1#automatic_list_creation|automatic_list_creation]]'' parameter to ''family_owner''. This is a default scenario provided by Sympa that will allow autoamtic list creation to the follwing users:

  * the listmasters

  * the subscribers to a list defined is sympa.conf ''[[manual:conf-parameters:part1#automatic_list_families|automatic_list_families]]'' parameter for each family.



Here is the code of this scenario:



<code>

title.gettext Restricted to people subscribed to the list of family owners.



is_listmaster([sender])	smtp,dkim,md5,smime		->	do_it

is_subscriber([family->family_owners_list],[sender])	smtp,dkim,md5,smime		->	do_it

true()	smtp,dkim,md5,smime		->	reject,quiet

</code>



Once you've done that, restart the web server. You should, as listmaster, see two new tabs in the main Sympa menu:



{{:manual:listes_auto_tabs.png|Automatic lists tabs}}



Clicking on one of thses tabs will redirect you to the automatic lists creation form which, if you are following this doc step by step, should still be empty as our automatic lists families are not created yet.



=== Create automatic lists families ===



To set up this functionnality, you need first to [[#automatic_list_creation|create at least an automatic lists family]]. You can define as many families as you wish.



A feature that can be usefull is the family unsubscription, if you wish.



On thing important when you create the config.tt2 of the families is the order in which the semantics of the data contained in the family name. If you want your lists name to look like "<prefix>+<age>-<occupation>@domaine.tld", you will need to make sure that in your config.tt2 you actually use the first item you find in the list name as the age and the second as the occupation. Otherwise, you're screwed.



This is a very important point to keep in mind when you create the ''automatic_lists_description.conf'' file in the section below: make sure that the order you define for each class will make them appear at the right place in the list name, according to what you defined in your config.tt2.



=== Customize the list families to make them available online ===



To display a form for a family, you need to add a new file to the family folder: ''automatic_lists_description.conf''. This file contains the description of the fields used to:

  * compose the list name,

  * extract the subscribers,

  * generally speaking, instantiate variables in the family tt2 files.



Here is a summary of the structure of this file:



<code>

[class

        name <short ascii name> 

        stamp <A short description of the class>

        description <A user focused explanation of the semantics of the class>

	order <An integer> 

        instances [order <An integer> --- value <short ascii value> --- tag <A human readable description of the value> (%%)] (n times)

] (n times)



</code>



This file can contain only one type of parameter: ''class''. A class defines a particular quality used to describe the population we want to subscribe to a list: Function, age class, location, etc. The class itself is described with several metadata:

  * ''name'': The name used to describe this class internally. Its only use is to name the radio button fields in the list creation form.

  * ''stamp'': A short name used to make a title in the lists creation form

  * ''description'': A longer description of the class displayed below the title in the list creation form.

  * ''order'': This field contain an integer. It corresponds to the position this class will have intht e list creation form AND the position in which it will be used in the list name. I'll repeat just to make it clear: **The order of a class corresponds to the position this class will have in the list name**. It must then be chosen carefully and definitively **before** you put the automatic lists in production. If you change this order, the users won't be able to retrieve the lists created prior to the order change.

  * ''instances'': The instances are the values a class can actually take. These values are all defined in this field in the form of a character string((It should be described as a hierarchical structure instead but Sympa can't handle configurations with more than one level of hierarchy. So this character string is a short term solution to make the feature available anyway.)). The string must be structured as follows:

    * each instance is defined by a string of the form: order <An integer> --- value <short ascii value> --- tag <A human readable description of the value>, where:

      * ''order'' is followed by an integer. This integer only defined the position this value will hold in the lists creation form. It has no other usage.

      * ''value'' is the actual value of the instance, the one that will be used in the list name. It must then only contain sequences compatible with the local part of an email address as defined by the RFC 822.

      * ''tag'' is a short text that will be displayed in the character form in lieu of the actual instance value.

    * The isntances are separated by the "%%" character string.



Here is an example of ''automatic_lists_description.conf'', with three classes, each one having four possible instances and a fifth one including each possible values of the instances:



<code>

class

        name function

        stamp Function

        description The function in the company

		order 0 

        instances order 0 --- value researcher --- tag Researcher %0rder 1 --- value engineer --- tag Engineers %0rder 2 --- value administrative --- tag Administrative personal %0rder 3 --- value mascott --- tag Mascott %0rder 4 --- value all --- tag All



class

        name location 

        stamp Location 

        description The geographic location where the people work

        order 1

        instances order 0 --- value rennes --- tag Rennes, capital of the world %0rder 1 --- value redon --- tag Redon, AKA "where the hell is it?" %0rder 2 --- value brest --- tag Brest %0rder 3 --- value erquy --- tag Erquy %0rder 4 --- value all --- tag All



class

        name division

        stamp Division

        description The division people are working in

        order 2

        instances order 0 --- value financial --- tag Financial division %0rder 1 --- value research --- tag R&D division %0rder 2 --- value production --- tag Production division %0rder 3 --- value bastards --- tag Commercial division --- default 1 %0rder 4 --- value all --- tag All



</code>



Here is the form that would be displayed by this version of ''automatic_lists_description.conf'':



{{:manual:listes_auto_creation_form.png|Automatic lists creation form.}}



If you submit this form, using the exact configuration given as example in this doc, you will create a list called ''fo+researcher-rennes-bastards@domain.tld''.




======  List configuration parameters ======





The configuration file is made of paragraphs separated by blank lines and introduced by a keyword.



Even though there is a very large number of possible parameters, the minimal list definition is very short. The only parameters required are ''owner'' (or ''owner_include'') and ''subject''. All other parameters have a default value.



<note warning>

Configuration parameters must be separated by blank lines and BLANK LINES ONLY!

</note>



Using the web interface the following categories are used to organize the large number of parameters :



    * [[parameters-definition|List definition]];

    * [[parameters-sending|Sending/receiving setup]];

    * [[parameters-privileges|Privileges]];

    * [[parameters-archives|Archives]];

    * [[parameters-bounces|Bounce management]];

    * [[parameters-data-sources|Data sources setup]];

<if manual_version >= 6.1>

    * [[parameters-DKIM|DKIM parameters]];

</if>

    * [[parameters-others|Others]].
======  List parameters: definition ======



===== subject =====



''subject'' //subject-of-the-list//



This parameter indicates the subject of the list, which is sent in response to the ''LISTS'' mail command. The subject is a free form text limited to one line.



===== visibility =====



(Default value: ''conceal'')



The ''visibility'' parameter is defined by an authorization scenario (see [[authorization-scenarios|Authorization scenarios]]).



This parameter indicates whether the list should feature in the output generated in response to a ''LISTS'' command.



  * ''visibility'' ''conceal'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/visibility.conceal|view]]) \\

  * ''visibility'' ''intranet'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/visibility.intranet|view]]) \\

  * ''visibility'' ''noconceal'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/visibility.noconceal|view]]) \\

  * ''visibility'' ''secret'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/visibility.secret|view]]) \\





===== owner =====



The ''config'' file contains one ''owner'' paragraph per owner. It concerns static owner definition. For dynamic definition, see [[parameters-definition#owner_include|owner_include]].



Example:

<code>

  owner

  email serge.aumont@renater.fr

  gecos C.R.U.

  info Tel: 02 99 76 45 34

  reception nomail

</code>



The list owner is usually the person who has the authorization to send ''ADD'' and ''DELETE'' commands (see [[sympa-commands#owner_commands|Owner commands]]) on behalf of other users.



When the [[parameters-privileges#subscribe|subscribe parameter]] specifies a restricted list, it is the owner who has the exclusive right to subscribe users, and it is therefore to the owner that ''SUBSCRIBE'' requests will be forwarded.



There may be several owners of a single list; in this case, each owner is declared in a paragraph starting with the ''owner'' keyword.



The ''owner'' directive is followed by one or several lines giving details regarding the owner's characteristics:



  * ''email'' //address// \\  Owner's e-mail address;

  * ''reception nomail'' \\ Optional attribute for an owner who does not wish to receive emails. Useful to define an owner with multiple email addresses: they are all recognized when Sympa receives mail, but thanks to ''reception nomail'', not all of these addresses need to receive administrative email from Sympa;

  * ''visibility'' //conceal | noconceal// \\Define if the list owner should be listed on the list web page.

  * ''gecos'' //data// \\ Public information about the owner;

  * ''info'' //data// \\ Available since release 2.3. Private information about the owner;

  * ''profile privileged | normal'' \\ Available since release 2.3.5. Profile of the owner. This is currently used to restrict access to some features of //WWSympa//, such as adding new owners to a list.





===== owner_include =====



The ''config'' file contains one ''owner_include'' paragraph per data inclusion file (see [[list-definition#data_inclusion_file|Data inclusion file]]. It concerns dynamic owner definition: inclusion of external data. For static owner definition and more information about owners see [[list-parameters#par-owner|par-owner]].



Example:

<code>

  owner_include

  source myfile

  source_parameters a,b,c

  reception nomail

  profile normal

</code>



The ''owner_include'' directive is followed by one or several lines giving details regarding the owner(s) included characteristics:



  * ''source myfile'' \\ This is an mandatory field: it indicates the data inclusion file ''myfile.incl''. This file can be a template. In this case, it will be interpreted with values given by subparameter ''source_parameter''. Note that the ''source'' parameter should NOT include the //.incl// file extension; the ''myfile.incl'' file should be located in the ''data_sources'' directory.

  * ''source_parameters a,b,c'' \\ It contains an enumeration of the values that will be affected to the ''param'' array used in the template file (see [[list-definition#data_inclusion_file|Data inclusion file]]). This parameter is not mandatory.

  * ''reception nomail'' \\ Optional attribute for owner(s) who does not wish to receive emails.

  * ''visibility'' //conceal | noconceal// \\Define if the included owners should be listed on the list web page.

  * ''profile privileged | normal'' \\ Profile of the owner(s).



===== editor =====



The ''config'' file contains one ''editor'' paragraph per moderator (or editor). It concerns static editor definition. For dynamic definition and more information about editors see [[parameters-definition#editor_include|editor_include]].



Example:

<code>

  editor

  email Pierre.Paul@myuniversity.edu

  gecos Pierre paul (Computer center director)

</code>



Only the editor of a list is authorized to send messages to the list when the [[parameters-sending#send|send]] is set to either ''editor'', ''editorkey'', or ''editorkeyonly''. The ''editor'' parameter is also consulted in certain other cases (''privateoreditorkey'').



The syntax of this directive is the same as that of the [[parameters-definition#owner|owner parameter]], even when several moderators are defined.



===== editor_include =====



The ''config'' file contains one ''editor_include'' paragraph per data inclusion file (see [[list-definition#data_inclusion_file|Data inclusion file]]). It concerns dynamic editor definition: inclusion of external data. For static editor definition and more information about moderation see [[parameters-definition#editor|editor]].



Example:

<code>

  editor_include

  reception mail

  source myfile

  source_parameters a,b,c

</code>



The syntax of this directive is the same as that of the [[parameters-definition#owner_include|owner_include'' parameter]], even when several moderators are defined.



===== topics =====



''topics'' computing/internet,education/university



This parameter allows the classification of lists. You may define multiple topics as well as hierarchical ones. //WWSympa//'s list of public lists uses this parameter. This parameter is different from the ''msg_topic'' parameter used to tag emails.



===== host =====



(Default value: ''domain robot parameter'')



''host'' //fully-qualified-domain-name//



Domain name of the list, default is the robot domain name set in the related ''robot.conf'' file or in file ''/etc/sympa.conf''.



===== lang =====



(Default value: ''lang robot parameter'')



Example:



<code>lang en_US</code>



This parameter defines the language used for the list. It is used to initialize a user's language preference; Sympa command reports are extracted from the associated message catalog.



See [[customizing#internationalization|Internationalization]] for available languages.



===== family_name =====



This parameter indicates the name of the family that the list belongs to.



Example:



<code>family_name my_family</code>



===== latest_instantiation =====



This parameter indicates the date of the latest instantiation.



Example:

<code>

  latest_instantiation

  email joe.bar@renater.fr

  date 27 jui 2004 at 09:04:38

  date_epoch 1090911878

</code>

===== send =====



(Default value: ''private'')



The ''send'' parameter is defined by an authorization scenario (see [[authorization-scenarios#authorization_scenarios|Authorization scenarios]]).



This parameter specifies who can send messages to the list. Valid values for this parameter are pointers to //scenarios//.



  * ''send'' ''closed'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.closed|view]]) \\

  * ''send'' ''editorkey'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.editorkey|view]]) \\

  * ''send'' ''editorkeyonly'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.editorkeyonly|view]]) \\

  * ''send'' ''editorkeyonlyauth'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.editorkeyonlyauth|view]]) \\

  * ''send'' ''intranet'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.intranet|view]]) \\

  * ''send'' ''intranetorprivate'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.intranetorprivate|view]]) \\

  * ''send'' ''newsletter'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.newsletter|view]]) \\

  * ''send'' ''newsletterkeyonly'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.newsletterkeyonly|view]]) \\

  * ''send'' ''private'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.private|view]]) \\

  * ''send'' ''private_smime'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.private_smime|view]]) \\

  * ''send'' ''privateandeditorkey'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.privateandeditorkey|view]]) \\

  * ''send'' ''privateandnomultipartoreditorkey'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.privateandnomultipartoreditorkey|view]]) \\

  * ''send'' ''privatekey'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.privatekey|view]]) \\

  * ''send'' ''privatekeyandeditorkeyonly'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.privatekeyandeditorkeyonly|view]]) \\

  * ''send'' ''privateoreditorkey'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.privateoreditorkey|view]]) \\

  * ''send'' ''privateorpublickey'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.privateorpublickey|view]]) \\

  * ''send'' ''public'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.public|view]]) \\

  * ''send'' ''public_nobcc'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.public_nobcc|view]]) \\

  * ''send'' ''publickey'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.publickey|view]]) \\

  * ''send'' ''publicnoattachment'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.publicnoattachment|view]]) \\

  * ''send'' ''publicnomultipart'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/send.publicnomultipart|view]]) \\



===== digest =====



''digest'' //daylist// //hour//://minutes//



Definition of ''digest'' mode. If this parameter is present, subscribers can select the option of receiving messages in multipart/digest MIME format. Messages are then grouped together, and compilations of messages are sent to subscribers in accordance with the rythm selected with this parameter.



''Daylist'' designates a list of days in the week in numeric format (from 0 for Sunday to 6 for Saturday), separated by commas.



Example: <code>digest 1,2,3,4,5 15:30</code>



In this example, Sympa sends digests at 3:30 PM from Monday to Friday.



**WARNING**: if the sending time is too late (i.e. around midnight), Sympa may not be able to process it in time. Therefore do not set a digest time later than 23:00.



N.B.: In family context, ''digest'' can be constrained only on days.



===== digest_max_size =====



(Default value: ''25'')



Maximum number of messages in a digest. If the number of messages exceeds this limit, then multiple digest messages are sent to each recipient.



===== available_user_options =====



The ''available_user_options'' parameter starts a paragraph to define available options for the subscribers of the list.



  * ''reception'' //modelist//

(Default value: ''reception mail,notice,digest,summary,nomail,txt,html,urlize,not_me'')

//modelist// is a list of modes (''mail'', ''notice'', ''digest'', ''summary'', ''nomail'', ''txt'',''html'', ''urlize'', ''not_me'', ''topics''), separated by commas. Only these modes will be allowed for the subscribers of the list. If a subscriber has a delivery mode other than those specified in that list, Sympa uses the mode specified in the ''default_user_options'' paragraph.



Example:

<code>

  ## Nomail reception mode is not available

  available_user_options

  reception  	digest,mail

</code>





===== default_user_options =====



The ''default_user_options'' parameter starts a paragraph to define a default profile for the subscribers of the list. 



<note>This profile only applies for newly subscribed/included list members. It means that if you change the value of ''default_user_options'' in a list, if will not apply to the existing list members.</note>



  * ''reception notice | digest | summary | nomail | mail'' \\ Mail reception mode.

  * ''visibility conceal | noconceal'' \\ Visibility of the subscriber with the ''REVIEW'' command.



Example:

<code>

  default_user_options

  reception  	digest

  visibility	noconceal

</code>



===== msg_topic =====



The ''msg_topic'' parameter starts a paragraph to define a message topic used to tag a message. For each message topic, you have to define a new paragraph (see [[reception-mode#message_topics|Message topics]]).



Example:

<code>

  msg_topic

  name os

  keywords linux,mac-os,nt,xp

  title Operating System

</code>



Parameters ''msg_topic.name'' and ''msg_topic.title'' are mandatory. ''msg_topic.title'' is used on the web interface (''other'' is not allowed for the ''msg_topic.name'' parameter). The ''msg_topic.keywords'' parameter allows to select automatically message topic by searching keywords in the message.



N.B.: in a family context, ''msg_topic.keywords'' parameter is not mandatory.



===== msg_topic_keywords_apply_on =====



The ''msg_topic_keywords_apply_on'' parameter defines which part of the message is used to perform automatic tagging (see [[reception-mode#message_topics|Message topics]]).



Example:



<code>msg_topic_key_apply_on subject</code>



Its values can be: ''subject'', ''body'' and ''subject_and_body''.



===== msg_topic_tagging =====



The ''msg_topic_tagging'' parameter indicates if tagging is optional or required for a list. (See [[reception-mode#message_topics|Message topics]])



Example:



<code>msg_topic_tagging optional</code>



Its values can be "optional", "required_moderator" or "required_sender". When topic is required, a tagging request is sent to the list moderator or to the message sender depending of this parameter value.



===== reply_to_header =====



The ''reply_to_header'' parameter starts a paragraph defining what Sympa will place in the ''Reply-To:'' SMTP header field of the messages it distributes.



  * ''value sender | list | all | other_email'' (Default value: ''sender'')



This parameter indicates whether the ''Reply-To:'' field should indicate the sender of the message (''sender''), the list itself (''list''), both list and sender (''all'') or an arbitrary email address (defined by the ''other_email'' parameter).



Note: it is inadvisable to change this parameter, and particularly inadvisable to set it to ''list''. Experience has shown it to be almost inevitable that users, mistakenly believing that they are replying only to the sender, will send private messages to a list. This can lead, at the very least, to embarrassment, and sometimes to more serious consequences.



  * ''other_email'' //an_email_address// \\ If ''value'' was set to ''other_email'', this parameter indicates the email address to be used.

  * ''apply respect | forced'' (Default value: ''respect''). \\ The default is to respect (preserve) the existing ''Reply-To:'' SMTP header field in incoming messages. If set to ''forced'', the ''Reply-To:'' SMTP header field will be overwritten.



Example:

<code>

  reply_to_header

  value other_email

  other_email listowner@my.domain

  apply forced

</code>



===== anonymous_sender =====



''anonymous_sender'' //value//



If this parameter is set for a list, all messages distributed through the list are made anonymous. SMTP ''From:'' headers in distributed messages are altered to contain the value of the ''anonymous_sender'' parameter. Various other fields are removed (''Received:'', ''Reply-To:'', ''Sender:'', ''X-Sender:'', ''Message-id:'', ''Resent-From:''.



===== custom_header =====



''custom_header'' //header-field//'':'' //value//



This parameter is optional. The headers specified will be added to the headers of messages distributed via the list. As of release 1.2.2 of Sympa, it is possible to put several custom header lines in the configuration file at the same time.



Example:

<code>custom_header X-url: http://www.renater.fr/listes/apropos/sedesabonner.faq.html</code>





===== rfc2369_header_fields =====



''rfc2369_header_fields'' //help,archive// (Default value: ''rfc2369_header_fields'' ''sympa.conf'' parameter)



RFC2369 compliant header fields (List-xxx) to be added to distributed messages. These header-fields should be implemented by MUA's, adding menus.





===== remove_headers =====



(Default value: ''remove_headers'' ''sympa.conf'' parameter)



You can define the list of SMTP header fields that should be removed from incoming messages. Check the [[manual:conf-parameters:part2|equivalent sympa.conf parameter documentation]] for further details.



===== remove_outgoing_headers =====



(Default value: ''remove_outgoing_headers'' ''sympa.conf'' parameter)



You can define the list of SMTP header fields that should be removed before Sympa distributes a message to list members. Check the [[manual:conf-parameters:part2|equivalent sympa.conf parameter documentation]] for further details.



===== reject_mail_from_automates_feature =====



(Default value: ''reject_mail_from_automates_feature'' ''sympa.conf'' parameter)



You can disable the rejection of mails detected of automated, see [[manual:conf-parameters:part2#reject_mail_from_automates_feature]]



===== custom_subject =====



''custom_subject'' //value//



This parameter is optional. It specifies a string which is added to the subject of distributed messages (intended to help users who do not use automatic tools to sort incoming messages). This string will be surrounded by '[]' characters.



The custom subject can also refer to the <nowiki>[0st.sequence%]</nowiki> or <nowiki>[0st.name%]</nowiki> variables that will get instanciated.



Example: <code>custom_subject sympa-users</code>



Other example: <code>custom_subject newsletter num [0st.sequence%]</code>



===== footer_type =====



''footer_type mime | append'' (Default value: ''mime'')



This parameter is optional. List owners may decide to add message headers or footers to messages sent through the list. This parameter defines the way a footer/header is added to a message.



  * ''footer_type'' ''mime'' \\ The default value. Sympa will add the footer/header as a new MIME part. If the message is in multipart/alternative format, no action is taken (since this would require another level of MIME encapsulation).

  * ''footer_type'' ''append'' \\ Sympa will not create new MIME parts, but will try to append the header/footer to the body of the message. ''/home/sympa/list_data/mylist/message.footer.mime'' will be ignored. Headers/footers may be appended to text/plain messages only.
===== info =====



The scenario definition of who can view the info page of a list.

  * ''info'' ''open'' (default)

  * ''info'' ''private''



===== subscribe =====



(Default value: ''open'')



The ''subscribe'' parameter is defined by an authorization scenario (see [[authorization-scenarios#authorization_scenarios|Authorization scenarios]]).



The ''subscribe'' parameter defines the rules for subscribing to the list. Predefined authorization scenarios are:



  * ''subscribe'' ''auth'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/subscribe.auth|view]]);

  * ''subscribe'' ''auth_notify'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/subscribe.auth_notify|view]]);

  * ''subscribe'' ''auth_owner'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/subscribe.auth_owner|view]]);

  * ''subscribe'' ''closed'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/subscribe.closed|view]]);

  * ''subscribe'' ''intranet'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/subscribe.intranet|view]]);

  * ''subscribe'' ''intranetorowner'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/subscribe.intranetorowner|view]]);

  * ''subscribe'' ''open'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/subscribe.open|view]]);

  * ''subscribe'' ''open_notify'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/subscribe.open_notify|view]]);

  * ''subscribe'' ''open_quiet'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/subscribe.open_quiet|view]]);

  * ''subscribe'' ''owner'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/subscribe.owner|view]]);

  * ''subscribe'' ''smime'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/subscribe.smime|view]]);

  * ''subscribe'' ''smimeorowner'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/subscribe.smimeorowner|view]]).



===== unsubscribe =====



(Default value: ''open'')



The ''unsubscribe'' parameter is defined by an authorization scenario (see [[authorization-scenarios#authorization_scenarios|Authorization scenarios]]).



This parameter specifies the unsubscription method for the list. Use ''open_notify'' or ''auth_notify'' to allow owner notification of each unsubscribe command. Predefined authorization scenarios are:



  * ''unsubscribe'' ''auth'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/unsubscribe.auth|view]]);

  * ''unsubscribe'' ''auth_notify'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/unsubscribe.auth_notify|view]]);

  * ''unsubscribe'' ''closed'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/unsubscribe.closed|view]]);

  * ''unsubscribe'' ''open'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/unsubscribe.open|view]]);

  * ''unsubscribe'' ''open_notify'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/unsubscribe.open_notify|view]]);

  * ''unsubscribe'' ''owner'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/unsubscribe.owner|view]]).



===== add =====



(Default value: ''owner'')



''add'' parameter is defined by an authorization scenario (see [[authorization-scenarios#authorization_scenarios|Authorization scenarios]]).



This parameter specifies who is authorized to use the ''ADD'' command. Predefined authorization scenarios are:



  * ''add'' ''auth'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/add.auth|view]]);

  * ''add'' ''closed'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/add.closed|view]]);

  * ''add'' ''owner'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/add.owner|view]]);

  * ''add'' ''owner_notify'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/add.owner_notify|view]]).



===== del =====



(Default value: ''owner'')



The ''del'' parameter is defined by an authorization scenario (see [[authorization-scenarios#authorization_scenarios|Authorization scenarios]]).



This parameter specifies who is authorized to use the ''DEL'' command. Predefined authorization scenarios are:



  * ''del'' ''auth'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/del.auth|view]]);

  * ''del'' ''closed'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/del.closed|view]]);

  * ''del'' ''owner'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/del.owner|view]]);

  * ''del'' ''owner_notify'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/del.owner_notify|view]]).



===== invite =====



(Default value: ''owner'')



The invite command is used to invite someone to subscribe. It should be prefered to the ''add'' command in most cases. This parameter define who can use it. The privilege uses scenario specification.



===== review =====



(Default value: ''owner'')



''review'' parameter is defined by an authorization scenario (see [[authorization-scenarios#authorization_scenarios|Authorization scenarios]]).



This parameter specifies who can use ''REVIEW'' (see [[sympa-commands#user_commands|User commands]]), administrative requests.



Predefined authorization scenarios are:



  * ''review'' ''closed'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/review.closed|view]]);

  * ''review'' ''intranet'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/review.intranet|view]]);

  * ''review'' ''listmaster'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/review.listmaster|view]]);

  * ''review'' ''owner'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/review.owner|view]]);

  * ''review'' ''private'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/review.private|view]]);

  * ''review'' ''public'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/review.public|view]]).





===== remind =====



(Default value: ''owner'')



The ''remind'' parameter is defined by an authorization scenario (see [[authorization-scenarios#authorization_scenarios|Authorization scenarios]]).



This parameter specifies who is authorized to use the ''remind'' command. Predefined authorization scenarios are:



  * ''remind'' ''listmaster'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/remind.listmaster|view]]);

  * ''remind'' ''owner'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/remind.owner|view]]).



=====  shared_doc =====



This paragraph defines read and edit access to the shared document repository.



==== d_read ====



(Default value: ''private'')



The ''d_read'' parameter is defined by an authorization scenario (see [[authorization-scenarios#authorization_scenarios|Authorization scenarios]]).



This parameter specifies who can read shared documents (access the contents of a list's ''shared'' directory).



Predefined authorization scenarios are:



  * ''d_read'' ''owner'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/d_read.owner|view]]);

  * ''d_read'' ''private'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/d_read.private|view]]);

  * ''d_read'' ''p'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/d_read.p|view]]);

  * ''d_read'' ''public'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/d_read.public|view]]).



==== d_edit ====



(Default value: ''owner'')



The ''d_edit'' parameter is defined by an authorization scenario (see [[authorization-scenarios#authorization_scenarios|Authorization scenarios]]).



This parameter specifies who can perform changes within a list's ''shared'' directory (i.e. upload files and create subdirectories).



Predefined authorization scenarios are:



  * ''d_edit'' ''editor'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/d_edit.editor|view]]);

  * ''d_edit'' ''owner'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/d_edit.owner|view]]);

  * ''d_edit'' ''private'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/d_edit.private|view]]);

  * ''d_edit'' ''p'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/d_edit.p|view]]);

  * ''d_edit'' ''public'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/d_edit.public|view]]).



Example:

<code>

  shared_doc

  d_read		public

  d_edit		private

</code>



==== quota ====



''quota'' //number-of-Kbytes//



This parameter specifies the disk quota for the document repository, in kilobytes. If quota is exceeded, file uploads fail.
====== Archive related ======



Sympa show archive both by email and web interface. In versions prior to 5.2, archives were duplicated. Mail archives were stored in the ''/home/sympa/list_data/mylist/archives/'' directory.



Web archives are accessed through the web interface (with access control), they are stored in a directory defined in "wwsympa.conf" ([[web-interface#arc_path|parameter arc_path]]. Version 5.2 and later use only this archive repository.







===== archive (OBSOLETE) =====



If the "config" file contains an "archive" paragraph, Sympa will manage an archive for this list.



Example:



<code>

  archive

  period week

  access private

</code>



If the ''archive'' parameter is specified, archives are accessible to users through the ''GET'' [[sympa-commands#user_commands|command]], and the index of the list archives is provided in reply to the ''INDEX'' command (the last message of a list can be consulted using the ''LAST'' command).



''period day | week | month | quarter | year''



This parameter specifies how archiving is organized: by ''day'', ''week'', ''month'', ''quarter'' or ''year''. Generation of automatic list archives requires the creation of an archive directory at the root of the list directory (''/home/sympa/list_data/mylist/archives/''), used to store these documents.



''access private | public | owner | closed''



This parameter specifies who is authorized to use the ''GET'', ''LAST'' and ''INDEX'' [[sympa-commands#user_commands|commands]].



===== web_archive =====



If the ''config'' file contains a ''web_archive'' paragraph, Sympa will copy all messages distributed via the list to the ''queueoutgoing'' spool. It is intended to be used with //WWSympa//'s HTML archive tools. This paragraph must contain at least the access parameter to control who can browse the web archive.



Example:



<code>

  web_archive

  access private

  quota 10000

</code>



====  web_archive.access ====



The ''access_web_archive'' parameter is defined by an authorization scenario (see [[authorization-scenarios#authorization_scenarios|Authorization scenarios]]).



Predefined authorization scenarios are:



  * ''access'' ''closed'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/access_web_archive.closed|view]]);

  * ''access'' ''intranet'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/access_web_archive.intranet|view]]);

  * ''access'' ''listmaster'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/access_web_archive.listmaster|view]]);

  * ''access'' ''owner'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/access_web_archive.owner|view]]);

  * ''access'' ''private'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/access_web_archive.private|view]]);

  * ''access'' ''public'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/access_web_archive.public|view]]).



==== web_archive.quota ====



''quota'' //number-of-Kbytes//



This parameter specifies the disk quota for the list's web archive, in kilobytes. This parameter's default is the ''default_archive_quota'' ''sympa.conf'' parameter. If quota is exceeded, messages are no more archived and list owners are notified. When the archive reaches 95%, list owners are warnt.



==== web_archive.max_month ====



"max_month" parameter specify the maximum number of archives packet created. Old month are removed when new month is created. 



===== archive_crypted_msg =====



(Default value: ''cleartext'')



''archive_crypted_msg cleartext | decrypted''



This parameter defines Sympa's behavior when archiving S/MIME encrypted messages. If set to ''cleartext'', the original encrypted form of the message will be archived; if set to ''decrypted'', a decrypted message will be archived. Note that this applies to both mail and web archives, and also to digests.
====== Bounce related ======



===== bounce =====



This paragraph defines bounce management parameters (you may also read the [[manual/bounces|section that describe  how Sympa deal with bounces]] ) :



  * ''warn_rate'' \\ (Default value: ''bounce_warn_rate robot parameter'') \\ The list owner receives a warning whenever a message is distributed and the number (percentage) of bounces exceeds this value.

  * ''halt_rate'' \\ (Default value: ''bounce_halt_rate robot parameter'') \\ "NOT USED YET" \\ If bounce rate reaches the ''halt_rate'', messages for the list will be halted, i.e. they are retained for subsequent moderation. Once the number of bounces exceeds this value, messages for the list are no longer distributed.

  * ''expire_bounce_task'' \\ (Default value: ''daily'') \\ Name of the task template used to remove old bounces. Useful to remove bounces for a subscriber email if some messages are distributed without receiving new bounces. In this case, the subscriber email seems to be OK again. Active if ''task_manager.pl'' is running.



Example:



<code>

  ## Owners are warnt with 100ouncing addresses

  ## message distribution is halted with 200ouncing rate

  bounce

  warn_rate	10

  halt_rate	20

</code>



===== bouncers_level1 =====



  * ''rate'' \\ (Default value: ''default_bounce_level1_rate'' sympa.conf parameter)\\ Each bouncing user has a score (from 0 to 100). This parameter defines the lower score for a user to be a level 1 bouncing user. For example, with default values, users with a score between 45 and 75 are level 1 bouncers.

  * ''action remove_bouncers | notify_bouncers | none'' \\ (Default value: ''notify_bouncers'') \\ This parameter defines which task is automaticaly applied on level 1 bouncing users: for example, automatically notify all level 1 bouncers.

  * ''notification none | owner | listmaster'' \\ (Default value: ''owner'') \\ When an automatic task is performed on level 1 bouncers, a notification email can be sent to listowners or listmasters. This email contains the adresses of the users concerned and the name of the action perform.



===== bouncers_level2 =====



  * ''rate'' \\ (Default value: ''default_bounce_level2_rate'' sympa.conf parameter) \\ Each bouncing user has a score (from 0 to 100). This parameter defines the lower score for a user to be a level 2 bouncing user. For example, with default values, users with a score between 75 and 100 are level 2 bouncers.

  * ''action remove_bouncers | notify_bouncers | none'' \\ (Default value: ''remove_bouncers'') \\ This parameter defines which task is automatically applied on level 2 bouncing users: for example, automatically notify all level 2 bouncers.

  * ''notification none | owner | listmaster'' \\ (Default value: ''owner'') \\ When an automatic task is performed on level 2 bouncers, a notification email can be sent to listowners or listmasters. This email contains the adresses of the users concerned and the name of the action performed.



Example:



<code>

      ## All bouncing adresses with a score between 75 and 100

      ## will be unsubscribed, and listmaster will receive an email

      Bouncers level 2

      rate:75 Points

      action: remove\_bouncers

      Notification: Listmaster

</code>



===== welcome_return_path =====



''welcome_return_path unique | owner'' \\ (Default value: ''welcome_return_path robot parameter'') \\ If set to ''unique'', the welcome message is sent using a unique return path in order to remove the subscriber immediately in case of bounce. See the [[conf-parameters/part3#welcome_return_path|welcome_return_path sympa.conf parameter]].





===== remind_return_path =====



''remind_return_path unique | owner'' \\ (Default value: ''remind_return_path robot parameter'') \\ Same as ''welcome_return_path'', but applied to remind messages. See the [[conf-parameters/part3#remind_return_path|remind_return_path sympa.conf parameter]].



===== verp_rate =====



(Default value: ''verp_rate host parameter'') \\ See [[bounces#verp|VERP]] for more information on VERP in Sympa.



When ''verp_rate'' is null, VERP is not used; if ''verp_rate'' is 100 0.000000E+00RP is always in use.



VERP requires plussed aliases to be supported and the bounce+* alias to be installed.





===== tracking =====



This paragraph defines message tracking management. (you may also read the [[manual/bounces|section that describe  how Sympa deal with bounces]] ) :



  * ''delivery_status_notification'' \\ (Default value: ''tracking_delivery_status_notification robot parameter'') format ''on''|''off''\\control DSN request for outgoing messages. If this parameter is ''off'', tracking is disabled otherwise, tracking for delivery is requested by Sympa for all messages of that list. 

  * ''message_delivery_notification'' \\ (Default value: ''racking_message_delivery_notification'') format ''on''|''off''|''on_demand''\\control MDN request for outgoing messages. If set to ''on_demand'' tracking by MDN is active if this service is requeted by the original sender of each message (that is the incoming message contain a Disposition-Notification header).



Example:



<code>

  ## 

  tracking

  delivery_status_notification	on

  message_delivery_notification	on_demand

</code>



====== Data source related ======











===== user_data_source =====



(Default value: ''include2'', if using an RDBMS)



''user_data_source file | database | include | include2''



**Starting with Sympa 5.3.x ''include'' is interpreted as ''include2''. Since Sympa 5.4.x ''include2'' is the only supported value for this parameter.**



**Background** : //In the former days Sympa did not use a RDBMS and subscribers informations were stored in flat ''subscribers'' files. We then introduced the ability to include members defined in an external data source and also the optional use of a RDBMS to store subscribers. Therefore we created the 'user_data_source' parameter. We ended up merging the 'database' and 'include' features with 'include2'. The goal was then to give up the 'user_data_source' parameter and we have almost reached this goal. Starting with Sympa 5.3.x the 'include' mode is considered a synonym for 'include2' and more recently we have removed the 'file' and 'database' modes in the development version of Sympa. This means that in Sympa 5.4 the only supported mode will be 'include2'. Note that migration process has been automated.//



Sympa allows the mailing list manager to choose how Sympa loads subscriber and administrative data. User information can be stored in a text file or relational database, or included from various external sources (list, flat file, result of LDAP or SQL query).



  * ''user_data_source'' ''file'' \\ When this value is used, subscriber data are stored in a file whose name is defined by the ''subscribers'' parameter in ''sympa.conf''. This is maintained for backward compatibility.

  * ''user_data_source'' ''database'' \\ This mode was introduced to allow data to be stored in a relational database. This can be used for instance to share subscriber data with an HTTP interface, or simply to ease the administration of very large mailing lists. It has been tested with MySQL, using a list of 200,000 subscribers. We strongly recommend the use of a database instead of text files. It will improve performance and solve possible conflicts between Sympa and //WWSympa//. Please refer to [[database#sympa_and_its_database|Sympa and its database]].

  * ''user_data_source'' ''include'' \\ Here, subscribers are not defined //extensively// (enumeration of their email addresses) but //intensively// (definition of criteria subscribers must satisfy). Includes can be performed by extracting email addresses using an SQL or LDAP query, or by including other mailing lists. At least one include paragraph, defining a data source, is needed. Valid include paragraphs (see below) are ''include_file'', ''include_list'', ''include_remote_sympa_list'', ''include_sql_query'' and ''include_ldap_query''.

  * ''user_data_source'' ''include2'' \\ This is a replacement for the include mode. In this mode, the members cache is no more maintained in a DB File but in the main database instead. The behavior of the cache is detailed in the database chapter (see [[database#management_of_the_include_cache|Management of the include cache]]). This is the only mode that runs the database for administrative data in the database.







===== ttl =====



(Default value: ''3600'')



''ttl'' ''delay_in_seconds''



Sympa caches user data extracted using the ''include_xx'' configuration parameters. Their TTL (time-to-live) within Sympa can be controlled using this parameter. The default value is 3600.





===== distribution_ttl =====



(Default: default_distribution_ttl sympa.conf parameter)



''distribution_ttl'' ''delay_in_seconds''





Before some actions it is useful to make sure that the user's list is up-to-date. To avoid to execute synchronization any time these actions are performed, this parameter defines the delay since the last synchronization after which the user's list will be updated before performing the action.



The actions for which this parameter is checked are :

  * list members review

  * message distribution



===== sql_fetch_timeout =====



(Default: default_sql_fetch_timeout sympa.conf parameter)



''sql_fetch_timeout'' ''delay_in_seconds''



Defines the timeout while running a fetch() on an include_sql_query data source.



===== include_list =====



''include_list'' ''listname''



All subscribers of list ''listname'' become members of the current list. You may include as many lists as required, using one ''include_list'' ''listname'' line for each included list. Any list at all may be included; the ''user_data_source'' definition of the included list is irrelevant, and you may therefore include lists which are also defined by the inclusion of other lists. Be careful, however, not to include list ''A'' in list ''B'' and then list ''B'' in list ''A'', since this would result in an infinite loop.



Example: <code>include_list local-list</code>



Other example: <code>include_list other-local-list@other-local-robot</code>



===== include_remote_sympa_list =====



''include_remote_sympa_list''



Sympa can contact another Sympa service using HTTPS to fetch a remote list in order to include each member of a remote list as a subscriber. You may include as many lists as required, using one ''include_remote_sympa_list'' paragraph for each included list. Be careful, however, not to give rise to an infinite loop making cross includes.



For this operation, one Sympa site acts as a server while the other acts as a client. On the server side, the only setting needed is to give permission to the remote Sympa to review the list. This is controlled by the review authorization scenario.



From the client side you must define the remote list dump URI.



  * ''remote_host'' //remote_host_name//;

  * ''port'' //port// (Default 443);

  * ''path'' //absolute path// (in most cases, for a list name foo /sympa/dump/foo).



Because HTTPS offert an easy and secure client authentication, HTTPS is the only protocol currently supported. An additional parameter is needed: the name of the certificate (and the private key) to be used:



  * ''cert'' ''list'' \\ The certificate to be used is the list certificate (the certificate subject distinguished name email is the list address). The certificate and private key are located in the list directory.

  * ''cert'' ''robot'' \\ The certificate used is then related to Sympa itself: the certificate subject distinguished name email looks like ''sympa@my.domain'' and files are located in the virtual host ''etc'' directory if a virtual host is used; otherwise, they are located in ''/home/sympa/etc''.





===== include_sql_query =====



''include_sql_query''



It is used to start a paragraph defining the SQL query parameters:



  * ''db_type'' //dbd_name// \\ The database type (mysql, SQLite, Pg, Oracle, Sybase, CSV, ...). This value identifies the Perl DataBase Driver (DBD) to be used, and is therefore case-sensitive.

  * ''host'' //hostname// \\ The Database Server Sympa will try to connect to.

  * ''db_port'' //port// \\ If not using the default RDBMS port, you can specify it.

  * ''db_name'' //sympa_db_name// \\ The hostname of the database system.

  * ''user'' //user_id// \\ The user id to be used when connecting to the database.

  * ''passwd'' //some secret// \\ The user passwd for ''user''.

  * ''sql_query'' //a query string// \\ The SQL query string. No fields other than email addresses should be returned by this query!

  * ''connect_options'' //option1=x;option2=y// \\ This parameter is optional and specific to each RDBMS. \\ These options are appended to the connect string. \\ Example:

<code>

    include_sql_query

          db_type mysql

          host sqlserv.admin.univ-x.fr

          user stduser

          passwd mysecret

          db_name studentbody

          sql_query SELECT DISTINCT email FROM student

          connect_options mysql_connect_timeout=5

</code>

Connexion timeout is set to 5 seconds.

  * ''db_env'' //list_of_var_def// \\ This parameter is optional; it is needed for some RDBMS (Oracle). \\ Sets a list of environment variables to set before database connection. This is a ';' separated list of variable assignment. \\ Example for Oracle:

<code>

    db_env	ORACLE_TERM=vt100;ORACLE_HOME=/var/hote/oracle/7.3.4

</code>

  * ''name'' //short name// \\ This parameter is optional. It provides a human-readable name to this data source. It will be used within the REVIEW page to indicate from whicj datasource each list member comes (useful when having multiple data sources).

  * ''f_dir'' ///var/csvdir// \\ This parameter is optional. It is only used when accessing a CSV data source.  When connecting to a CSV data source, this parameter indicates the directory where the CSV files are located.



Example:



<code>

  include_sql_query

        db_type oracle

        host sqlserv.admin.univ-x.fr

        user stduser

        passwd mysecret

        db_name studentbody

        sql_query SELECT DISTINCT email FROM student

</code>





===== include_ldap_query =====



''include_ldap_query''



This paragraph defines parameters for a LDAP query returning a list of subscribers. This feature requires the ''Net::LDAP'' (perlldap) PERL module.



  * ''host'' //ldap_directory_hostname// \\ Name of the LDAP directory host or a comma separated list of host:port. The second form is useful if you are using some replication LDAP host. \\ Example: <code>host ldap.renater.fr:389,backup-ldap.renater.fr:389</code>

  * ''port'' //ldap_directory_port// (OBSOLETE) \\ Port on which the Directory accepts connections.

  * ''user'' //ldap_user_name// \\ Username with read access to the LDAP directory.

  * ''passwd'' //LDAP_user_password// \\ Password for ''user''.

  * ''use_ssl'' //yes|no// \\ If set to ''yes'', the LDAPS protocol is used.

  * ''ssl_version'' //sslv2|sslv3|tls// (Default value: ''sslv3'') \\ If using SSL, this parameter defines whether SSL or TLS is used.

  * ''ssl_ciphers'' //ciphers used// (Default value: ''ALL'') \\ If using SSL, this parameter specifies which subset of cipher suites are permissible for this connection, using the standard OpenSSL string format. The default value of Net::LDAPS for ciphers is ''ALL'', which allows all ciphers, even those that do not encrypt!

  * ''suffix'' //directory name// \\ Defines the naming space covered by the search (optional, depending on the LDAP server).

  * ''timeout'' //delay_in_seconds// \\ Timeout when connecting the remote server.

  * ''filter'' //search_filter// \\ Defines the LDAP search filter (RFC 2254 compliant).

  * ''attrs'' //mail_attribute// (Default value: ''mail'') \\ The attribute containing the email address(es) in the object returned.

  * ''select'' //first ''|'' all// (Default value: ''first'') \\ Defines whether to use only the first address, or all the addresses, in case multiple values are returned.

  * ''scope'' //base ''|'' one ''|'' sub// (Default value: ''sub'') \\ By default, the search is performed on the whole tree below the specified base object. This may be changed by specifying a scope parameter with one of the following values:

    * **base**: search only the base object,

    * **one**: search the entries immediately below the base object,

    * **sub**: search the whole tree below the base object.



Example:

<code>

      include_ldap_query

      host ldap.renater.fr

      suffix dc=cru, dc=fr

      timeout 10

      filter (&(cn=aumont) (c=fr))

      attrs mail

      select first

      scope one

</code>



===== include_ldap_2level_query =====



''include_ldap_2level_query''



This paragraph defines parameters for a two-level LDAP query returning a list of subscribers. Usually, the first-level query returns a list of DNs and the second-level queries convert the DNs into email addresses. This paragraph is used only if ''user_data_source'' is set to ''include''. This feature requires the ''Net::LDAP'' (perlldap) Perl module.



  * ''host'' //ldap_directory_hostname// \\ Name of the LDAP directory host or a comma separated list of host:port. The second form is useful if you are using some replication LDAP host.

Example: <code>host ldap.renater.fr:389,backup-ldap.renater.fr:389</code>

  * ''port'' //ldap_directory_port// (OBSOLETE) \\ Port on which the Directory accepts connections (this parameter is ignored if host definition includes port specification).

  * ''user'' //ldap_user_name// \\ Username with read access to the LDAP directory.

  * ''passwd'' //LDAP_user_password// \\ Password for ''user''.

  * ''use_ssl'' //yes|no// \\ If set to ''yes'', the LDAPS protocol is used.

  * ''ssl_version'' //sslv2|sslv3|tls// (Default value: ''sslv3'') \\ If using SSL, this parameter defines whether SSL or TLS is used.

  * ''ssl_ciphers'' //ciphers used// (Default value: ''ALL'') \\ If using SSL, this parameter specifies which subset of cipher suites are permissible for this connection, using the standard OpenSSL string format. The default value of Net::LDAPS for ciphers is ''ALL'', which allows all ciphers, even those that do not encrypt!

  * ''suffix1'' //directory name// \\ Defines the naming space covered by the first-level search (optional, depending on the LDAP server).

  * ''timeout1'' //delay_in_seconds// \\ Timeout for the first-level query when connecting to the remote server.

  * ''filter1'' //search_filter// \\ Defines the LDAP search filter for the first-level query (RFC 2254 compliant).

  * ''attrs1'' //attribute// \\ 

The attribute containing the data in the object returned, that will be used for the second-level query. This data is referenced using the syntax ''[attrs1]''.

  * ''select1'' //first ''|'' all ''|'' regex// (Default value: ''first'') \\ Defines whether to use only the first attribute value, all the values, or only those values matching a regular expression.

  * ''regex1'' //regular_expression// (Default value: ) \\ The Perl regular expression to use if ''select1'' is set to ''regex''.

  * ''scope1'' //base ''|'' one ''|'' sub// (Default value: ''sub'') \\ By default the first-level search is performed on the whole tree below the specified base object. This may be changed by specifying a scope parameter with one of the following values:

    * **base**: search only the base object,

    * **one**: search the entries immediately below the base object,

    * **sub**: search the whole tree below the base object.

  * ''suffix2'' //directory name// \\ Defines the naming space covered by the second-level search (optional, depending on the LDAP server). The ''[attrs1]'' syntax may be used to substitute data from the first-level query into this parameter.

  * ''timeout2'' //delay_in_seconds// \\ Timeout for the second-level queries when connecting to the remote server.

  * ''filter2'' //search_filter// \\ Defines the LDAP search filter for the second-level queries (RFC 2254 compliant). The ''[attrs1]'' syntax may be used to substitute data from the first-level query into this parameter.

  * ''attrs2'' //mail_attribute// (Default value: ''mail'') \\ The attribute containing the email address(es) in the objects returned from the second-level queries.

  * ''select2'' //first ''|'' all ''|'' regex// (Default value: ''first'') \\ Defines whether to use only the first address, all the addresses, or only those addresses matching a regular expression in the second-level queries.

  * ''regex2'' //regular_expression// (Default value: ) \\ The Perl regular expression to use if ''select2'' is set to ''regex''.

  * ''scope2'' //base ''|'' one ''|'' sub// (Default value: ''sub'') \\ By default the second-level search is performed on the whole tree below the specified base object. This may be changed by specifying a scope2 parameter with one of the following values:

    * **base**: search only the base object,

    * **one**: search the entries immediately below the base object,

    * **sub**: search the whole tree below the base object.



Example: 



<code>

(cn=testgroup,dc=cru,dc=fr should be a groupOfUniqueNames here)



      include_ldap_2level_query

      host ldap.univ.fr

      port 389

      suffix1 ou=Groups,dc=univ,dc=fr

      scope1 one

      filter1 (&(objectClass=groupOfUniqueNames) (| (cn=cri)(cn=ufrmi)))

      attrs1 uniquemember

      select1 all

      suffix2 [attrs1]

      scope2 base

      filter2 (objectClass=n2pers)

      attrs2 mail

      select2 first

</code>





===== include_file =====



''include_file'' ''path_to_file''



The file should contain one email address per line with an optional user description, separated from the email address by spaces (lines beginning with a '#' are ignored).



Sample included file:



<code>

  ## Data for Sympa member import

  john.smith@sample.edu  John Smith - math department

  sarah.hanrahan@sample.edu  Sarah Hanrahan - physics department

</code>





===== include_remote_file =====



''include_remote_file''



This parameter (organized as a paragraph) does the same as the ''include_file'' parameter, except that it gets a remote file. Using this method you should be able to include any //exotic// data source that is not supported by Sympa. The paragraph is made of the following entries:



  * ''url'' //url_of_remote_file// \\ This is the URL of the remote file to include.

  * ''user'' //user_name// \\ This entry is optional. It is only used if HTTP basic authentication is required to access the remote file.

  * ''passwd'' //user_passwd// \\ This entry is optional. It is only used if HTTP basic authentication is required to access the remote file.



Example:

<code>

  include_remote_file

  url     http://www.myserver.edu/myfile

  user    john_netid

  passwd  john_passwd

</code>
====== Command related ======





===== remind_task =====



(Default value: no default value)



This parameter states which model is used to create a ''remind'' task. A ''remind'' task regularly sends to the subscribers a message which reminds them of their subscription to the list.



Example: <code>remind_task annual</code>





===== expire_task =====



(Default value: no default value)



This parameter states which model is used to create an ''expire'' task. An ''expire'' task regularly checks the subscription (or subscription renewal) date of subscribers and asks them to renew their subscription. If they do not, they are deleted.



Example: <code>expire_task annual</code>



===== review =====



(Default value: ''owner'')



The ''review'' parameter is defined by an authorization scenario (see [[authorization-scenarios#authorization_scenarios|Authorization scenarios]]).



This parameter specifies who can use the ''REVIEW'' command (see [[sympa-commands#user_commands|User commands]]), administrative requests.



Predefined authorization scenarios are:



  * ''review'' ''closed'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/review.closed|view]]);

  * ''review'' ''intranet'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/review.intranet|view]]);

  * ''review'' ''listmaster'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/review.listmaster|view]]);

  * ''review'' ''owner'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/review.owner|view]]);

  * ''review'' ''private'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/review.private|view]]);

  * ''review'' ''public'' ([[http://www.sympa.org/distribution/current/src/etc/scenari/review.public|view]]).



====== List tuning ======



===== max_size =====



(Default value: ''max_size robot parameter'')



''max_size'' //number-of-bytes//



Maximum size of a message in 8-bit bytes. The default value is set in the ''/etc/sympa.conf'' file.



===== loop_prevention_regex =====



(Default value: ''loop_prevention_regex sympa.conf parameter'')



''loop_prevention_regex'' //mailer-daemon|sympa|listserv|majordomo|smartlist|mailman//



This regular expression is applied to message sender addresses. If the sender address matches the regular expression, then the message is rejected. The goal of this parameter is to prevent loops between Sympa and other robots.



===== pictures_feature =====



(Default value: ''pictures_feature robot parameter'')



''pictures_feature'' //on | off//



This enables the feature that allows list members to upload a picture that will be shown on the review page.



===== cookie =====



(Default value: ''cookie robot parameter'')



''cookie'' //random-numbers-or-letters//



This parameter is a confidential item for generating authentication keys for administrative commands (''ADD'', ''DELETE'', etc.). This parameter should remain concealed, even for owners. The cookie is applied to all list owners, and is only taken into account when the owner has the ''auth'' parameter (see [[parameters-definition#owner|owner]]).



Example: <code>cookie secret22</code>







===== custom_vars =====



(Default value: empty)



You can create an unlimited number of custom parameters to be used with authorization scenarios, web and mail templates.



  * ''name'': the name of the custom parameter. Can be any character string;

  * ''value'': the value given to this custom parameter. Can be any scalar value.



Example:



<code>

custom_vars

name    sisterList

value   math-teachers

</code>



See [[:manual:customizing#custom_parameters|this parameter usage in Sympa]].



===== custom_attribute =====



(Default value: empty)



This parameter allows the creation of custom user attributes. These attributes values are stored in a XML fragment. See the description of the [[:manual:customizing#custom_attribute|user custom attributes functionality]].



This XML fragment has the form:



<code xml>

<?xml version="1.0" encoding="UTF-8" ?>

  <custom_attributes>

    <custom_attribute id="accr">

      <value> ultra-violet</value>

    </custom_attribute>

    <custom_attribute id="pt">

      <value>0</value>

    </custom_attribute>

  </custom_attributes>

</code>



  * ''id'': the value of the ''id'' attribute in the ''custom_attribute'' element;

  * ''name'': the label used for this attribute in the subscription form;

  * ''comment'': a text displayed in the subscription form to give the users any additional informations that you would find relevant about this attribute (a description of the values to fill in, for example);

  * ''type ( string | text | integer | enum )'': the type of data this attribute contains. The subscription form will control that the data filled by the user belong to this category. ''enum'' means that the value will be selected amongst a set allowed values you must define.

  * ''enum_values'': if ''type'' has the value ''enum'', you must specify at least one allowed value. The web subscription form will contain a selection list with the values you specified.

  * ''optional ( required | optional )'': use "required" if this attribute must be filled by the user, "optional" if it is not mandatory.



===== merge_feature =====



(Default value: ''off'')



''merge_feature'' //on | off//



Customizing messages. If set to 'on', allows the subscribers to send messages with custom users attributes.



=====  priority =====



(Default value: ''default_list_priority robot parameter'')



''priority'' //0-9//



The priority with which Sympa will process messages for this list. This level of priority is applied while the message is going through the spool.



0 is the highest priority. The following priorities can be used: ''0...9 z''. ''z'' is a special priority causing messages to remain spooled indefinitely (useful to hang up a list).



Available since release 2.3.1.



====== Spam protection ======



===== spam_protection =====



(Default value: ''javascript'')



There is a need to protect the Sympa website against spambot which collect email addresses in public websites. Various methods are available into Sympa and you can choose from the ''spam_protection'' and ''web_archive_spam_protection'' parameters. Possible value are:



  * ''javascript'': the address is hidden using a Javascript. Users who enable Javascript can see nice mailto addresses where others have nothing.

  * ''at'': the '@' char is replaced by the string 'AT'.

  * ''none'': no protection against spammers.



===== web_archive_spam_protection =====



(Default value: ''javascript'')



The same as ''spam_protection'', but restricted to the web archive. An additional value is available: ''cookie'', which means that users must submit a small form in order to receive a cookie before browsing the archive. This blocks all robots, even those from search engines.
====== Message reception modes ======



List members can select a reception mode for messages sent to the list. Here is a list of the reception modes: mail, notice, digest, summary, nomail, txt, html, urlize, not_me. The reception mode can be selected either through the web interface or via the ''SET <list> <mode>'' mail command. The available reception modes can be restricted by listmaster/listowner through the [[http://www.sympa.org/manual/parameters-sending#available_user_options|available_user_options]] list/global parameter.





=====  Message topics =====



A list can be configured to have message topics (this notion is different from topics used to class mailing lists). Users can subscribe to these message topics in order to receive a subset of distributed messages: a message can have one or more topics and subscribers will receive only messages that have been tagged with a topic they are subscribed to. A message can be tagged automatically, by the message sender or by the list moderator.



====  Message topic definition in a list ====



Available message topics are defined by list parameters. For each new message topic, create a new ''msg_topic'' paragraph that defines the name and the title of the topic. If a thread is identified for the current message, then the automatic procedure is performed. Otherwise, to use automatic tagging, you should define keywords (see [[parameters-sending#msg_topic|msg_topic]]). To define which part of the message is used for automatic tagging, you have to define the ''msg_topic_keywords_apply_on'' list parameter (see [[parameters-sending#msg_topic_keywords_apply_on|msg_topic_keywords_apply_on]]). Tagging a message can be optional or required, depending on the [[parameters-sending#msg_topic_tagging list parameter]].



====  Subscribing to message topics for list subscribers ====



This feature is only available with the ''normal'' delivery mode. Subscribers can select a message topic to receive messages tagged with this topic. To receive messages that were not tagged, users can subscribe to the topic ''other''. The message topics selected by a subscriber are stored in the Sympa database (''subscriber_table'' table).



====  Message tagging ====



First of all, if one or more ''msg_topic.keywords'' are defined, Sympa tries to tag messages automatically. To trigger manual tagging, by message sender or list moderator, on the web interface, Sympa uses authorization scenarios: if the resulting action is ''editorkey'' (for example in scenario ''send.editorkey''), the list moderator is asked to tag the message. If the resulted action is ''request_auth'' (for example in scenario ''send.privatekey''), the message sender is asked to tag the message. The following variables are available as scenario variables to customize tagging: ''topic'', ''topic-sender'', ''topic-editor'', ''topic-auto'', ''topic-needed'' (see [[authorization-scenarios#authorization_scenarios|Authorization scenarios]]). If message tagging is required and if it was not yet performed, Sympa will ask the list moderator.



Tagging a message will create a topic information file in the ''/home/sympa/spool/topic/'' spool. Its name is based on the listname and the Message-ID. For message distribution, a ''X-Sympa-Topic'' field is added to the message, to allow members to use email filters.



===== Multipart/alternative =====



If available, list members can select the **TXT** or **HTML** reception modes. In these modes, the list member will receive the selected version of a message if the message's content-type is multipart/alternative.

====== Shared documents ======



Shared documents are documents that different users can manipulate online via the web interface of Sympa, provided that they are authorized to do so. A shared document web space is associated with the list, and users can upload, download, delete, etc documents in that web space.



//WWSympa//'s shared web features are fairly rudimentary. It is not our aim to provide a sophisticated tool for web publishing, such as those provided by products like //Rearsite//. It is nevertheless very useful to be able to define privileges on web documents in relation to list attributes such as //subscribers//, //list owners// or //list editors//.



All file and directory names are lowercased by Sympa. It is consequently impossible to create two different documents whose names differ only in their case. The reason why Sympa does this is to allow correct URL links even when using an HTML document generator (typically Powerpoint) which uses random case for file names!



In order to have better control over the documents and to enforce security in the shared document web space, each document is linked to a set of specific control information: its access rights.



A list's shared documents are stored in the ''/home/sympa/list_data/mylist/shared'' directory. This directory is either created via the ''Create shared'' web admin feature, or at list creation time, if the list ''[[parameters-privileges#shared_doc|shared_doc]]'' parameter is set. If you don't want the document repository to be created, you should remove the ''shared_doc'' parameter from the corresponding ''create_list_templates/xx/config.tt2'' files.



This chapter describes how the shared documents are managed, especially as regards their access rights. We will see:



  * the kind of operations which can be performed on shared documents;

  * access rights management;

  * access rights control specifications;

  * actions on shared documents;

  * template files.



===== The three kinds of operations on a document =====



Where shared documents are concerned, there are three kinds of operations which have the same constraints relating to access control:

  * the read operation;

  * the edit operation;

  * the control operation.



==== The read operation ====



If applied to a directory, it opens it and lists its contents (only the sub-documents the user is authorized to "see").



If applied to a file, it downloads it, and in the case of a viewable file (//text/plain//, //text/html//, or image), displays it.



==== The edit operation ====



It allows:

  * subdirectory creation;

  * file uploading;

  * file unzipping;

  * description of a document (title and basic information);

  * online editing of a text file;

  * document (file or directory) deletion. Directories can be deleted only if they are empty.



These different edit actions are equivalent as regards access rights. Users who are authorized to edit a directory can create a subdirectory or upload a file to it, as well as describe or delete it. Users authorized to edit a file can edit it online, describe it, replace or remove it.



==== The control operation ====



The control operation is directly linked to the notion of access rights. If we want shared documents to be secure, we have to control the access to them. Not everybody must be authorized to perform every operation on them. Consequently, each document has specific access rights for reading and editing. Performing a control action on a document involves changing its Read/Edit rights.



The control operation has more restrictive access rights than the other two operations. Only the owner of a document, the privileged owner of the list and the listmaster have control rights over a document. Another possible control action on a document is therefore specifying who owns it.



===== The description file =====



The information (title, owner, access rights...) related to each document must be stored, and so each shared document is linked to a special file called a description file, whose name includes the ''.desc'' prefix.



The description file of a directory having the path ''mydirectory/mysubdirectory'' has the path ''mydirectory/mysubdirectory/.desc'' . The description file of a file having the path ''mydirectory/mysubdirectory/myfile.myextension'' has the path ''mydirectory/mysubdirectory/.desc.myfile.myextension'' .



====  Structure of description files ====



The structure of a document (file or directory) description file is given below. You should //never// have to edit a description file.



<code>

  title

    <description of the file in a few words>



  creation

    email        <email of the owner of the document>

    date_epoch   <date_epoch of the creation of the document>



  access

   read <access rights for read>

   edit <access rights for edit>

</code>



The following example is for a document that subscribers can read, but that only the owner of the document and the owner of the list can edit.



<code>

  title

    module C++ which uses the class List



  creation

    email foo@some.domain.com

    date_epoch 998698638



  access

   read  private

   edit  owner

</code>



===== The predefined authorization scenarios =====



====  The public scenario ====



The ''public'' scenario is the most permissive scenario. It enables anyone (including unknown users) to perform the corresponding action.



====  The private scenario ====



The ''private'' scenario is the basic scenario for a shared space. Every subscriber of the list is authorized to perform the corresponding action. The ''private'' scenario is the default read scenario for ''shared'' when this shared space is created. This can be modified by editing the list configuration file.



====  The scenario owner ====



The scenario ''owner'' is the most restrictive scenario for a shared space. Only the listmaster, list owners and the owner of the document (or those of a parent document) are allowed to perform the corresponding action. The ''owner'' scenario is the default scenario for editing.



====  The scenario editor ====



The scenario ''editor'' is for a moderated shared space for editing. Every suscriber of the list is allowed to edit a document. But this document will have to be installed or rejected by the editor of the list. Documents awaiting for moderation are visible by their author and the editor(s) of the list in the shared space. The editor has also an interface with all documents awaiting. When there is a new document, the editor is notified and when the document is installed, the author is notified too. In case of reject, the editor can notify the author or not.



===== Access control =====



Access control is an important operation performed every time a document is accessed within the shared space.



The access control related to a document in the hierarchy involves an iterative operation on all its parent directories.



====  Listmaster and privileged owners ====



The listmaster and privileged list owners are special users as regards the shared document web space. They are allowed to perform every action on every document. This privilege enables control over the shared space to be maintained. It is impossible to prevent the listmaster and privileged owners from performing any action they please on any document in the shared space.



==== Special case of the shared directory ====



In order to allow access to a root directory to be more restrictive than that of its subdirectories, the ''shared'' directory (root directory) is a special case as regards access control. The access rights for read and edit are those specified in the list configuration file. Control of the root directory is specific. Only the users authorized to edit a list's configuration may change access rights on its ''shared'' directory.



====  General case ====



''mydirectory/mysubdirectory/myfile'' is an arbitrary document in the shared space, but not in the //root// directory. A user **X** wishes to perform one of the three operations (read, edit, control) on this document. The access control will proceed as follows:



  * Read operation \\  To be authorized to perform a read action on ''mydirectory/mysubdirectory/myfile'', **X** must be authorized to read every document making up the path; in other words, he/she must be allowed to read ''myfile'' (the authorization scenario of the description file of ''myfile'' must return ''do_it'' for user **X**), and the same goes for ''mysubdirectory'' and ''mydirectory''). \\ In addition, given that the owner of a document or of its parent directories is allowed to perform **all actions on that document**, ''mydirectory/mysubdirectory/myfile'' may also have read operations performed on it by the owners of ''myfile'', ''mysubdirectory'', and ''mydirectory''. \\ This can be schematized as follows:

<code>

    	X can read <a/b/c>

    	if

    	(X can read <c>

    	AND X can read <b>

    	AND X can read <a>)

    	OR

    	(X owner of <c>

    	OR X owner of <b>

    	OR X owner of <a>)

</code>



  * Edit operation \\  The access algorithm for edit is identical to the algorithm for read:

<code>

    	X can edit <a/b/c>

    	if

    	(X can edit <c>

    	AND X can edit <b>

    	AND X can edit <a>)

    	OR

    	(X owner of <c>

    	OR X owner of <b>

    	OR X owner of <a>)

</code>



  * Control operation \\ The access control which precedes a control action (change rights or set the owner of a document) is much more restrictive. Only the owner of a document or the owners of a parent document may perform a control action:

<code>

    	X can control <a/b/c>

    	if

    	(X owner of <c>

    	OR X owner of <b>

    	OR X owner of <a>)

</code>



=====  Shared document actions =====



The shared web feature has called for some new actions.



  * action ''D_ADMIN'' \\ Creates the shared space, closes it or restore it. The ''d_admin'' action is accessible from a list's **admin** page.

  * action ''D_READ'' \\ Reads the document after read access control. If the document is a folder, it lists all the subdocuments that can be read. If it is a file, it displays it if it is viewable, else downloads it to disk. If the document to be read contains a file named ''index'' or ''index.htm'', and if the user has no permissions other than read on all subdocuments contained, the read action will consist in displaying the index. The ''d_read'' action is accessible from a list's **info** page.

  * action ''D_CREATE_DIR'' \\ Creates a new subdirectory in a directory that can be edited without moderation. The creator is the owner of the directory. The access rights are those of the parent directory.

  * action ''D_DESCRIBE'' \\ Describes a document that can be edited.

  * action ''D_DELETE'' \\  Deletes a document after edit access control. If applied to a folder, it has to be empty.

  * action ''D_UPLOAD'' \\ Uploads a file into a directory that can be edited.

  * action ''D_UNZIP'' \\ Unzips a file into a directory that can be edited without moderation. The whole file hierarchy contained in the ZIP file is installed into the directory.

  * action ''D_OVERWRITE'' \\ Overwrites a file if it can be edited. The new owner of the file is the one who has done the overwriting operation.

  * actions ''D_EDIT_FILE'' and ''D_SAVE_FILE'' \\ Edits a file and saves it after edit access control. The new owner of the file is the one who has done the saving operation.

  * action ''D_CHANGE_ACCESS'' \\ Changes the access rights of a document (read or edit), provided that control of this document is authorized.

  * action ''D_SET_OWNER'' \\ Changes the owner of a directory, provided that control of this document is authorized. The directory must be empty. The new owner can be anyone, but authentication is necessary before any action can be performed on the document.



=====  Template files =====



The following template files have been created for the shared document web space.



====  d_read.tt2 ====



The default page for reading a document. If for a file, displays it (if viewable) or downloads it. If for a directory, displays all readable subdocuments, each of which will feature buttons corresponding to the different actions this subdocument allows. If the directory is editable, displays buttons to describe it or upload a file into it. If the directory is editable without moderation, it displays buttons to create a new subdirectory or to upload a ZIP file in order to install a file hierarchy. If access to the document is editable, displays a button to edit the access to it.



====  d_editfile.tt2 ====



The page used to edit a file. If for a text file, allows it to be edited online. This page also enables another file to be substituted in its place.



====  d_control.tt2 ====



The page to edit the access rights and the owner of a document.



=====  d_upload.tt2 =====



The page to upload a file is only used when the name of the file already exists.





=====  d_properties.tt2 =====



This page is used to edit the description file and to rename it.
====== Sympa and its database ======



Sympa requires a RDBMS to run. Currently you can use one of the following RDBMS: MySQL (version 4.1 minimum), SQLite, PostgreSQL, Oracle, Sybase. Interfacing with other RDBMS requires only a few changes in the code, since the API used, [[http://www.symbolstone.org/technology/perl/DBI/|DBI]] (DataBase Interface), has DBD (DataBase Drivers) for many RDBMS.



Sympa's use of the database and the schema are described in the [[internals/index#database|Internals Document Database Section]].



 



======  Prerequisites ======



You need to have a DataBase System installed (not necessarily on the same host as Sympa), and the client libraries for that Database installed on the Sympa host; provided, of course, that a PERL DBD (DataBase Driver) is available for the RDBMS you chose! Check the [[http://www.symbolstone.org/technology/perl/DBI/|''DBI'' Module Availability]].





======  Installing PERL modules ======



Sympa will use ''DBI'' to communicate with the database system and therefore requires the DBD for your database system. DBI and <nowiki>DBD::YourDB</nowiki> (''Msql-Mysql-modules'' for MySQL) are distributed as CPAN modules. Refer to [[installing-sympa#installing_PERL_and_CPAN_modules|Installing PERL and CPAN modules]] for installation details of these modules.



======  Creating a Sympa DataBase ======



=====  Database structure =====



The Sympa database structure is slightly different from the structure of a ''subscribers'' file. A ''subscribers'' file is a text file based on paragraphs (similar to the ''config'' file); each paragraph completely describes a subscriber. If somebody is subscribed to two lists, he/she will appear in both subscribers files.



The DataBase distinguishes between information relating to a person (email, real name, password) and his/her subscription options (list concerned, date of subscription, delivery mode, visibility option). This results in a separation of the data into two tables : the ''user_table'' and the ''subscriber_table'', linked by a user/subscriber email.



The table concerning owners and editors, the ''admin_table'', is built on the same model as the ''subscriber_table''. It contains owner and editor options (list concerned, administrative role, date of "subscription", delivery mode, private information, gecos and profile option for owners).



=====  Database automatic creation and update =====



At startup, the ''sympa.pl'' process will check if the database (configured in ''sympa;conf'') is available and if it has the expected structure. If not, ''sympa.pl'' process will create the database or update its structure for you. **Note however that this feature is available with mysql and SQLite only**, integration for other RDBMS is less complete. Note that this automated process requires that the mysql ''root'' does not use a password ; if it does, disable it before you run ''sympa.pl'' for the first time.



The automatic procedure will also grant privileges to the ''db_user'' you've declared in ''sympa.conf''.





=====  Database manual creation =====



The ''create_db'' script below will create the Sympa database for you. You can find it in the ''script/'' directory of the distribution (currently scripts are available for MySQL, SQLite, PostgreSQL, Oracle and Sybase).



  * MySQL database creation script:





{{url>http://www.sympa.org/distribution/latest-stable/src/etc/script/create_db.mysql}}



  * SQLite database creation script:



{{url>http://www.sympa.org/distribution/latest-stable/src/etc/script/create_db.SQLite}}



  * PostgreSQL database creation script:



{{url>http://www.sympa.org/distribution/latest-stable/src/etc/script/create_db.Pg}}



  * Sybase database creation script:



{{url>http://www.sympa.org/distribution/latest-stable/src/etc/script/create_db.Sybase}}



  * Oracle database creation script:



{{url>http://www.sympa.org/distribution/latest-stable/src/etc/script/create_db.Oracle}}



You can execute the script using a simple SQL shell such as mysql, psql or sqlplus.



MySQL Example: <code># mysql  < create_db.mysql</code>



Postgresql Example: it may require you to manually create the database first.

<code>CREATE ROLE sympa NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT NOLOGIN;

CREATE ROLE sympa NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT

LOGIN ENCRYPTED PASSWORD '{password}';

GRANT sympa TO sympa;

CREATE DATABASE sympa WITH OWNER=sympa;

psql -U sympa -d sympa < /home/sympa/bin/create_db.Pg</code>



======  Setting database privileges ======



We strongly recommend that you restrict access to the Sympa database. You will then set ''db_user'' and ''db_passwd'' in ''sympa.conf''.



With MySQL: <code>grant all on sympa.* to sympa@localhost identified by 'your_password';

  flush privileges;</code>



====== Required tunning of database ======



Starting with version 6.0, Sympa store messages in database. Because of this feature, it is **required** that the database accept records as big as messages are. This can be done by tunning the MySQL parameter  'max_allowed_packet' in mysql configuration file my.cnf. A raisonnable value is 32M. Ones this done and Sympa is installed, you can test the maximum message size that Sympa can handle with the following command line :   



<code>

sympa.pl --test_database_message_buffer

</code>



Other data base systems supported by Sympa may require also so tunning for the same reason.



======  Importing subscriber data ======





=====  Importing data from a text file =====



You can import subscribtion data into the database from a text file having one entry per line: the first field is an email address, the second (optional) field is the free form name. Fields are space-separated.



Example:



<code>

  ## Data to be imported

  ## email        gecos

  john.steward@some.company.com           John - accountant

  mary.blacksmith@another.company.com     Mary - secretary

</code>



To import data into the database: <code>cat /tmp/my_import_file | sympa.pl --import=my_list</code>



(see [[running-sympa#sympa.pl|sympa.pl]]).





=====  Importing data from subscribers files =====



If a mailing list was previously set up to store subscribers into a ''subscribers'' file (the default mode in versions older then 2.2b), you can load subscriber data into the Sympa database. The easiest way is to edit the list configuration using //WWSympa// (this requires listmaster privileges) and change the data source from ''file'' to ''database''; subscriber data will be loaded into the database at the same time.



If the ''subscribers'' file is large, a timeout may occur during the FastCGI execution (note that you can set a longer timeout with the ''-idle-timeout'' option of the ''FastCgiServer'' Apache configuration directive). In this case, or if you have not installed //WWSympa//, you should use the ''load_subscribers.pl'' script.





======  Extending database table format ======



You can easily add other fields to the three tables, they will not disturb Sympa because it lists explicitly the field it expects in SELECT queries.



Moreover, you can access these database fields from within Sympa (in templates), as far as you list these additional fields in ''sympa.conf'' (see [[manual:conf-parameters:part3#db_additional_subscriber_fields|db_additional_subscriber_fields]] and [[manual:conf-parameters:part3#db_additional_user_fields|db_additional_user_fields]]).





====== Sympa logs in the database ======



The ''logs_table'' database table has been introduced with release 5.3 of Sympa. This DB table gathers some kind of logs/journals that Sympa want to keep track of. Only events that changes Sympa's state are logged ; this includes member subscription/removal, message distribution/moderation, bounces handling, user authentication on the web interface. The content of the database can then be searched by list owners ; privacy is enforced to prevent a list owner to access information from other lists.



The ''logs_table'' table is purged to prevent DB size to diverge. The retention period of log entries is defined by the [[conf-parameters/part3#logs_expiration_period|logs_expiration_period parameter]]



Below is a description of each field of the ''logs_table'' table :

  * id_logs: primary key for the table.

  * date_logs: epoch date representing the time when the action was performed.

  * robot_logs: the robot the action relates to. It may be empty if no specific virtual host is concerned.

  * list_logs: the list the action refers to. It may be undefined if the action does not refer to a specific list (like authentication related actions).

  * action_logs: an identifier for the action performed. Each action belongs to a group of actions (authentication related, subscription related, etc). The list of actions and the group they relate to is defined in the ''Log.pm'' perl module.

  * parameters_logs: parameters of the action. It is an optional comma-separated list of parameters.

  * user_email_logs: this field tells who is performing the action, if authenticated.

  * target_email_logs: this parameter represents the email address that is mainly concerned by the action ; it may be empty. If a list owner adds a new member to his list, ''the target_email_logs'' field will contain the new member email address.

  * client_logs: IP address of the user performing the action, may be empty if action is performed via the mail interface.

  * msg_id_logs: Message-ID of the message, if the action applies to a message.

  * status_logs: the status of the action ; it will contain one of the following values : ''success'', ''error''.

  * error_type_logs: If the action failed, this field an error identifier representing the error.

  * daemon_logs: tells which process has performed the action. It may be one of ''bounced'', ''sympa'', ''wwsympa''







======  Sympa configuration ======



To store subscriber information in your newly created database, you first need to tell Sympa what kind of database to work with, then you must configure your list to access the database.



You'll need to tell Sympa where  its database is located through the [[:manual:conf-parameters/part3#database_related|related sympa.conf parameters]] : ''db_type'', ''db_name'', ''db_host'', ''db_user'', ''db_passwd''.



If you are interfacing Sympa with an Oracle database, note that :

  - the ''db_name'' corresponds to the Oracle SID.

  - you'll need to set the ''ORACLE_HOME'' environment variable through the [[:manual:conf-parameters/part3#db_env|db_env sympa.conf parameter]]



All your lists are now configured to use the database, unless you set the list parameter ''user_data_source'' to ''file'' or ''include''.



Sympa will now extract and store user information for this list using the database instead of the ''subscribers'' file. Note however that subscriber information is dumped to ''subscribers.db.dump'' at every shutdown, to allow a manual rescue restart (by renaming ''subscribers.db.dump'' to ''subscribers'' and changing the ''user_data_source'' parameter), in case the database were to become inaccessible.  FIXME - Is this still true?

======  WWSympa, Sympa's web interface ======



//WWSympa// is Sympa's web interface.



====== Organization ======



//WWSympa// is fully integrated with Sympa. It uses ''sympa.conf'' and Sympa's libraries. The default Sympa installation will also install //WWSympa//.



Every single piece of HTML in //WWSympa// is generated by the CGI code using template files (See [[customizing#template_file_format|Template file format]]). This makes internationalization of pages, as well as per-site customization, easier.



The code consists of one single PERL CGI script, ''wwsympa.fcgi''. To enhance performances you can configure //WWSympa// to use [[#using_fastcgi|FastCGI]]; the CGI will be persistent in memory. \\  All data will be accessed through the CGI, including web archives. This is required to allow the authentication scheme to be applied systematically.



Authentication is based on passwords stored in the database table ''[[../internals/index#user_table|user_table]]''; if the appropriate ''Crypt::CipherSaber'' is installed, passwords are encrypted in the database using reversible encryption based on RC4. Otherwise, they are stored in clear text. In both cases, reminding of passwords is possible.



To keep track of authentication information, //WWSympa// uses HTTP cookies stored on the client side. The HTTP cookie only indicates that a specified email address has been authenticated; permissions are evaluated when an action is requested.



The same web interface is used by the listmaster, list owners, subscribers and others. Depending on permissions, the same URL may generate a different view.



//WWSympa//'s main loop algorithm is roughly the following:



  - check authentication information returned by the HTTP cookie;

  - evaluate user's permissions for the requested action;

  - process the requested action;

  - set up variables resulting from the action;

  - parse the HTML template files.



======  Web server setup ======







=====  wwsympa.fcgi access permissions =====



Because Sympa and //WWSympa// share a lot of files, ''wwsympa.fcgi'' must run with the same uid/gid as ''archived.pl'', ''bounced.pl'' and ''sympa.pl''. There are different ways to achieve this.







==== Default behaviour ====



=== Until version 5.3: SetuidPerl ===



This is the default method but might be insecure. If you don't set the ''<nowiki>--enable_secure</nowiki>'' configuration option, ''wwsympa.fcgi'' is installed with the SetUID bit set. On most systems, you will need to install the suidperl package.



=== Starting version 5.4: C wrapper ===



The C wrapper presented in the preceding section will be automatically built starting version 5.4.



The wwsympa.fcgi is wrapped in a small C script, wwsympa-wrapper.fcgi, in order to avoid to use the -- unsecure and no longer maintained -- SetuidPerl mode.



==== Alternatives (all versions) ====



=== Sudo ===



Use ''sudo'' to run ''wwsympa.fcgi'' as user ''sympa''. Your Apache configuration should use ''wwsympa_sudo_wrapper.pl'' instead of ''wwsympa.fcgi''. You should edit your ''/etc/sudoers'' file (with ''visudo'' command) as follows: <code>apache ALL = (sympa)  NOPASSWD: /home/sympa/bin/wwsympa.fcgi</code>



You should also check that the **requiretty** and **env_reset** flags are not set in the ''sudoers'' configuration file :

  #Defaults    requiretty

  #Defaults    env_reset



With ''requiretty'' set, sudo would only run when the user is logged in to a real tty; with ''env_reset'' set, most of your environment variables would be ignored... including your server name, the URL requested, etc.



=== Dedicated Apache server ===



Run a dedicated Apache server with ''sympa.sympa'' as uid.gid (the Apache default is ''apache.apache'');



=== Apache suExec ===



Use an Apache virtual host with ''sympa.sympa'' as uid.gid; Apache needs to be compiled with suexec. Be aware that the Apache suexec usually define a lowest UID/GID allowed to be a target user for suEXEC. For most systems, including binaries distribution of Apache, the default value ''100'' is common. So Sympa UID (and Sympa GID) must be higher than 100 or suexec must be tuned in order to allow lower UID/GID. Check [[http://httpd.apache.org/docs/suexec.html#install]] for details. The User and Group directive have to be set before the FastCgiServer directive is encountered;



suExec usage example. Written by [[marczi@dev-labs.com|Daniel Marczisovszky]]



**The following configuration example uses pathes used by Debian.** Please set your paths according to your own configuration.



To use suExec with FastCGI, enable both modules in your Apache config.



  LoadModule fastcgi_module /usr/lib/apache2/modules/mod_fastcgi.so

  LoadModule suexec_module /usr/lib/apache2/modules/mod_suexec.so



**Note for Debian/Ubuntu users:** these modules can be enabled with the ''a2enmod'' helper script:



  a2enmod suexec

  a2enmod fastcgi



To run FastCGI scripts combined with suExec, the ''FastCgiWrapper'' directive should be set. See more about this directive here: [[http://www.fastcgi.com/mod_fastcgi/docs/mod_fastcgi.html#FastCgiWrapper]] In theory ''FastCgiWrapper On'' could be enough, but FastCGI documentation says it is not reliable all the time. On Debian the path to the suExec executable is ''/usr/lib/apache2/suexec''.



  <IfModule mod_fastcgi.c>

    # Path to suexec executable

    FastCgiWrapper /usr/lib/apache2/suexec

    FastCgiIpcDir /var/lib/apache2/fastcgi

    # -restart kills crashed applications

    FastCgiConfig -restart

  </IfModule>



Since suExec allows CGI scripts to be executed only within the server's document root (we assume it is ''/var/www''), create this small wrapper in ''/var/www/_sympa_'':



''/var/www/_sympa_/wwsympa.fcgi'':

  #!/bin/bash

  # Path to your real wwsympa.fcgi

  exec /usr/lib/cgi-bin/sympa/wwsympa.fcgi



It should be executable, and both it's directory and the script itself should be owned by sympa:

  chmod 755 /var/www/_sympa_/wwsympa.fcgi

  chown -R sympa:sympa /var/www/_sympa_



To be able to use wwsympa, add these to your VirtualHost section in Apache config:

  <VirtualHost *>

      SuexecUserGroup sympa sympa

  

      <Directory "/var/www/_sympa_/">

          AllowOverride None

          Options ExecCGI

          Order allow,deny

          Allow from all

          AddHandler fastcgi-script .fcgi

      </Directory>

  

      Alias /wwsicons /usr/share/sympa/icons

      Alias /wws /var/www/_sympa_/wwsympa.fcgi

      Alias /static-sympa /usr/share/sympa/static_content

  </VirtualHost>



=====  Installing wwsympa.fcgi in your Apache server =====



<note>In the following code examples, we suppose you're using the default 5.3 behaviour (see [[web-interface#wwsympa.fcgi_access_permissions|wwsympa.fcgi access permissions]]). The script launching the web server is then ''wwsympa.fcgi''. Depending to your configuration, this is likely to be changed as follows:



  * If you are using [[web-interface#sudo|sudo]], then replace ''wwsympa.fcgi'' calls with ''wwsympa_sudo_wrapper.pl'';

  * If you are using the [[web-interface#starting_version_5.4c_wrapper|Sympa 5.4 and higher default behaviour]], then replace ''wwsympa.fcgi'' calls with ''wwsympa-wrapper.fcgi''.

</note>



You first need to set an alias to the directory where Sympa stores static contents (CSS, member pictures, documentation) directly delivered by Apache.



Example: 

  Alias /static-sympa /home/sympa/static_content



If you chose to run ''wwsympa.fcgi'' as a simple CGI, you simply need to script alias it.



Example: 

  ScriptAlias /sympa /home/sympa/bin/wwsympa-wrapper.fcgi



Running FastCGI will provide much faster responses from your server and reduce load (to understand why, read [[http://www.fastcgi.com/devkit/doc/fcgi-perf.htm]]).



If you are using //mod_fcgid// Apache module :



<note warning>**SECURITY WARNINIG**



mod_fastci was recently reported to have critical session management issues (at least when used with Sympa).



After logging in the Sympa web interface, //users were attributed the identity of other previously logged in people//. This could potentially lead to basic users being authenticated as listmaster.



Consequently **we strongly discourage you from using mod_fastcgi** until further notice. mod_fgcid does not have this bug and works otherwise as well as mod_fastcgi.

</note>



<code>LoadModule fcgid_module modules/mod_fcgid.so



  <IfModule mod_fcgid.c>

    IPCCommTimeout 120

    MaxProcessCount 2

  </IfModule>



  <Location /sympa>

    SetHandler fcgid-script

  </Location>

  

  ScriptAlias /sympa /home/sympa/bin/wwsympa-wrapper.fcgi

</code>



If you are using //mod_fastcgi// Apache module :



<code>

  LoadModule fastcgi_module modules/mod_fastcgi.so

  FastCgiServer /home/sympa/bin/wwsympa-wrapper.fcgi -processes 2

  <Location /sympa>

  SetHandler fastcgi-script

  </Location>

  

  ScriptAlias /sympa /home/sympa/bin/wwsympa-wrapper.fcgi

</code>



If you run virtual hosts, then each FastCgiServer(s) can serve as multiple hosts. Therefore you need to define it in the common section of your Apache configuration file.







=====  Installing wwsympa.fcgi in nginx =====



This configuration was submitted by [[edward.kovarski@groupkae.com|E. Kovarski]].



To save any future [[http://nginx.net/|nginx]] users any headaches, here is a sample nginx.conf stanza which works with Sympa v5.3.3:



<code>server {

        listen       80;

        server_name  my.domain.org;



        location / {

            fastcgi_pass   unix:/var/run/sympa/wwsympa.socket;

            fastcgi_param  QUERY_STRING       $query_string;

            fastcgi_param  REQUEST_METHOD     $request_method;

            fastcgi_param  CONTENT_TYPE       $content_type;

            fastcgi_param  CONTENT_LENGTH     $content_length;

            fastcgi_param  PATH_INFO          $fastcgi_script_name;

            fastcgi_param  REQUEST_URI        $request_uri;

            fastcgi_param  REMOTE_ADDR        $remote_addr;

            fastcgi_param  SERVER_NAME        $server_name;

        }



        location /static-sympa {

                alias /usr/local/sympa/static_content;

        }

}

</code>



Note that the request_uri fastcgi parameter //is// necessary for virtual hosting.



I got bit by the documentation which said server_name is compared against http_host but after some debugging I noticed that $robot was not set in wwsympa properly unless it can match http_host against request_uri.



=====  Installing wwsympa.fcgi in lighttpd =====



This configuration was submitted by [[marcin.deranek@slonko.net|M. Deranek]].



Here is a configuration snippet to make run Sympa with lighttpd ([[http://www.lighttpd.net]]) webserver.



Config might require some path tweaking as it customized to Gentoo...



<code java>

server.modules += ("mod_fastcgi")



alias.url += ( "/static-sympa/icons/" => "/usr/share/sympa/icons/" )

alias.url += ( "/static-sympa/" => "/var/spool/sympa/static_content/" )



$HTTP["url"] =~ "\^/sympa" {

fastcgi.server = ( "/sympa" =>

	((	"check-local"	=>	"disable",

		"bin-path"	=>	"/usr/libexec/sympa/wwsympa-wrapper.fcgi",

		"socket"	=>	"/var/run/lighttpd/sympa.sock",

		"max-procs"	=> 	2,

		"idle-timeout"	=> 	20,

	))

)

}

</code>



=====  Using FastCGI =====



[[http://www.fastcgi.com/|FastCGI]] is an extension to CGI, that provides persistency for CGI programs. It is extremely useful with //WWSympa//, since source code interpretation and all initialisation tasks are performed only once when wwsympa.fcgi processes start. These processes then work as a servlet/daemon, endlessly waiting for client requests.





To run //WWSympa// with FastCGI, you need to :



  * set the [[web-interface#use_fast_cgi_0_1|use_fast_cgi sympa.conf parameter]] to ''1'' ;

  * install the ''FCGI'' Perl module (see [[installing-sympa#installing_perl_and_cpan_modules]]) ;

  * install an Apache module that provides FastCGI features. You can choose between 2 such implementations : 

    * [[http://www.fastcgi.com/|mod_fastcgi]], the ''historical'' one. Note that it was not extended to work with Apache 2. You can however apply the patch provided [[http://hack.emilykwan.com/node/95|here]].

    * [[http://fastcgi.coremail.cn/|mod_fcgid]], an alternate implementation. The main difference between this module and ''mod_fastcgi'' is that fastcgi scripts are not launched at Apache startup, but when the first client request happens. This module should be preferred.



======  wwsympa.conf parameters ======





=====  arc_path =====



(Default value: ''/home/httpd/html/arc'') \\  Where to store HTML archives. This parameter is used by the ''archived.pl'' daemon. It is a good idea to install the archive outside the web hierarchy to prevent possible backdoors in the access control powered by //WWSympa//. However, if Apache is configured with a chroot, you may have to install the archive in the Apache directory tree.





=====  archive_default_index thrd - mail =====



(Default value: ''thrd'') \\  The default index organization when entering the web archive: either threaded or in chronological order.



=====  archived_pidfile =====



(Default value: ''archived.pid'') \\  The file containing the PID of ''archived.pl''.





=====  bounce_path =====



(Default value: ''/var/bounce'') \\



This is the directory where bounced.pl daemon will store the last bouncing message for each user. These mails will be available through the web interface in the bounce management page.



This directory is organised as follows:



<bounce_path value>/<listname>@<robot_name>/<email_address>



<email_address> is a file containing the last bouncing message for this address in this list.



**Warning:** this parameter must not be mistaken with [[:manual:conf-parameters:part2#queuebounce]] which defines the the spool where incoming error reports are stored until bounced.pl picks them up and processes them.



=====  bounced_pidfile =====



(Default value: ''bounced.pid'') \\  The file containing the PID of ''bounced.pl''.





=====  cookie_expire =====



(Default value: ''0'') \\  Lifetime (in minutes) of HTTP cookies. This is the default value when not set explicitly by users.





=====  cookie_domain =====



(Default value: ''localhost'') \\  Domain for the HTTP cookies. If beginning with a dot (''.''), the cookie is available within the specified internet domain. Otherwise, for the specified host. Example:



<code>

  cookie_domain renater.fr

  cookie is available for host 'renater.fr'



  cookie_domain .renater.fr

  cookie is available for any host within 'renater.fr' domain

</code>



The only reason for replacing the default value would be where //WWSympa//'s authentication process is shared with an application running on another host.





===== custom_archiver =====



(Default value : undefined)



Archives are prepared using Mhonarc. You may use an alternative program to process each message to be archived. In such case introduce the custom_archiver  parameter which is the path of an external program. CAUTION: Note that Sympa always guess that the custom archiver script accepts two variables : "--list" whose value is the address of the list (including the domain part) and "--file" that will contain the absolute path to the message to be archived. Each time the custom archiver is called, it is called with these two parameters with their values filled.





=====  default_home =====



(Default value: ''home'') \\  Organization of the //WWSympa// home page. If you have only a few lists, the default value ''home'' (presenting a list of lists organized by topic) should be replaced by ''lists'' (a simple alphabetical list of lists).



=====  icons_url (obsolete since Sympa 5.4) =====



=====  log_facility =====



//WWSympa// will log using this facility. Defaults to Sympa's syslog facility. Configure your syslog according to this parameter.



=====  mhonarc =====



(Default value: ''/usr/bin/mhonarc'') \\  Path to the (superb) [[http://www.oac.uci.edu/indiv/ehood/mhonarc.html|MhOnArc program]]. Required for the HTML archive.





=====  htmlarea_url =====



(Default value: ''undefined'') \\  Relative URL to the (superb) online HTML editor HTMLarea. If you have installed Javascript application you can use it when editing HTML documents in the shared document repository. In order to activate this plugin, the value of this parameter should point to the root directory where HTMLarea is installed. HTMLarea is a free opensource software you can download here: [[http://sourceforge.net/projects/freshmeat_htmlarea/]]



=====  password_case sensitive | insensitive =====



(Default value: ''insensitive'') \\  If set to ''insensitive'', //WWSympa//'s password check will be insensitive. This only concerns passwords stored in the Sympa database, not the ones in LDAP.



**Be careful:** in previous 3.xx versions of Sympa, passwords were lowercased before database insertion. Therefore changing to case-sensitive password checking could bring you some password checking problems.



=====  title =====



(Default value: ''Mailing List Service'') \\  The name of your mailing list service. It will appear in the Title section of //WWSympa//.



===== use_fast_cgi 0|1 =====



(Default value: ''1'') \\  Choice of whether or not to use FastCGI. On [[http://listes.renater.fr]], using FastCGI increases //WWSympa//'s performance by as much as a factor of 10. Refer to [[http://www.fastcgi.com]] and the Apache config section of this document for details about FastCGI.







======  Database configuration ======



//WWSympa// needs an RDBMS (Relational Database Management System) in order to run. All database access is performed via the Sympa API. Sympa currently interfaces with [[http://www.mysql.net/|MySQL]], [[http://sqlite.org/|SQLite]], [[http://www.postgresql.pyrenet.fr/|PostgreSQL]], [[http://www.oracle.com/database/|Oracle]] and [[http://www.sybase.com/index_sybase.html|Sybase]].



A database is needed to store user passwords and preferences. The database structure is documented in the Sympa documentation; scripts for creating it are also provided with the Sympa distribution (in ''script'').



User information (password and preferences) are stored in the ''User'' table. User passwords stored in the database are encrypted using reversible RC4 encryption controlled with the ''cookie'' parameter, since //WWSympa// might need to remind users of their passwords. The security of //WWSympa// rests on the security of your database.



======  Logging in as listmaster ======



Once Sympa is running, you should log in on the web interface as a privileged user (listmaster) to explore the admin interface, create mailing lists, etc.



Multiple email addresses can be declared as listmasters via the ''sympa.conf'' (or ''robot.conf'') ''listmaster'' configuration parameter (see [[.:conf-parameters:|sympa.conf parameters]]). Note that listmasters on the main robot (declared in ''sympa.conf'') also have listmaster privileges on virtual hosts, but they will not receive the various mail notifications (list creations, warnings,...) regarding these virtual hosts.



The listmasters should log in with their canonical email address as an identifier (not //listmaster@my.host//). The associated password is not declared in ''sympa.conf''; it will be allocated by Sympa when first hitting the ''Send me a password'' button on the web interface. As for any user, the password can then be modified via the ''Preferences'' menu.



Note that you must start the ''sympa.pl'' process with the web interface; it is responsible for delivering mail messages including password reminders.



===== The listmaster web interface =====



This section contains screenshots of the functionalities accessible through the Sympa web administration interface.



==== Overview ====



{{manual:admin_page.png?1400|}}



==== Identity change ====



As listmaster, you can assume another user's identity. Once done, the web interface will behave as if you were this person. This is useful for assistance.



{{manual:change_identity.png|}}



==== Log level change ====



By modifying this option, you change the log level of Sympa without restarting it. This allows you to temporarily increase the amount of logs produced.



{{manual:log_level.png|}}



==== Session vizualisation ====



This button makes Sympa display a page with all the current session opened.



{{manual:show_sessions.png|}}



====== Suspend my subscription ======



Click on "Manage your lists" in the home menu. The form displayed allows you to suspend your subscription for one or more lists for a specified period of time. A summary table allows you to know the status of each list to which you are subscribed.\\

{{ :manual:screenshot7.2.png |}}

In order to suspend your subscription to one or more lists, follow these steps:

    * Select a start date through the calendar that appears when you click on the "start date" field;

    * if you wish, you can specify the date when you want your subscription to resume. Do it using the "end date" field. You can click on "indefinite." In this case, you will have to return to this page to resume your subscription;

    * Select the lists you want to suspend you subscription for. The "Toogle selection" button allows you to invert the selection;

    * Click on "Submit" to confirm the suspension.



To resume your subscription to one or more lists, follow these steps:

    * Select the list(s) you want to reactivate. The "Toogle selection" button allows you to invert the selection;

    * Click "Restart".

{{ :manual:screenshot8.2.png |}}



====== Exclude users ======



If you are administrator of the list, click on "Review members"->"Exclude" button in "Manage list members".\\

Users listed are excluded from the list. Beware, for this feature is different from the blacklist. Exclusion makes sense when a list is based on external data sources ; thanks to exclusion, a user can unsubscribe (or be removed by list owner) even though she was included via an external data source. Users get into the exclusion table, through the standard unsubscribe/delete functions. They get off the exclusion table with the standard subscribe/add functions.
====== Web archive ======



Sympa maintains web archive for mailing lists that have the feature enabled. The web archives are fully integrated in the Sympa web interface, though the engine that does the HTML tranformation is an third-party tool, [[http://www.mhonarc.org|MHonArc]].



===== Features =====



==== Access Control ====



This is probably the most interesting part of the Sympa web archives : you can restrict access to a list web archives to a certain population (members of the current list, members of another list, intranet users, users defined in an SQL/LDAP base). This fine tuning is defined via the [[parameters-archives#web_archive|web_archive.access]] list parameter. This parameter refers to the corresponding [[authorization-scenarios#authorization_scenarios|authorization scenario]].



==== Search engine ====



Sympa provides a search engine to search archive of each list. User can either use the standard search field or the advanced search page. The search engine is based on [[http://www.mhonarc.org/contrib/marc-search/|MarcSearch]] perl library.



==== Messages removal ====



Sympa provides a ''message removal'' feature, accessible through a button from individual message web pages. This feature is restricted to either message authors (once authenticated) or list owners. Removal requests are then processed by the ''archivd.pl'' process ; therefore it may take a few seconds before it is removed.



==== Message reminder ====



From individual message web pages, you can ask that the message is sent back to you, via SMTP.



==== Export of web archives ====



List owners have access to an archive management page from the web interface. From this page, they can download a ZIP of their list web archives. The ZIP is organized by month, each month containing original emails.



===== MHonArc tool =====



Sympa does not perform the MIME -> HTML transformation itself, neither does it build the messages index and threads. All this is performed by the [[http://www.mhonarc.org|MHonArc]] program. MhonArc is a software used beside many other mailing list softwares. The may Sympa uses MHonArc concentrates on integration. 



You can customize the behavior of ''mhonarc'' via the ''mhonarc-ressources.tt2'' resource file. The html view of archives is being delivered by the ''wwsympa.fcgi'' process so the MhonArc output uses Sympa TT2 template format. When modifying ''mhonarc-ressources.tt2'' you may change the way MhonArc prepare archives or you may change the way wwsympa.fcgi show them.



See [[http://www.mhonarc.org/MHonArc/doc/mhonarc.html|MHonArc manual]] for more informations on customization.



===== Archives structure =====



The web archives are gathered in a common directory defined by the [[web-interface#arc_path|arc_path]] wwsympa.conf parameter. This directory contains a subdirecty for each archived mailing list. The list archive directory is structured a subdirectory for each month. Eath month directory contains both the HTML pages for messages and indexes and a subdirectory containing the orginal messsages in a test format.



Here is a sample list archive hierarchy :

  /home/sympa/arc/your-list@renater.fr/:

    1997-07

    ...

    2007-05

      arctxt

        1

        2

        ...

      mail1.html

      msg00000.html

      msg00001.html

      msg00002.html

      ...

      thrd1.html





===== Configuration parameters =====



=== sympa.conf parameters ===



''arc_path'', ''archive_default_index'', ''archived_pidfile'', ''mhonarc''.



See [[web-interface]]



=== wwsympa.conf parameters ===



''web_archive_spam_protection'', ''default_archive_quota''.



See [[conf-parameters/index]]



=== list parameters ===



''web_archive'', ''archive_crypted_msg''.



See [[parameters-archives]]





===== Archived.pl daemon  =====



A dedicated perl script, ''archived.pl'', is performing all operations on list web archives (adding a message to archive, removing a message, rebuilding HTML files). This process is running as the ''sympa'' user ; messages to archive and removal/rebuild commands are fetched from the ''outgoing'' spool defined by the [[conf-parameters/part2#queueoutgoing|queueoutgoing]] sympa.conf parameter.



When it archives the first message ever for a given list, archived.pl will try and create its archive directory. If it can't, it copies the message into a ''bad/'' subfolder of the ''outgoing'' spool.



===== Rebuilding web archive =====



Sympa provides a way to rebuild all HTML files for a given web archive. This is useful whenever you changed the ''mhonarc-resources.tt2'' file or if Sympa changed its template format or the charset used for web pages.



The rebuild feature is accessible to listmasters only from the ''Sympa admin'' -> ''Archives'' chapter, from the web interface. The rebuild is then run by the ''archived.pl'' process.



===== Importing archives =====



Since version 5.2b, Sympa maintains a single archive of mailing lists, but it previously maintained both a mail archive (stored in the ''list_data/mylist/archives/'' directories) and a web archive (for historical reasons). You may need to import existing mail archives in a list mail archive, using the provided ''arc2webarc.pl'' script. Here a small pattern on how use ''arc2webarc.pl'' to manually import archives of an old sympa server :



   # sympa.pl  --create-list  XML.for.$liste  (or create $liste in web interface)

   # mkdir  /...newlist_data.../$liste/archives

   # cp  /...oldlist_data.../$liste/archives/log*  /...newlist_data.../$liste/archives/.

   # arc2webarc.pl  $liste 



If you are moving from another mailing list software to Sympa, you are also facing messages archive import problems. Check the [[:contribs:migration_and_archives:index|Contrib section]] for useful migration tools.

====== Sympa Internationalization ======



======  Catalogs and templates ======



Sympa is designed to allow easy internationalization of its user interface (service mail messages and web interface). All translations for one language are gathered in a single .PO file that can be manipulated by standard [[http://www.gnu.org/software/gettext/#TOCintroduction|GNU gettext tools]].



Documentation and resources about software translations : [[http://translate.sourceforge.net/doc]]



Sympa previously (until Sympa 4.1.x) used the XPG4 message catalogue format. Web and mail templates were language-specific. The new organization provides both a unique file to work on for translators and a standard format supported by many software. Sympa templates refer to translatable strings using the ''loc'' TT2 filter.



Examples:



  [%|loc%]User Email[ 0.000000E+00ND %]



  [%|loc(list.name,user.email)%]You have subscribed to list %1 with email address %2[ 0.000000E+00ND %]



Sympa had previously been translated into 15 languages more or less completely. We have automatically extracted the translatable strings from previous templates but this process is awkward and is only seen as a bootstrap for translators. Therefore Sympa distribution will not include previous translations until a skilled translator has reviewed and updated the corresponding .PO file.









======  Translating Sympa into your language ======



[[:translating_sympa|Instructions for translating Sympa]] are maintained on the Sympa website.



======  Defining language-specific templates ======



The default Sympa templates are language independant, refering to catalogue entries for translations. When customizing either web or mail templates, you can define different templates for different languages. The template should be located in a ''ll_CC'' subdirectory of ''web_tt2'' or ''mail_tt2'' with the language code.



Example :

<code>

  /web_tt2/home.tt2

  /web_tt2/de_DE/home.tt2

  /web_tt2/fr_FR/home.tt2

</code>



This mechanism also applies to ''comment.tt2'' files used by create list templates.



Web templates can also make use of the ''locale'' variable to make templates multi-lingual:



Example :

<code>

  [% IF locale == 'fr_FR' %]

  Personnalisation

  [ 0.000000E+00LSE %]

  Customization

  [ 0.000000E+00ND %]

</code>





======  Translating topics titles ======



Topics are defined in a ''topics.conf'' file. In this file, each entry can be given a title in different languages, see [[customizing#topics|Topics]].



======  Handling of charsets ======



Until version 5.3, Sympa web pages were using in each language's charset (iso-8859-1 for French, utf-8 for Japanese, ...) whereas every web page now uses utf-8. Sympa also expects every file to be UTF-8 including : configursation files, templates, authorization scenarios, PO files.



Note that the shared documents (see [[shared-documents|Shared documents]]) filenames are Q-encoded to make their storage encoding neutral. This encoding is transparent for end users.
====== Sympa RSS channel ======



This service is provided by //WWSympa// (Sympa's web interface). Here is the root of //WWSympa//'s RSS channel: \\



(Default value: ''<nowiki>http://<host>/wws/rss</nowiki>'') \\  Example: ''<nowiki>https://my.server/wws/rss</nowiki>''



The access control of RSS queries do **not** proceed on the same way as //wwsympa//. Indeed, most RSS client do not deliver cookies are are not able to deal with authentication forms or SSO redirection. In addition some popular services are used to share rss feed and so there is not way to be sure of who is reading a feed. That's why RSS Sympa interface deliver all page as if the user was not authenticated.\\

You may be disappointed by this restriction if you are using a web browser as RSS reader.



. Sympa provides the following RSS features:



  * the latest created lists on a robot (''latest_lists'');

  * the most active lists on a robot(''active_lists'');

  * the latest messages of a list (''latest_arc'');

  * the latest shared documents of a list (''latest_d_read'').





====== latest_lists ======



This provides the latest created lists.



Example: ''<nowiki>http://my.server/wws/rss/latest_lists?for=3&count=6</nowiki>''\\  This provides the 6 latest created lists for the last 3 days. \\



Example: ''<nowiki>http://my.server/wws/rss/latest_lists/computing?count=6</nowiki>''\\  This provides the 6 latest created lists with topic ''computing''. \\



Parameters:



  * ''for'': period of interest (expressed in days). This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.

  * ''count'': maximum number of expected records. This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.

  * topic: the topic is indicated in the path info (see example below with topic ''computing''). This parameter is optional.



====== active_lists ======



This provides the most active lists, based on the number of distributed messages (number of messages received).



Example: ''<nowiki>http://my.server/wws/rss/active_lists?for=3&count=6</nowiki>''\\  This provides the 6 most active lists for the last 3 days. \\



Example: ''<nowiki>http://my.server/wws/rss/active_lists/computing?count=6</nowiki>''\\  This provides the 6 most active lists with topic ''computing''. \\



Parameters:



  * ''for'': period of interest (expressed in days). This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.

  * ''count'': maximum number of expected records. This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.

  * topic : the topic is indicated in the path info (see example below with topic computing). This parameter is optional.





====== latest_arc ======



This provides the latest messages of a list.



Example: ''<nowiki>http://my.server/wws/rss/latest_arc/mylist?for=3&count=6</nowiki>''\\  This provides the 6 latest messages received on the //mylist// list for the last 3 days. \\



Parameters:



  * list: the list is indicated in the path info. This parameter is mandatory.

  * ''for'': period of interest (expressed in days). This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.

  * ''count'': maximum number of expected records. This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.





====== latest_d_read ======



This provides the latest updated and uploaded shared documents of a list.



Example: ''<nowiki>http://my.server/wws/rss/latest_d_read/mylist?for=3&count=6</nowiki>''\\  This provides the 6 latest documents uploaded or updated on the //mylist// list for the last 3 days. \\



Parameters:



  * list: the list is indicated in the path info. This parameter is mandatory.

  * ''for'': period of interest (expressed in days). This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.

  * ''count'': maximum number of expected records. This is a CGI parameter. It is optional but one of the two parameters ''for'' or ''count'' is required.
====== Sympa SOAP server ======



======  Introduction ======



[[http://www.w3.org/2002/ws/|SOAP]] is a protocol (generally over HTTP) that can be used to provide **web services**. Sympa SOAP server allows to access a Sympa service from within another program, written in any programming language and on any computer. SOAP encapsulates procedure calls, input parameters and resulting data in an XML data structure. The Sympa SOAP server's API is published in a **WSDL** document, retrieved through Sympa's web interface.



The SOAP server provides a limited set of high level functions, see [[#supported_functions]]. Other functions might be implemented in the future. One of the important implementation constraints is to provide services for proxy applications with a correct authorization evaluation process where authentication may differ from classic web methods. The following cases can be used to access the service:



  * The client sends credentials and then requests a service providing a cookie with an id ''sympa-user''.

  * The client authenticates the end user providing the ''sympa-user'' HTTP cookie. This can be used in order to share an authenticated session between Sympa and other applications running on the same server as //WWSympa//. The SOAP method used is ''getUserEmailByCookieRequest''.

  * The client provides a user email and password and requests a service in a single SOAP access using the ''authenticateAndRun'' SOAP service.

  * The client is trusted by Sympa as a proxy application and is authorized to set some variables that will be used by Sympa during the authorization scenario evaluation. Trusted applications have their own password, and the variables they can set are listed in a configuration file named ''trusted_applications.conf''. See [[soap#trust_remote_applications|Trust remote applications]].



In any case, scenario authorization is used with the same rules as a mail interface or a normal web interface.



The SOAP server uses the [[http://www.soaplite.com/|SOAP::Lite]] Perl library. The server is running as a daemon (thanks to FastCGI), receiving the client SOAP requests via a web server (Apache for example).





====== Supported functions ======



Note that all functions accessible through the SOAP interface apply the appropriate access control rules, given the user's privileges.



The following functions are currently available through the Sympa SOAP server :

  * login : user email and passwords are checked against Sympa user DB, or another backend. 

  * casLogin : this function will verify CAS proxy tickets against the CAS server

  * authenticateAndRun : useful for SOAP clients that can't set an HTTP cookie ; they can provide both the Sympa session cookie and the requested command in a single call

  * authenticateRemoteAppAndRun : equivalent of the previous command used in a trusted context (see [[#trust_remote_applications]])

  * lists : provides a list of available lists (authorization scenarios are applied)

  * complexLists : same as the previous feature, but provides a complex structure for each list

  * info : provides description informations about a given list

  * which : gets the list of subscription of a given user

  * complexWhich : same as previous command, but provides a complex structure for each list

  * amI : tells if a given user is member of a given list

  * review : lists the members of a given list

  * subscribe : subscribes the current user to a given list

  * signoff : current user is removed from a given list

  * add : used to add a given user to a given list (admin feature)

  * del : removes a given user from a given list (admin feature)

  * createList : creates a new mailing list (requires appropriate privileges)

  * closeList : closes a given mailing list (admin feature)



Note that when a list parameter is required for a function, you can either provide the list name or the list address. However the domain part of the address will be ignored.



Check [[#the_wsdl_service_description]] for detailed API informations.









======  Web server setup ======



<note> **Starting Sympa 5.4**, the sympa_soap_server is wrapped in small C script, sympa_soap_server-wrapper.fcgi, in order to avoid to use the -unsecure and no longer maintained - setuid perl mode.</note>



You **need to install FastCGI** for the SOAP server to work properly, because it will run as a daemon.



===== Until version 5.3 =====



Here is a sample piece of your Apache ''httpd.conf'' with a SOAP server configured:



<code>

  	FastCgiServer /home/sympa/bin/sympa_soap_server.fcgi -processes 1

  	ScriptAlias /sympasoap /home/sympa/bin/sympa_soap_server.fcgi



  	<Location /sympasoap>

     	  SetHandler fastcgi-script

  	</Location>

</code>



===== Version 5.4 and higher =====



Here is a sample piece of your Apache ''httpd.conf'' with a SOAP server configured and using the C wrapper:



<code>

  	FastCgiServer /home/sympa/bin/sympa_soap_server-wrapper.fcgi -processes 1

  	ScriptAlias /sympasoap /home/sympa/bin/sympa_soap_server-wrapper.fcgi



  	<Location /sympasoap>

     	  SetHandler fastcgi-script

  	</Location>

</code>



======  Sympa setup ======



The only mandatory parameter you need to set in the ''sympa.conf''/''robot.conf'' files is the ''soap_url'', that defines the URL of the SOAP service corresponding to the ScriptAlias you have previously set up in the Apache configuration.



This parameter is used to publish the SOAP service URL in the WSDL file (defining the API), but also for the SOAP server to deduce what Virtual Host is concerned by the current SOAP request (a single SOAP server will serve all Sympa virtual hosts).





====== Trust remote applications ======



The SOAP service ''authenticateRemoteAppAndRun'' is used in order to allow some remote applications such as a web portal to request the Sympa service as a proxy for the end user. In such cases, Sympa will not authenticate the end user itself, but instead it will trust a particular application to act as a proxy.



This configuration file ''trusted_applications.conf'' can be created in the robot ''etc/'' subdirectory or in the ''/home/sympa/etc'' directory depending on the scope you want for it (the source package include a sample of file ''trusted_applications.conf'' in the ''soap'' directory). This file is made of paragraphs separated by empty lines and stating with keyword ''trusted_application''. A sample ''trusted_applications.conf'' file is provided with Sympa sources. Each paragraph defines a remote trusted application with keyword/value pairs:



  * ''name'': the name of the application. Used with password for authentication; the ''remote_application_name'' variable is set for use in authorization scenarios;

  * ''md5password'': the MD5 digest of the application password. You can compute the digest as follows: ''sympa.pl -md5_digest=<the password>''.

  * ''proxy_for_variables'': a comma separated list of variables that can be set by the remote application and that will be used by the Sympa SOAP server when evaluating an authorization scenario. If you list ''USER_EMAIL'' in this parameter, then the remote application can act as a user. Any other variable such as ''remote_host'' can be listed.



You can test your SOAP service using the ''sympa_soap_client.pl'' sample script as follows:



<code>

  /home/sympa/bin/sympa_soap_client.pl --soap_url=http://my.server/sympasoap --service=createList --trusted_application=myTestApp --trusted_application_password=myTestAppPwd --proxy_vars=''USER_EMAIL=userProxy@my.server'' --service_parameters=listA,listSubject,discussion_list,description,myTopic



  /home/sympa/bin/sympa_soap_client.pl --soap_url=http://myserver/sympasoap --service=add --trusted_application=myTestApp --trusted_application_password=myTestAppPwd  --proxy_vars=''USER_EMAIL=userProxy@my.server'' --service_parameters=listA,someone@some;domain,name

</code>



Below is a sample Perl code that does a SOAP procedure call (for a SUBSCRIBE sympa command) using the trusted_application feature :



<code>

my $soap = new SOAP::Lite();

$soap->uri('urn:sympasoap');

$soap->proxy('http://myserver/sympasoap');



my $response = $soap->authenticateRemoteAppAndRun('myTestApp', 'myTestAppPwd', 'USER_EMAIL=userProxy@my.server', 'subscribe', ['myList@dom']);

</code>



[[dereckson@espace-win.org|S. Santoro]] wrote its own [[:contribs/index#php_soap_library|PHP Trusted Application library for Sympa]].



======  The WSDL service description ======



Here is what the WSDL file looks like before it is parsed by //WWSympa//:



<code>

  <?xml version=''1.0''?>

  <definitions name=''Sympa''

  	xmlns:xsd=''http://www.w3.org/2001/XMLSchema''

  	xmlns:soap=''http://schemas.xmlsoap.org/wsdl/soap/''

  	targetNamespace="[ onf.wwsympa_url %]/wsdl"

  	xmlns:tns="[ onf.wwsympa_url %]/wsdl"

  	xmlns=''http://schemas.xmlsoap.org/wsdl/''

  	xmlns:xsdl="[ onf.soap_url %]/wsdl">



  <!-- types part -->



  <types>

  <schema targetNamespace="[ onf.wwsympa_url %]/wsdl"

  	xmlns:SOAP-ENC=''http://schemas.xmlsoap.org/soap/encoding/''

  	xmlns:wsdl=''http://schemas.xmlsoap.org/wsdl/''

  	xmlns=''http://www.w3.org/2001/XMLSchema''>



  	<complexType name=''ArrayOfLists''>

  		<complexContent>

  			<restriction base=''SOAP-ENC:Array''>

  				<attribute ref=''SOAP-ENC:arrayType'' wsdl:arrayType=''tns:listType[]''/>

  			</restriction>

  		</complexContent>

  	</complexType>



  	<complexType name=''ArrayOfString''>

  		<complexContent>

  			<restriction base=''SOAP-ENC:Array''>

  				<attribute ref=''SOAP-ENC:arrayType'' wsdl:arrayType=''string[]''/>

  			</restriction>

  		</complexContent>

  	</complexType>



  	<complexType name=''listType''>

             <all>

  		<element name=''listAddress'' minOccurs=''1'' type=''string''/>

  		<element name=''homepage'' minOccurs=''0'' type=''string''/>

  		<element name=''isSubscriber'' minOccurs=''0'' type=''boolean''/>

  		<element name=''isOwner'' minOccurs=''0'' type=''boolean''/>

  		<element name=''isEditor'' minOccurs=''0'' type=''boolean''/>

  		<element name=''subject'' minOccurs=''0'' type=''string''/>

             </all>

  	</complexType>

  </schema>

  </types>



  <!-- message part -->



  <message name=''infoRequest''>

          <part name=''listName'' type=''xsd:string''/>

  </message>



  <message name=''infoResponse''>

  	<part name=''return'' type=''tns:listType''/>

  </message>



  <message name=''complexWhichRequest''>

  </message>



  <message name=''complexWhichResponse''>

  	<part name=''return'' type=''tns:ArrayOfLists''/>

  </message>



  <message name=''whichRequest''>

  </message>



  <message name=''whichResponse''>

  	<part name=''return'' type=''tns:ArrayOfString''/>

  </message>



  <message name=''amIRequest''>

  	<part name=''list'' type=''xsd:string''/>

  	<part name=''function'' type=''xsd:string''/>

  	<part name=''user'' type=''xsd:string''/>

  </message>



  <message name=''amIResponse''>

  	<part name=''return'' type=''xsd:boolean''/>

  </message>



  <message name=''reviewRequest''>

  	<part name=''list'' type=''xsd:string''/>

  </message>



  <message name=''reviewResponse''>

  	<part name=''return'' type=''tns:ArrayOfString''/>

  </message>



  <message name=''signoffRequest''>

  	<part name=''list'' type=''xsd:string''/>

  	<part name=''email'' type=''xsd:string'' xsd:minOccurs=''0''/>

  </message>



  <message name=''signoffResponse''>

  	<part name=''return'' type=''xsd:boolean''/>

  </message>



  <message name=''subscribeRequest''>

  	<part name=''list'' type=''xsd:string''/>

  	<part name=''gecos'' type=''xsd:string'' xsd:minOccurs=''0''/>

  </message>



  <message name=''addRequest''>

  	<part name=''list'' type=''xsd:string''/>

  	<part name=''email'' type=''xsd:string''/>

  	<part name=''gecos'' type=''xsd:string''  xsd:minOccurs=''0''/>

  	<part name=''quiet'' type=''xsd:boolean''  xsd:minOccurs=''0''/>

  </message>



  <message name=''addResponse''>

  	<part name=''return'' type=''xsd:boolean''/>

  </message>



  <message name=''delRequest''>

  	<part name=''list'' type=''xsd:string''/>

  	<part name=''email'' type=''xsd:string''/>

  	<part name=''quiet'' type=''xsd:boolean''  xsd:minOccurs=''0''/>

  </message>



  <message name=''delResponse''>

  	<part name=''return'' type=''xsd:boolean''/>

  </message>



  <message name=''createListRequest''>

  	<part name=''list'' type=''xsd:string''/>

  	<part name=''subject'' type=''xsd:string''/>

  	<part name=''template'' type=''xsd:string''/>

  	<part name=''description'' type=''xsd:string''/>

  	<part name=''topics'' type=''xsd:string''/>

  </message>



  <message name=''createListResponse''>

  	<part name=''return'' type=''xsd:boolean''/>

  </message>



  <message name=''closeListRequest''>

  	<part name=''list'' type=''xsd:string''/>

  </message>



  <message name=''closeListResponse''>

  	<part name=''return'' type=''xsd:boolean''/>

  </message>



  <message name=''subscribeResponse''>

  	<part name=''return'' type=''xsd:boolean''/>

  </message>



  <message name=''loginRequest''>

  	<part name=''email'' type=''xsd:string''/>

  	<part name=''password'' type=''xsd:string''/>

  </message>



  <message name=''loginResponse''>

  	<part name=''return'' type=''xsd:string''/>

  </message>



  <message name=''getUserEmailByCookieRequest''>

  	<part name=''cookie'' type=''xsd:string''/>

  </message>



  <message name=''getUserEmailByCookieResponse''>

  	<part name=''return'' type=''xsd:string''/>

  </message>



  <message name=''authenticateAndRunRequest''>

  	<part name=''email'' type=''xsd:string''/>

  	<part name=''cookie'' type=''xsd:string''/>

  	<part name=''service'' type=''xsd:string''/>

  	<part name=''parameters'' type=''tns:ArrayOfString'' xsd:minOccurs=''0''/>

  </message>



  <message name=''authenticateAndRunResponse''>

  	<part name=''return'' type=''tns:ArrayOfString'' xsd:minOccurs=''0''/>

  </message>



  <message name=''authenticateRemoteAppAndRunRequest''>

  	<part name=''appname'' type=''xsd:string''/>

  	<part name=''apppassword'' type=''xsd:string''/>

  	<part name=''vars'' type=''xsd:string''/>

  	<part name=''service'' type=''xsd:string''/>

  	<part name=''parameters'' type=''tns:ArrayOfString'' xsd:minOccurs=''0''/>

  </message>



  <message name=''authenticateRemoteAppAndRunResponse''>

  	<part name=''return'' type=''tns:ArrayOfString'' xsd:minOccurs=''0''/>

  </message>



  <message name=''casLoginRequest''>

  	<part name=''proxyTicket'' type=''xsd:string''/>

  </message>



  <message name=''casLoginResponse''>

  	<part name=''return'' type=''xsd:string''/>

  </message>



  <message name=''listsRequest''>

  	<part name=''topic'' type=''xsd:string'' xsd:minOccurs=''0''/>

  	<part name=''subtopic'' type=''xsd:string'' xsd:minOccurs=''0''/>

  </message>



  <message name=''listsResponse''>

  	<part name=''listInfo'' type=''xsd:string''/>

  </message>



  <message name=''complexListsRequest''>

  </message>



  <message name=''complexListsResponse''>

  	<part name=''return'' type=''tns:ArrayOfLists''/>

  </message>



  <message name=''checkCookieRequest''>

  </message>



  <message name=''checkCookieResponse''>

  	<part name=''email'' type=''xsd:string''/>

  </message>



  <!-- portType part -->



  <portType name=''SympaPort''>

  	<operation name=''info''>

  		<input message=''tns:infoRequest'' />

  		<output message=''tns:infoResponse'' />

  	</operation>

  	<operation name=''complexWhich''>

  		<input message=''tns:complexWhichRequest'' />

  		<output message=''tns:complexWhichResponse'' />

  	</operation>

  	<operation name=''which''>

  		<input message=''tns:whichRequest'' />

  		<output message=''tns:whichResponse'' />

  	</operation>

  	<operation name=''amI''>

  		<input message=''tns:amIRequest'' />

  		<output message=''tns:amIResponse'' />

  	</operation>

  	<operation name=''add''>

  		<input message=''tns:addRequest'' />

  		<output message=''tns:addResponse'' />

  	</operation>

  	<operation name=''del''>

  		<input message=''tns:delRequest'' />

  		<output message=''tns:delResponse'' />

  	</operation>

  	<operation name=''createList''>

  		<input message=''tns:createListRequest'' />

  		<output message=''tns:createListResponse'' />

  	</operation>

  	<operation name=''closeList''>

  		<input message=''tns:closeListRequest'' />

  		<output message=''tns:closeListResponse'' />

  	</operation>

  	<operation name=''review''>

  		<input message=''tns:reviewRequest'' />

  		<output message=''tns:reviewResponse'' />

  	</operation>

  	<operation name=''subscribe''>

  		<input message=''tns:subscribeRequest'' />

  		<output message=''tns:subscribeResponse'' />

  	</operation>

  	<operation name=''signoff''>

  		<input message=''tns:signoffRequest'' />

  		<output message=''tns:signoffResponse'' />

  	</operation>

  	<operation name=''login''>

  		<input message=''tns:loginRequest'' />

  		<output message=''tns:loginResponse'' />

  	</operation>

  	<operation name=''casLogin''>

  		<input message=''tns:casLoginRequest'' />

  		<output message=''tns:casLoginResponse'' />

  	</operation>

  	<operation name=''getUserEmailByCookie''>

  		<input message=''tns:getUserEmailByCookieRequest'' />

  		<output message=''tns:getUserEmailByCookieResponse'' />

  	</operation>

  	<operation name=''authenticateAndRun''>

  		<input message=''tns:authenticateAndRunRequest'' />

  		<output message=''tns:authenticateAndRunResponse'' />

  	</operation>

  	<operation name=''authenticateRemoteAppAndRun''>

  		<input message=''tns:authenticateRemoteAppAndRunRequest'' />

  		<output message=''tns:authenticateRemoteAppAndRunResponse'' />

  	</operation>

  	<operation name=''lists''>

  		<input message=''tns:listsRequest'' />

  		<output message=''tns:listsResponse'' />

  	</operation>

  	<operation name=''complexLists''>

  		<input message=''tns:complexListsRequest'' />

  		<output message=''tns:complexListsResponse'' />

  	</operation>

  	<operation name=''checkCookie''>

  		<input message=''tns:checkCookieRequest'' />

  		<output message=''tns:checkCookieResponse'' />

  	</operation>

  </portType>



  <!-- Binding part -->



  <binding name=''SOAP'' type=''tns:SympaPort''>

  <soap:binding style=''rpc'' transport=''http://schemas.xmlsoap.org/soap/http''/>

  	<operation name=''info''>

  		<soap:operation soapAction=''urn:sympasoap#info''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  	<operation name=''complexWhich''>

  		<soap:operation soapAction=''urn:sympasoap#complexWhich''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  	<operation name=''which''>

  		<soap:operation soapAction=''urn:sympasoap#which''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  	<operation name=''amI''>

  		<soap:operation soapAction=''urn:sympasoap#amI''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  	<operation name=''createList''>

  		<soap:operation soapAction=''urn:sympasoap#createList''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  	<operation name=''review''>

  		<soap:operation soapAction=''urn:sympasoap#review''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  	<operation name=''subscribe''>

  		<soap:operation soapAction=''urn:sympasoap#subscribe''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  	<operation name=''signoff''>

  		<soap:operation soapAction=''urn:sympasoap#signoff''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  	<operation name=''login''>

  		<soap:operation soapAction=''urn:sympasoap#login''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  	<operation name=''casLogin''>

  		<soap:operation soapAction=''urn:sympasoap#casLogin''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  	<operation name=''getUserEmailByCookie''>

  		<soap:operation soapAction=''urn:sympasoap#getUserEmailByCookie''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  	<operation name=''authenticateAndRun''>

  		<soap:operation soapAction=''urn:sympasoap#authenticateAndRun''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  	<operation name=''authenticateRemoteAppAndRun''>

  		<soap:operation soapAction=''urn:sympasoap#authenticateRemoteAppAndRun''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  	<operation name=''lists''>

  		<soap:operation soapAction=''urn:sympasoap#lists''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  	<operation name=''complexLists''>

  		<soap:operation soapAction=''urn:sympasoap#complexLists''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  	<operation name=''checkCookie''>

  		<soap:operation soapAction=''urn:sympasoap#checkCookie''/>

  			<input>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</input>

  			<output>

  				<soap:body use=''encoded''

  					namespace=''urn:sympasoap''

  					encodingStyle=''http://schemas.xmlsoap.org/soap/encoding/''/>

  			</output>

  	</operation>

  </binding>



  <!-- service part -->



  <service name=''SympaSOAP''>

  	<port name=''SympaPort'' binding=''tns:SOAP''>

  		<soap:address location="[ onf.soap_url %]"/>

  	</port>

  </service>



  </definitions>

</code>





======  Client-side programming ======



Sympa is distributed with 2 sample clients written in Perl and in PHP. The Sympa SOAP server has also been successfully tested with a UPortal Channel as a Java client (using Axis). The sample PHP SOAP client has been installed on our demo server: [[http://demo.sympa.org/sampleClient.php]].



Depending on your programming language and the SOAP library you are using, you will either directly contact the SOAP service (as with the Perl <nowiki>SOAP::Lite library</nowiki>), or first load the WSDL description of the service (as with PHP nusoap or Java Axis). Axis is able to create a stub from the WSDL document.



The WSDL document describing the service should be fetched through //WWSympa//'s dedicated URL: <nowiki>http://your.server/sympa/wsdl</nowiki>.



Note: the ''login()'' function maintains a login session using HTTP cookies. If you are not able to maintain this session by analyzing and sending appropriate cookies under SOAP, then you should use the ''authenticateAndRun()'' function that does not require cookies to authenticate.





=====  Writing a Java client with Axis =====



First, download jakarta-axis ([[http://ws.apache.org/axis]]).



You must add the libraries provided with jakarta axis (v >1.1) to you CLASSPATH. These libraries are:



  * axis.jar;

  * saaj.jar;

  * commons-discovery.jar;

  * commons-logging.jar;

  * xercesImpl.jar;

  * jaxrpc.jar;

  * xml-apis.jar;

  * jaas.jar;

  * wsdl4j.jar;

  * soap.jar.



Next, you have to generate client Java class files from the sympa WSDL URL. Use the following command: <code>java org.apache.axis.wsdl.WSDL2Java -av WSDL_URL</code>



For example: <code>java org.apache.axis.wsdl.WSDL2Java -av  http://demo.sympa.org/sympa/wsdl</code>



Exemple of screen output during generation of Java files:



<code>

  Parsing XML file:  http://demo.sympa.org/sympa/wsdl

  Generating org/sympa/demo/sympa/msdl/ListType.java

  Generating org/sympa/demo/sympa/msdl/SympaPort.java

  Generating org/sympa/demo/sympa/msdl/SOAPStub.java

  Generating org/sympa/demo/sympa/msdl/SympaSOAP.java

  Generating org/sympa/demo/sympa/msdl/SympaSOAPLocator.java

</code>



If you need more information or more generated classes (to have the server-side classes or junit testcase classes for example), you can get a list of switches: <code>java org.apache.axis.wsdl.WSDL2Java -h</code>



The reference page is: [[http://ws.apache.org/axis/java/reference.html]].



Take care of Test classes generated by axis, there are not useable as are. You have to stay connected between each test. To use junit testcases, before each SOAP operation tested, you must call the authenticated connexion to Sympa instance.



Here is a simple Java code that invokes the generated stub to perform a ''casLogin()'' and a ''which()'' on the remote Sympa SOAP server:



<code>

  SympaSOAP loc = new SympaSOAPLocator();

  ((SympaSOAPLocator)loc).setMaintainSession(true);

  SympaPort tmp = loc.getSympaPort();

  String _value = tmp.casLogin(_ticket);

  String _cookie = tmp.checkCookie();

  String[] _abonnements = tmp.which();

</code>



======  The test command line SOAP client ======



Sympa distribution includes a simple command line application that allows you to test SOAP request towards your Sympa SOAP server. This script is named sympa_soap_client.pl and is located in the Sympa bin directory.



The [[:manual:soap#introduction|four methods]] available through the Sympa SOAP server can be tested using this tool. There is no explicit option to tell what acces methos is used. It is inferred based on what options are provided to the script.



==== Getting the email associated to a session id ====



You must use the id of a session actually used at the time you launch the command. It is the value of the "sympa_session" cookie set when accessing to the Sympa web interface.



=== Command line ===



<code>

# /home/sympa/bin/sympa_soap_client.pl

 --soap_url=<SOAP server URL>

 --cookie=<cookie identifier>

</code>



  * <nowiki>--soap_url</nowiki>: the URL to your Sympa SOAP server

  * <nowiki>--cookie</nowiki>: the value of the "sympa_session" cookie set when accessing to the Sympa web interface.



=== Expected output ===



<code>

error : get_email_cookie

cookie : 65354224256806





getEmailUserByCookie....

0

        'mail@renater.fr'

</code>



==== Using the Sympa SOAP functions with the command line tool ====



It is done by calling the script and providing two kind of arguments :



  * the argument required by the service usage : SOAP URL, service name and service parameters,

  * the arguments allowing to authenticate the user requesting the service.



=== Authentication using an HTTP session cookie ===



Actually, providing the HTTP cookie to a command line sums up in providing a session id, i.e. a simple number. You must use the value of a session cookie actually used at the time you launch the command. It is the "sympa_session" cookie set when accessing to the Sympa web interface.



<code>

# /home/sympa/bin/sympa_soap_client.pl --soap_url=<SOAP server URL>

                                       --service=<a sympa service>

                                       --service_parameters=<value1,value2,value3>

                                       --session_id=<cookie identifier>

</code>



The options used are:

  * <nowiki>--soap_url</nowiki>: the URL to your Sympa SOAP server;

  * <nowiki>--service</nowiki>: the requested SOAP service. See [[#sympa_soap_services_and_the_command_line_tool|below]];

  * <nowiki>--service_parameters</nowiki>: the parameters needed to use the service. They must be provided as a comma separated list, without spaces. See [[#sympa_soap_services_and_the_command_line_tool|below]];

  * <nowiki>--session_id</nowiki>: the value of the "sympa_session" cookie set when accessing to the Sympa web interface.



=== Authentication using a user name and password ===



<code>

# /home/sympa/bin/sympa_soap_client.pl --soap_url=<SOAP server URL>

                                       --service=<a sympa service>

                                       --service_parameters=<value1,value2,value3>

                                       --user_email=<email>

                                       --user_password=<password>

</code>



The options used are:

  * <nowiki>--soap_url</nowiki>: the URL to your Sympa SOAP server;

  * <nowiki>--service</nowiki>: the requested SOAP service. See [[#sympa_soap_services_and_the_command_line_tool|below]];

  * <nowiki>--service_parameters</nowiki>: the parameters needed to use the service. They must be provided as a comma separated list, without spaces. See [[#sympa_soap_services_and_the_command_line_tool|below]];

  * <nowiki>--user_email</nowiki>: the email of the user requesting the service;

  * <nowiki>--user_password</nowiki>: the password of this user.

               



=== Access through a trusted application ===



<code>

# /home/sympa/bin/sympa_soap_client.pl --soap_url=<SOAP server URL>

                                       --service=<a sympa service> 

                                       --service_parameters=<value1,value2,value3>                

                                       --cookie=<cookie identifier>

                                       --trusted_application=<app name> 

                                       --trusted_application_password=<password>

                                       --proxy_vars=<id=value,id2=value2>

</code>



The options used are:

  * <nowiki>--soap_url</nowiki>: the URL to your Sympa SOAP server;

  * <nowiki>--service</nowiki>: the requested SOAP service. See [[#sympa_soap_services_and_the_command_line_tool|below]];

  * <nowiki>--service_parameters</nowiki>: the parameters needed to use the service. They must be provided as a comma separated list, without spaces. See [[#sympa_soap_services_and_the_command_line_tool|below]];

  * <nowiki>--cookie</nowiki>: the value of the "sympa_session" cookie set when accessing to the Sympa web interface;

  * <nowiki>--trusted_application</nowiki>: the trusted application name as defined in ''[[#trust_remote_applications|trusted_applications.conf]]'';

  * <nowiki>--trusted_application_password</nowiki>: the password of the trusted application as defined in ''[[#trust_remote_applications|trusted_applications.conf]]'';

  * <nowiki>--proxy_vars</nowiki>: the proxy vars of the trusted application as defined in ''[[#trust_remote_applications|trusted_applications.conf]]''.



==== Sympa SOAP services and the command line tool ====



This is a description of how to use the Sympa SOAP services using the command line tool.

The parameters are given in the same order they must be found in the command tool option ''service_parameters''. They must be provided as a comma separated list, without spaces. Don't forget to escape characters that would break the command line, such as spaces, exclamation marks and so on.



<box round orange|Parameters example>



If the list of parameters is:



  - list name

  - user email



Then the ''service_parameters'' option will look like:



<nowiki>--service_parameters=mylist,mail@renater.fr</nowiki>



</box>



=== login ===



No object here: this is the service used to log when the command tool uses a username and password.



=== casLogin ===



No object here.



=== authenticateAndRun ===



No object here: this the service used by the command line tool to call the other services, when authentication is done through session id or user name + password.



=== authenticateRemoteAppAndRun ===



No object here: this the service used by the command line tool to call the other services, when testing trusted applications.



=== lists ===



The parameters are optional.



Parameters:



  - topic: the topic of the lists to return

  - subtopic: the subtopic of this topic



Output example:



<code>

lists....

0

        'homepage=http://domain.tld/sympa/info/amietestdv01;subject=Amical;listAddress=amietestdv01@domain.tld'

1

        'homepage=http://domain.tld/sympa/info/archeologie;subject=Liste sur l'archéologie;listAddress=archeologie@domain.tld'

2

        'homepage=http://domain.tld/sympa/info/blackmambo;subject=A black mambo;listAddress=blackmambo@domain.tld'

3

        'homepage=http://domain.tld/sympa/info/bluemambo;subject=Another mambo. This one is blue.;listAddress=bluemambo@domain.tld'

</code>



=== complexLists ===



The parameters are optional.



Parameters:



  - topic: the topic of the lists to return

  - subtopic: the subtopic of this topic



Output example:



<code>

AuthenticateAndRun complexLists....

0                                  

        _homepage_                 

                'http://domain.tld/sympa-dv/info/amietestdv01'

        _listAddress_                                               

                'amietestdv01@domain.tld'                     

        _subject_                                                   

                'Amical'                                            

1                                                                   

        _homepage_                                                  

                'http://domain.tld/sympa-dv/info/archeologie' 

        _listAddress_                                               

                'archeologie@domain.tld'                      

        _subject_                                                   

                'List sur l'archéologie'                             

2                                                                   

        _homepage_                                                  

                'http://domain.tld/sympa-dv/info/blackmambo'  

        _listAddress_                                               

                'blackmambo@domain.tld'                       

        _subject_                                                   

                'A black mambo'                                            

3                                                                   

        _homepage_                                                  

                'http://domain.tld/sympa-dv/info/bluemambo'   

        _listAddress_                                               

                'bluemambo@domain.tld'                        

        _subject_                                                   

                'Another mambo. This one is blue.'                                          

</code>



=== info ===



Parameters:



  - listname (mandatory): the name of the list for which info are requested



Output example:



<code>

</code>



=== which ===



All arguments are mandatory (at least with an empty value).



Parameters:



  * no parameters



Output example:



<code>

which....

0

        'isOwner=1;homepage=http://domain.tld/sympa/info/amietestdv01;subject=Amical;listAddress=amietestdv01@domain.tld;isEditor=0;isSubscriber=0'

1

        'isOwner=1;homepage=http://domain.tld/sympa/info/archeologie;subject=Liste sur l'archéologie;listAddress=archeologie@domain.tld;isEditor=0;isSubscriber=0'

2

        'isOwner=1;homepage=http://domain.tld/sympa/info/blackmambo;subject=A black mambo;listAddress=blackmambo@domain.tld;isEditor=0;isSubscriber=0'

3

        'isOwner=1;homepage=http://domain.tld/sympa/info/bluemambo;subject=Another mambo. This one is blue.;listAddress=bluemambo@domain.tld;isEditor=0;isSubscriber=0'

</code>



=== complexWhich ===



All arguments are mandatory (at least with an empty value).



Parameters:



  * no parameters



Output example:



<code>

complexWhich....

0                                  

        _homepage_                 

                'http://dev-sympa.renater.fr/sympa-dv/info/redmambo'

        _isEditor_                                              

                '0'                                             

        _isOwner_                                               

                '1'                                             

        _isSubscriber_                                          

                '0'                                             

        _listAddress_                                           

                'redmambo@dev-sympa.renater.fr'                     

        _subject_                                               

                'Amical'                                        

1                                                               

        _homepage_                                              

                'http://dev-sympa.renater.fr/sympa-dv/info/bluemambo'

        _isEditor_                                               

                '1'                                              

        _isOwner_                                                

                '1'                                              

        _isSubscriber_                                           

                '0'                                              

        _listAddress_                                            

                'bluemambo@dev-sympa.renater.fr'                     

        _subject_                                                

                'Another mambo. This one is blue.'                                       

2                                                                

        _homepage_                                               

                'http://dev-sympa.renater.fr/sympa-dv/info/archeologie'

        _isEditor_                                                 

                '1'                                                

        _isOwner_                                                  

                '1'                                                

        _isSubscriber_                                             

                '0'                                                

        _listAddress_                                              

                'archeologie@dev-sympa.renater.fr'                     

        _subject_                                                  

                'Liste sur l'archéologie'                            

3                                                                  

        _homepage_                                                 

                'http://dev-sympa.renater.fr/sympa-dv/info/blackmambo' 

        _isEditor_                                                 

                '0'                                                

        _isOwner_                                                  

                '1'                                                

        _isSubscriber_                                             

                '0'                                                

        _listAddress_                                              

                'blackmambo@dev-sympa.renater.fr'                      

        _subject_                                                  

                'A black mambo'                                           

</code>



=== amI ===



Parameters:



  - list name (mandatory): the name of the list for which the function is tested;

  - function (mandatory): the function the existence of which we will test. The allowed values are: ''subscriber'', ''owner'' and ''editor'';

  - user (mandatory): the email address of the user for whom we want to know if she has the function indicated in the target list.



Output example:



<code>

param: blackmambo

param: owner

param: david.verdin@renater.fr

Using Session_id 48339436597794





AuthenticateAndRun amI....

0

        '1'

</code>



=== review ===



Parameters:



  - the name of the list for which we want the subscribers list (mandatory).



Output example:



<code>

review....

0

        'mail1@renater.fr'

1

        'mail2@renater.fr'

2

        'mail3@renater.fr'

</code>



=== subscribe ===



Parameters:



  - list name (mandatory)



Output example:



<code>

subscribe....

0

        '1'

</code>



=== signoff ===



Parameters:



  - list name (mandatory)



Output example:



<code>

signoff....

0

        '1'

</code>



=== add ===



Parameters:



  - listname (mandatory): the name of the list we want to subscribe the mail address to;

  - email (mandatory): the email to subscribe to the list;

  - gecos: the name under which this email will be subscribed (for example: "John Doe");

  - quiet: if set to '0', the user doesn't receive a subscription notification



Output example:



<code>

add....

0

        ''

</code>



=== del ===



Parameters:



  - listname (mandatory): the name of the list we want to unsubscribe the mail address from;

  - email (mandatory): the email of the user to unsubscribe;

  - quiet: if set to '0', the user doesn't receive an unsubscription notification



Output example:



<code>

del....

0

        '1'

</code>



=== createList ===



Parameters:



  - the list name (mandatory);

  - the subject of the list (mandatory);

  - the template to use (mandatory) (the name of a template found in the ''create_list_templates'' directory for this Sympa robot;

  - the description of the list (mandatory);

  - the topic of the list (mandatory) (one among the different options existing in topics.conf).



Output example:



<code>

param: orangemambo

param: Dude !

param: hotline

param: La liste verte

param: computing

Using Session_id 4860001445687





AuthenticateAndRun createList....

0

        '1'

</code>



=== closeList ===



Parameters:



  - the name of the list to close (mandatory).



Output example:



<code>

param: orangemambo

Using Session_id 4860001445687





AuthenticateAndRun closeList....

0

        '1'

</code>

====== Authentication ======



Sympa needs to authenticate users (subscribers, owners, moderators, listmasters) on both its mail and web interface, and then apply appropriate privileges (authorization process) to subsequent requested actions. Sympa is able to cope with multiple authentication means on the client side, and when using user+password, it can validate these credentials against LDAP authentication backends.



When contacted on the mail interface,Sympa has 4 authentication levels

Lower level is to trust the ''From:'' SMTP header field. A higher level of authentication will require that the user confirms his/her message. The strongest supported authentication method is S/MIME (note that Sympa also deals with S/MIME encrypted messages).

<if manual_version>=6.1> If ''sympa.conf'' ''DKIM_Feature on'' parameter is set, one more authentication level named "dkim" is applied for messages with a valid DKIM signature((ofcourse DKIM signature is not a strong method as it does validation only the domain part of the author address in the a general case))</if> 



On the Sympa web interface (//WWSympa//) the user can authenticate in 4 different ways (if appropriate setup has been done on the Sympa server). Default authentication is performed through the user's email address and a password managed by Sympa itself. If an LDAP authentication backend (or multiple) has been defined, then the user can authenticate with his/her LDAP uid and password. Sympa is also able to delegate the authentication job to a web Single SignOn system; currently [[http://www.yale.edu/tp/auth/|CAS]] (the Yale University system) or a generic SSO setup, adapted to SSO products providing an Apache module. When contacted via HTTPS, Sympa can make use of X509 client certificates to authenticate users.



The authorization process in Sympa (authorization scenarios) refers to authentication methods. The same authorization scenarios are used for both mail and web accesss; therefore some authentication methods are considered to be equivalent: mail confirmation (on the mail interface) is equivalent to password authentication (on the web interface); S/MIME authentication is equivalent to HTTPS with client certificate authentication. Each rule in authorization scenarios requires an authentication method (''smtp'', ''md5'' or ''smime''); if the required authentication method was not used, a higher authentication mode can be requested.









======  S/MIME and HTTPS authentication ======



Chapter [[x509#use_of_smime_signatures_by_sympa_itself|Use of S/MIME signature by Sympa itself]] deals with Sympa and S/MIME signature. Sympa uses the ''OpenSSL'' library to work on S/MIME messages, you need to configure some related Sympa parameters: [[x509#ssympa_configuration|S/X509 Sympa configuration]].



Sympa HTTPS authentication is based on Apache+mod_SSL that provide the required authentication information through CGI environment variables. You will need to edit the Apache configuration to allow HTTPS access and require X509 client certificate. Here is a sample Apache configuration:



<code>

  SSLEngine on

  SSLVerifyClient optional

  SSLVerifyDepth  10

  ...

  <Location /sympa>

     SSLOptions +StdEnvVars

     SetHandler fastcgi-script

  </Location>

</code>



If you are using the SubjAltName, then you additionaly need to export the certificate data because of a ''mod_ssl'' bug. You will also need to install the textindex Crypt-OpenSSL-X509 CPAN module. Add this option to the Apache configuration file: <code>SSLOptions +ExportCertData</code>





====== Authentication with email address, uid or alternate email address ======



Sympa stores the data relative to the subscribers in a DataBase. Among these data: password, email address exploited during the web authentication. The module of LDAP authentication allows to use Sympa in an intranet without duplicating user passwords.



This way users can indifferently authenticate with their ''ldap_uid'', their ''alternate_email'' or their canonic email stored in the LDAP directory.



Sympa gets the canonic email in the LDAP directory with the ''ldap_uid'' or the ''alternate_email''. Sympa will first attempt an anonymous bind to the directory to get the user's DN, then Sympa will bind with the DN and the user's ''ldap_password'' in order to perform an efficient authentication. This last bind will work only if the right ''ldap_password'' is provided. Indeed the value returned by the bind(DN,ldap_password) is tested.



Example: a person is described by



                   Dn:cn=Fabrice Rafart,

                   ou=Siege ,

                   o=MyCompany,

                   c=FR Objectclass:

                   person Cn: Fabrice Rafart

                   Title: Network Responsible

                   O: Siege

                   Or: Data processing

                   Telephonenumber: 01-00-00-00-00

                   Facsimiletelephonenumber:01-00-00-00-00

                   L:Paris

                   Country: France

  		       uid: frafart

   		       mail: Fabrice.Rafart@MyCompany.fr

                   alternate_email: frafart@MyCompany.fr

                   alternate:rafart@MyCompany.fr



So Fabrice Rafart can be authenticated with: frafart, Fabrice.Rafart@MyCompany.fr, frafart@MyCompany.fr, Rafart@MyCompany.fr. After this operation, the address in the FROM field will be the Canonic email, in this case Fabrice.Rafart@MyCompany.fr. That means that Sympa will get this email and use it during all the session until you clearly ask Sympa to change your email address via the two pages: which and pref.









====== Generic SSO authentication ======



The authentication method has first been introduced to allow interraction with [[http://shibboleth.internet2.edu/|Shibboleth]], Internet2's inter-institutional authentication system. But it should be usable with any SSO system that provides an Apache authentication module being able to protect a specified URL on the site (not the whole site). Here is a sample ''httpd.conf'' that shib-protects the associated Sympa URL:



<code>

  ...

  <Location /sympa/sso_login/inqueue>

    AuthType shibboleth

    require mail ~ @

  </Location>

  ...

</code>



Sympa will get user attributes via environment variables. In the most simple case, the SSO will provide the user email address. If not, Sympa can be configured to check an email address provided by the user, or to look for the user email address in a LDAP directory (the search filter will make use of user information inherited from the SSO Apache module).



To plug a new SSO server in your Sympa server, you should add a ''generic_sso'' paragraph (describing the SSO service) in your ''auth.conf'' configuration file (see [[authentication#generic_sso_paragraph|generic_sso paragraph]]). Once this paragraph has been added, the SSO service name will be automatically added to the web login menu.



Apart from the user email address, the SSO can provide other user attributes that Sympa will store in the ''user_table'' DB table (for persistancy), and make available in the [user_attributes] structure that you can use within authorization scenarios (see [[authorization-scenarios#rules_specifications|Rules specifications]]) or in web templates via the [0ser.attributes %] structure.





====== CAS-based authentication ======



CAS is the Yale University SSO software. Sympa can use the CAS authentication service.



Listmasters should define at least one or more CAS servers (**cas** paragraph) in ''auth.conf''. If the ''non_blocking_redirection'' parameter was set for a CAS server, then Sympa will try a transparent login on this server when the user accesses the web interface. If a CAS server redirects the user to Sympa with a valid ticket, Sympa receives a user ID from the CAS server. Then, it connects to the related LDAP directory to get the user email address. If no CAS server returns a valid user ID, Sympa will let the user either select a CAS server to login or perform a Sympa login.





====== auth.conf ======



The ''/home/sympa/etc/auth.conf'' configuration file contains numerous parameters which are read on start-up of Sympa. If you change this file, do not forget that you will need to restart ''wwsympa.fcgi'' afterwards.



The ''/home/sympa/etc/auth.conf'' is organized in paragraphs. Each paragraph describes an authentication service with all parameters required to perform an authentication using this service. Sympa's current version can perform authentication through LDAP directories, using an external Single Sign-On Service (like CAS or Shibboleth), or using the internal ''user_table'' table.



===== ''regexp'' and ''negative_regexp'' : the auth.conf switches =====



Suppose your organization use two domains for its email addresses, for example "student.univ.edu" and "univ.edu". The first domain correspond to people stored in a part of the LDAP directory , and the other one to people stored in another part. You may want to define a specific authentication paragraph for each of these groups.



the ''regexp'' subparameter -- and its evil twin ''negative_regexp'' -- are exactly used to perform such a distinction: it allows you to apply different authentication paragraph based on which email address was provided by the user. Let's emphasize this: **the ''regexp'' and ''negative_regexp'' are applied to email addresses //only//. It will //not// work on user id.**



Each paragraph in ''auth.conf'' can contain an occurence of these subparameters. Their value is a regexp (just the regexp part. No delimiters).



Example:



<code>

  regexp         student\.univ\.edu

</code>



What do they do?



They are tested among the domain part of the email provided. The paragraph will be used with this email address if it matches the expression defined by ''regexp'' or if it does //not// match the expressino defined by ''negative_regexp''.



===== Login form =====





The login page contains 2 forms: the login form and the SSO. When users hit the login form, each ldap or ''user_table'' authentication paragraph is applied unless email adress input from form matches the ''negative_regexp'' or do not match ''regexp''. ''negative_regexp'' and ''regexp'' can be defined for each ldap or ''user_table'' authentication service so that administrators can block some authentication methods for a class of users.



The second form in the login page contains the list of CAS servers so that users can choose explicitely their CAS service.



===== ''auth.conf'' structure =====





Each paragraph starts with one of the keyword ''cas'', ''ldap'' or ''user_table''.



The ''/home/sympa/etc/auth.conf'' file contains directives in the following format:



<code>

paragraphs

keyword value



paragraphs

keyword value

</code>



Comments start with the ''#'' character at the beginning of a line.



Empty lines are also considered as comments and are ignored at the beginning. After the first paragraph, they are considered as paragraph separators. There should only be one directive per line, but their order in the paragraph is of no importance.



Example:

<code>

  #Configuration file auth.conf for the LDAP authentification

  #Description of parameters for each directory

  

  cas

  	base_url			https://sso-cas.renater.fr

  	non_blocking_redirection        on

  	auth_service_name		cas-cru

  	ldap_host			ldap.renater.fr:389

          ldap_get_email_by_uid_filter    (uid=[uid])

  	ldap_timeout			7

  	ldap_suffix			dc=cru,dc=fr

  	ldap_scope			sub

  	ldap_email_attribute		mail

  

  ## The URL corresponding to the service_id should be protected by the SSO (Shibboleth in the exampl)

  ## The URL would look like http://yourhost.yourdomain/sympa/sso_login/inqueue in the following example

  generic_sso

          service_name       InQueue Federation

          service_id         inqueue

          http_header_list   mail,displayName,eduPersonAffiliation

          email_http_header  mail

  

  ## The email address is not provided by the user home institution

  generic_sso

          service_name               Shibboleth Federation

          service_id                 myfederation

          http_header_list           mail,displayName,eduPersonAffiliation

          netid_http_header          mail

  	  internal_email_by_netid    1

  	  force_email_verify         1

  

  ldap

  	regexp				univ-rennes1\.fr

  	host				ldap.univ-rennes1.fr:389

  	timeout				30

  	suffix				dc=univ-rennes1,dc=fr

  	get_dn_by_uid_filter		(uid=[sender])

  	get_dn_by_email_filter		(|(mail=[sender])(mailalternateaddress=[sender]))

  	email_attribute			mail

  	alternative_email_attribute	mailalternateaddress,ur1mail

  	scope				sub

  	use_ssl                         1

  	ssl_version                     sslv3

  	ssl_ciphers                     MEDIUM:HIGH

  

  ldap  

  	host				ldap.univ-nancy2.fr:392,ldap1.univ-nancy2.fr:392,ldap2.univ-nancy2.fr:392

  	timeout				20

  	bind_dn                         cn=sympa,ou=people,dc=cru,dc=fr

  	bind_password                   sympaPASSWD

  	suffix				dc=univ-nancy2,dc=fr

  	get_dn_by_uid_filter		(uid=[sender])

  	get_dn_by_email_filter			(|(mail=[sender])(n2atraliasmail=[sender]))

  	alternative_email_attribute	n2atrmaildrop

  	email_attribute			mail

  	scope				sub

          authentication_info_url         http://sso.univ-nancy2.fr/

  

  user_table

  	negative_regexp 		((univ-rennes1)|(univ-nancy2))\.fr

</code>





=====  user_table paragraph =====



The ''user_table'' paragraph is related to Sympa internal authentication by email and password. It is the simplest one. The only parameters are ''regexp'' or ''negative_regexp'' which are Perl regular expressions applied on an email address provided, to select or block this authentication method for a subset of email addresses.











=====  ldap paragraph =====



This paragraph allows to login to Sympa using data taken from an LDAP directory. Login is done in two steps:



  - user provide an user id or an email address, with a password. These are used to retrieve their DN in the LDAP directory.

  - the email attribute is extracted from the directory entry corresponding to the found DN.



Here is how to configure the LDAP authentication:



  * ''regexp'' and ''negative_regexp'' \\ Same as in the ''user_table'' paragraph: if an email address is provided (this does not apply to an uid), then the regular expression will be applied to find out if the LDAP directory can be used to authenticate a subset of users.

  * ''host'' \\ This keyword is **mandatory**. It is the domain name used in order to bind to the directory and then to extract information. You must mention the port number after the server name. Server replication is supported by listing several servers separated by commas. \\ Example:

<code>

    	host ldap.univ-rennes1.fr:389

    	host ldap0.university.com:389,ldap1.university.com:389,ldap2.university.com:389

</code>

  * ''timeout'' \\ It corresponds to the timelimit in the Search fonction. A timelimit that restricts the maximum time (in seconds) allowed for a search. A value of 0 (the default) means that no timelimit will be requested.

  * ''suffix'' \\ The root of the DIT (Directory Information Tree). The DN that is the base object entry relative to which the search is to be performed. \\ Example: ''dc=university,dc=fr''

  * ''bind_dn'' \\ If anonymous bind is not allowed on the LDAP server, a DN and password can be used.

  * ''bind_password'' \\ This password is used, combined with the ''bind_dn'' above.

  * ''get_dn_by_uid_filter'' \\ Defines the search filter corresponding to the ''ldap_uid''. (RFC 2254 compliant). If you want to apply the filter on the user, use the variable ' [sender] '. It will work with every type of authentication (uid, ''alternate_email'', ...). \\ Example:

<code>

 	(Login = [sender])

    	(|(ID = [sender])(UID = [sender]))

</code>

  * ''get_dn_by_email_filter'' \\ Defines the search filter corresponding to the email addresses (canonic and alternative - this is RFC 2254 compliant). If you want to apply the filter on the user, use the variable ' [sender] '. It will work with every type of authentication (''uid'', ''alternate_email''..). \\ Example: a person is described by

<code>

  Dn:cn=Fabrice Rafart,

  ou=Siege ,

  o=MaSociete ,

  c=FR Objectclass:

  person Cn: Fabrice Rafart

  Title: Network Responsible

  O: Siege

  Or: Data processing

  Telephonenumber: 01-00-00-00-00

  Facsimiletelephonenumber:01-00-00-00-00

  L:Paris

  Country: France

  uid: frafart

  mail: Fabrice.Rafart@MaSociete.fr

  alternate_email: frafart@MaSociete.fr

  alternate:rafart@MaSociete.fr

</code> \\ The filters can be:

<code>

  (mail = [sender]) (| (mail = [sender])(alternate_email = [sender]) )

  (| (mail = [sender])(alternate_email = [sender])(alternate  = [sender]) )

</code>

  * ''email_attribute'' \\ The name of the attribute for the canonic email in your directory: for instance ''mail'', ''canonic_email'', ''canonic_address'', ... In the previous example, the canonic email is ''mail''.

  * ''alternative_email_attribute'' \\ The name of the attribute for the alternate email in your directory: for instance ''alternate_email'', ''mailalternateaddress'', ... You make a list of these attributes separated by commas.



With this list, Sympa creates a cookie which contains various information: whether the user is authenticated via LDAP or not, his alternate email. Storing the alternate email is interesting when you want to canonify your preferences and subscriptions, that is to say you want to use a unique address in ''user_table'' and ''subscriber_table'', which is the canonic email.

  * ''scope''  (Default value: ''sub'') \\ By default, the search is performed on the whole tree below the specified base object. This may be changed by specifying a scope:

    * ''base'': search only the base object,

    * ''one'': search the entries immediately below the base object,

    * ''sub'': search the whole tree below the base object. This is the default.

  * ''authentication_info_url'' \\ Defines the URL of a document describing LDAP password management. When hitting Sympa's //Send me a password// button, LDAP users will be redirected to this URL.

  * ''use_ssl'' \\ If set to ''1'', connection to the LDAP server will use SSL (LDAPS).

  * ''ssl_version'' \\ This defines the version of the SSL/TLS protocol to use. Defaults of Net::LDAPS to ''sslv2/3'', other possible values are ''sslv2'', ''sslv3'', and ''tlsv1''.

  * ssl_ciphers

Specify which subset of cipher suites are permissible for this connection, using the standard OpenSSL string format. The default value of Net::LDAPS for ciphers is ''ALL'', which permits all ciphers, even those that do not encrypt!



===== generic_sso paragraph =====



  * ''service_name'' \\  This is the SSO service name that will be offered to the user in the login banner menu.

  * ''service_id'' \\  This service ID is used as a parameter by Sympa to refer to the SSO service (instead of the service name). \\ A corresponding URL on the local web server should be protected by the SSO system; this URL would look like ''<nowiki>http://yourhost.yourdomain/sympa/sso_login/inqueue</nowiki>'' if the ''service_id'' is ''inqueue''.

  * ''http_header_list'' \\ Sympa gets user attributes from environment variables coming from the web server. These variables are then cached in the ''user_table'' DB table for later use in authorization scenarios (in structure). You can define a coma-separated list of header field names.

  * ''http_header_prefix'' \\  Only environment variables starting with the defined prefix will be kept. Another option is to list HTTP header fields explicitely using ''http_header_list'' parameter.

  * ''email_http_header'' \\  This parameter defines the environment variable that will contain the authenticated user's email address.

  * ''http_header_value_separator'' (default: ';'): user attributes may be multi-valued (including the user email address. This parameter defines the values separator character(s).

  * ''logout_url'' \\ This optional parameter allows to specify the SSO logout URL. If defined, Sympa will redirect the user to this URL after the Sympa logout has been performed.





The following parameters define how Sympa can check the user email address, either provided by the SSO or by the user himself:



  * ''internal_email_by_netid'' \\  If set to ''1'', this parameter makes Sympa use its ''netidmap'' table to associate NetIDs to user email addresses.

  * ''netid_http_header'' \\  This parameter defines the environment variable that will contain the user's identifier. This netid will then be associated with an email address provided by the user.

  * ''force_email_verify'' \\  If set to ''1'', this parameter makes Sympa check the user's email address. If the email address was not provided by the authentication module, then the user is requested to provide a valid email address.



The following parameters define how Sympa can retrieve the user email address; **these are useful only in case the ''email_http_header'' entry was not defined:**



  * ''ldap_host'' \\  The LDAP host Sympa will connect to fetch user email. The ''ldap_host'' include the port number and it may be a comma separated list of redondant hosts.

  * ''ldap_bind_dn'' \\  The DN used to bind to this server. Anonymous bind is used if this parameter is not defined.

  * ''ldap_bind_password'' \\  The password used unless anonymous bind is used.

  * ''ldap_suffix'' \\  The LDAP suffix used when searching user email.

  * ''ldap_scope'' \\  The scope used when searching user email. Possible values are ''sub'', ''base'' and ''one''.

  * ''ldap_get_email_by_uid_filter'' \\ The filter used to perform the email search. It can refer to any environment variables inherited from the SSO module, as shown below. Example: <code>ldap_get_email_by_uid_filter    (mail=[SSL_CLIENT_S_DN_Email])</code>

  * ''ldap_email_attribute'' \\ The attribute name to be used as user canonical email. In the current version of Sympa, only the first value returned by the LDAP server is used.

  * ''ldap_timeout'' \\  The time out for the search.

  * ''ldap_use_ssl'' \\ If set to ''1'', connection to the LDAP server will use SSL (LDAPS).

  * ''ldap_ssl_version'' \\ This defines the version of the SSL/TLS protocol to use. Defaults of Net::LDAPS to ''sslv2/3'', other possible values are ''sslv2'', ''sslv3'', and ''tlsv1''.

  * ''ldap_ssl_ciphers'' \\ Specifies which subset of cipher suites are permissible for this connection, using the OpenSSL string format. The default value of Net::LDAPS for ciphers is ''ALL'', which permits all ciphers, even those that do not encrypt!









=====  cas paragraph =====



Note that Sympa will act as a CAS client to validate CAS tickets. During this exchange, Sympa will check the CAS server x.509 certificate. Therefore you should ensure that the certificate autority of the CAS server is known by Sympa ; this should be configured through the [[manual:conf-parameters:part3#cafile|cafile]] or [[manual:conf-parameters:part3#capath|capath]] sympa.conf configuration parameters.



  * ''auth_service_name'' \\  The authentication service name. Note that it is used as an identifier in the code; it should therefore be made of alphanumeric characters only, with no space.

  * ''auth_service_friendly_name'' \\ If defined, this string is proposed on the web login banner.

  * ''host'' (OBSOLETE) \\  This parameter has been replaced by **base_url** parameter

  * ''base_url'' \\ The base URL of the CAS server.

  * ''non_blocking_redirection'' on | off \\ Default value: ''on'' \\ This parameter only concerns the first access to Sympa services by a user, it activates or not the non blocking redirection to the related CAS server to check automatically if the user as been previously authenticated with this CAS server. The redirection to CAS is used with the CGI parameter ''gateway=1'' that specifies to CAS server to always redirect the user to the original URL, but just check if the user is logged. If active, the SSO service is effective and transparent, but in case the CAS server is out of order, the access to Sympa services is impossible.

  * ''login_uri'' (OBSOLETE) \\  This parameter has been replaced by the ''login_path'' parameter.

  * ''login_path'' (OPTIONAL) \\  The login service path.

  * ''check_uri'' (OBSOLETE) \\  This parameter has been replaced by the ''service_validate_path'' parameter.

  * ''service_validate_path'' (OPTIONAL) \\  The ticket validation service path.

  * ''logout_uri'' (OBSOLETE) \\  This parameter has been replaced by the ''logout_path'' parameter.

  * ''logout_path'' (OPTIONAL) \\  The logout service path.

  * ''proxy_path'' (OPTIONAL) \\  The proxy service path, only used by the Sympa SOAP server.

  * ''proxy_validate_path'' (OPTIONAL) \\  The proxy validate service path, only used by the Sympa SOAP server.

  * ''ldap_host'' \\  The LDAP host Sympa will connect to fetch user email when user uid is return by CAS service. The ''ldap_host'' includes the port number and it may be a comma separated list of redondant hosts.

  * ''ldap_bind_dn'' \\  The DN used to bind to this server. Anonymous bind is used if this parameter is not defined.

  * ''ldap_bind_password'' \\  The password used unless anonymous bind is used.

  * ''ldap_suffix'' \\  The LDAP suffix used when searching user email.

  * ''ldap_scope'' \\  The scope used when searching user email. Possible values are ''sub'', ''base'' and ''one''.

  * ''ldap_get_email_by_uid_filter'' \\  The filter used to perform the email search.

  * ''ldap_email_attribute'' \\  The attribute name to be used as user canonical email. In the current version of Sympa, only the first value returned by the LDAP server is used.

  * ''ldap_timeout'' \\  The time out for the search.

  * ''ldap_use_ssl'' \\ If set to ''1'', connection to the LDAP server will use SSL (LDAPS).

  * ''ldap_ssl_version'' \\ This defines the version of the SSL/TLS protocol to use. Defaults of Net::LDAPS to ''sslv2/3'', other possible values are ''sslv2'', ''sslv3'', and ''tlsv1''.

  * ''ldap_ssl_ciphers'' \\ Specifies which subset of cipher suites are permissible for this connection, using the OpenSSL string format. The default value of Net::LDAPS for ciphers is ''ALL'', which permits all ciphers, even those that do not encrypt!









====== Sharing WWSympa's authentication with other applications ======



This section is out of date. 



<del>If you are not using a web Single Sign On system, you might want to make other web applications collaborate with Sympa and share the same authentication system. Sympa uses HTTP cookies to carry users' authentication information from page to page. This cookie contains no information about privileges. To make your application work with Sympa, you have two possibilities:



  * Delegating authentication operations to //WWSympa//\\  If you want to avoid spending a lot of time programming a CGI to do Login, Logout and Remindpassword, you can copy //WWSympa//'s login page to your application, and then make use of the cookie information within your application. The cookie format is: <code>sympauser=<user_email>:<checksum></code>where ''<user_email>'' is the user's complete e-mail address, and ''<checksum>'' represents the 8 last bytes of the MD5 checksum of the ''<user_email>''+Sympa ''cookie'' configuration parameter. Your application needs to know what the ''cookie'' parameter is, so it can check the HTTP cookie validity; this is a secret shared between //WWSympa// and your application. //WWSympa//'s ''loginrequest'' page can be called to return to the referer URL when an action is performed. Here is a sample HTML anchor:<code><A HREF=''/sympa/loginrequest/referer''>Login page</A></code>

You can also have your own HTML page submitting data to ''wwsympa.fcgi'' CGI. If you do so, you can set the ''referer'' variable to another URI. You can also set the ''failure_referer'' to make //WWSympa// redirect the client to a different URI if login fails.

  * Using //WWSympa//'s HTTP cookie format within your authentication module \\ To cooperate with //WWSympa//, you simply need to adopt its HTTP cookie format and share the secret it uses to generate MD5 checksums, i.e. the ''cookie'' configuration parameter. In this way, //WWSympa// will accept users authenticated through your application without further authentication.</del>



=====  Perl example =====

Here is a example using perl that show both method : use Sympa login page or copy login form into your application. You can try it on Sympa author's lists server : http://listes.renater.fr/cgi-bin/sample.cgi





<code perl>

#!/usr/bin/perl -U



## Just a example how to use Sympa Session



use strict;

use CGI;

use DBI;

use lib '/home/sympa/bin';

use Conf;

use SympaSession;

# use cookielib;

use List;

my $query = new CGI;

my 0n = $query->Vars;

my $robot = 'renater.fr';

my $email;



unless (&Conf::load('/etc/sympa.conf')) {

    printf "Configuration file /etc/sympa.conf has errors.\n";

}

### this section is mandatory to have List::is_user working

if ($Conf{'db_name'} and $Conf{'db_type'}) {

    unless ($List::use_db = &Upgrade::probe_db()) {

	printf "Error could not connect to database";

    }

}

&List::_apply_defaults();

print "Content-Type: text/html\n\n";

print "<html><head><title>just a test</head><body>";

if ($ENV{'HTTP_COOKIE'} =~ /(sympa_session)\=/) {   

    my  $session = new SympaSession ($robot,{'cookie'=>&SympaSession::get_session_cookie($ENV{'HTTP_COOKIE'})});

    $email = $session->{'email'} unless ($session->{'email'} eq 'nobody');

}

printf "<h1>welcome</h1>";

if ($email) {

    printf "Sympa session is recognized from cookie sympa_session. Your email is <b></b>\n",$email;

}else{

print '

<h4> method 1: use Sympa form</h4>

This method is very simple, just link the Sympa login page using the <i>referer</i> parameter. 

The URL look like http://mysserver.domain.org/sympa/loginrequest/referer.   

<a href="/sympa/loginrequest/referer">Try it</a>



<h4>method 2 : copy login form into your application</h4>

  <form action="http://listes.renater.fr/sympa" method="post">

        <input type="hidden" name="referer" value="http://myserver.domain.org/cgi-bin/sample.cgi" /> 

        <input type="hidden" name="failure_referer" value " http://myserver.domain.org/cgi-bin/error_login.html" />

        <input type="hidden" name="action" value="login" />

        <label for="email">email address:

        <input type="text" name="email" id="email"/></label><br />

        <label for="passwd" >password:

        <input type="password" name="passwd" id="passwd" /></label> <br/>

        <input type="submit" name="action_login" value="Login" />

  </form>';

}

print '</body></hml>';

</code>



===== How to do it using PHP ? =====



Chris Hastie has sumitted a [[/contribs/index#how_to_share_sympa_session_with_other_php_applications|contrib for sharing Sympa sessions with PHP applications]]. 



===== What about using SOAP to access Sympa sessions =====



Not yet possible but of course this the best way to do it. There is a 

[[https://sourcesup.renater.fr/tracker/index.php?func=detail&aid=4056&group_id=23&atid=170|feature request]] for it.



====== Provide a Sympa login form in another application ======



You can easily trigger a Sympa login from another web page. The login form should look like this:



<code>

  <FORM ACTION=''http://listes.renater.fr/sympa'' method=''post''>

        <input type=''hidden'' name=''previous_action'' value=''arc'' />

        Access web archives of list

        <select name=''previous_list''>

        <option value=''sympa-users'' >sympa-users</option>

        </select><br/>

        <input type=''hidden'' name=''action'' value=''login'' />

        <label for=''email''>email address:

        <input type=''text'' name=''email'' id=''email'' size=''18'' value='''' /></label><br />

        <label for=''passwd'' >password:

        <input type=''password'' name=''passwd'' id=''passwd'' size=''8'' /></label> <br/>

        <input class=''MainMenuLinks'' type=''submit'' name=''action_login'' value="Login and access web archives" />

  </FORM>

</code>



The example above does not only perform the login action, but also redirects the user to another Sympa page, a list web archive here. The ''previous_action'' and ''previous_list'' variables define the action that will be performed after the login is done.



====== Setting up a Shibboleth-enabled Sympa server ======



[[http://www.sympa.org|Sympa]] is an open source mailing list software, provided by the CRU.



[[http://shibboleth.internet2.edu|Shibboleth]] is an open source distributed authentication software, provided by Internet2 consortium; it implements the SAML 2.0 protocol.



===== Implementation in Sympa =====



Sympa has been made Shibboleth-enabled in its 4.1 release (March 2004). The implementation is wider that Shibboleth authentication and can be used to plug Sympa web interface with almost any authentication mecanism that comes with an Apache authentication module. The feature is named **generic_sso** in Sympa documentation.



  * [[http://www.sympa.org/manual/authentication#generic_sso_authentication|Sympa documentation for generic_sso]]



===== Prerequisites =====



==== Sympa ====



You'll need to have a Sympa server running. It should be a recent version (5.3 or later) because a few bugs have been fixed.



==== Shibboleth Service Provider ====



You need to install Shibboleth SP (Service Provider) and configure it properly to interract with your favourite federation. The documentation refers to Shibboleth SP 2.1.



  * [[https://spaces.internet2.edu/display/SHIB2/NativeSPLinuxInstall|Installing a Shibboleth Service Provider]]

  * [[https://federation.renater.fr/docs/installation-sp|Installer un fournisseur de services Shibboleth]]



===== How it works =====



Sympa expects Shibboleth to provide some user informations, especially the user email address, once the user has authenticated. Sympa will get user attributes from Shibboleth Apache module via environment variables. You'll have to tell Sympa the names of these environment variables.



To keep part of Sympa web interface accessible to unauthenticated users, not all Sympa URLs are Shibboleth-protected. Only one URL needs to be protected ; Sympa will manage to collect user attributes when the user is redirected to this URL and will keep them in cache for later use, during the session.



Note that Sympa does not use lazy sessions mecanism (provided by Shibboleth); the mecanism used almost provides the same level of flexibility and can be adapted to authentication mecanisms other than Shibboleth.





===== Configuring Sympa =====



Sympa gathers all web authentication configuration in a single file (can have one per virtual host): **auth.conf**. You should create/edit this configuration file to add the Shibboleth-related part. Here is a sample ///home/sympa/etc/auth.conf// file:

<code>

generic_sso

   service_name       Connexion

   service_id         federation_renater

   http_header_list mail

   email_http_header  mail

   logout_url         https://lists.your.domain/Shibboleth.sso/Logout?return=https%3A0.0000000.000000lists.your.domain/sympa



#user_table

#        negative_regexp                 .*

</code>



Note that:

  * service_name (//Connexion// here) is the name of the button (of menu item) for logging in, in Sympa web interface;

  * service_id (//federation_renater// here) is the identifier of this authentication server within Sympa. You'll notice later that login URLs in Sympa will include this token;

  * http_header_prefix is of no use with Shibboleth SP 2.x because user attributes provided by Apache no more share a common prefix (as Shibboleth 1.3 used to do). Set this parameter to the same value as the //email_http_header// parameter. Note that Sympa 6 includes a new //http_header_list// more adapted to declare the set of user attributes that are worth getting from Shibboleth.

  * email_http_header is the name of the environment variable that brings the user email address. It used to be //HTTP_SHIB_INETORGPERSON_MAIL// with Shibboleth 1.3 and the default with Shibboleth 2.x is //mail//. Note that until Sympa 6, multi-valued are not properly handled by Sympa. Sympa 6 provides a new //http_header_value_separator// with a default value of //;//.

  * logout_url is the URL the user will be redirected to for logging out. Note the //return// parameter provided here to make the user come back to Sympa web interface after logout is completed.

  * user_table authentication method is disabled, thus providing Shibboleth authentication ONLY; the standard Sympa login banner will disappear from the web interface.



You'll need to restart your Apache server to make Sympa web server take these changes into account:

<code>

/etc/init.d/httpd restart

</code>



You'll note the new "Connexion" button on your Sympa web interface:



{{:contribs:shiblogin.png?200|}}



===== Configuring Apache =====



Shibboleth authentication needs to be triggered on a dedicated URL. Here is a sample Apache configuration:

<code>

<Location /sympa/sso_login/federation_renater>

  AuthType shibboleth

  ShibRequireSession On

  ShibApplicationID app-sympa

  require shibboleth

#  require mail ~ @

</Location>

</code>



Note that:

  * the protected URL includes the //service_id// (here //federation_renater//); you should replace with the federation_id you defined in your //auth.conf// file.

  * ShibApplicationID directive reffers to the application context you'll define in Shibboleth configuration file.  Set this to ''default'' if you do not want to have a specific ''ApplicationOverride'' section in ''shibboleth2.xml'' (for instance, if you only have sympa running on this server).

  * we could have used the //require mail// directive (commented here) to enforce that the remote Identity Provider provides the user email address; we did not, to let Sympa cope with errors more smoothly than Shibboleth SP does.



Now restart your web server to validate these changes:

<code>

/etc/init.d/httpd restart

</code>



You can have a try accessing http:%//%lists.your.domain/sympa/sso_login/federation_renater ; it should trigger the Shibboleth user authentication.



===== Configuring Shibboleth =====



Shibboleth SP's main configuration file is **/etc/shibboleth/shibboleth2.xml**. That's the only configuration file you'll have to edit to make Shibboleth authentication work with Sympa.



You'll need to define an application context specific for your Sympa service. If you already have a Shibboleth-enabled service running on the server, you should either using the same application context for Sympa or define a new one using the //ApplicationOverride// directive.



Here is a sample piece of //shibboleth2.xml//:

<code xml>

<ApplicationOverride id="app-sympa"

                     entityID="https://lists.your.domain/sympa"

		     homeURL="https://lists.your.domain/sympa/sso_login/federation_renater" >



  <Sessions lifetime="28800" timeout="3600" checkAddress="false"

	    handlerURL="/sympa/sso_login/federation_renater/Shibboleth.sso" handlerSSL="true"

	    exportLocation="http://localhost/sympa/sso_login/federation_renater/Shibboleth.sso/GetAssertion"

	    idpHistory="false" idpHistoryDays="7">

			

			

	<SessionInitiator type="Chaining" Location="/wayf" id="WAYF" relayState="cookie">

	    <SessionInitiator type="WAYF" defaultACSIndex="5" URL="https://federation.renater.fr/wayf"/>

	</SessionInitiator>



	<md:AssertionConsumerService Location="/SAML/POST" index="5"

				     Binding="urn:oasis:names:tc:SAML:1.0:profiles:browser-post"/>

		    

	<LogoutInitiator type="Chaining" Location="/Logout">

		<LogoutInitiator type="Local"/>

	</LogoutInitiator>



        <md:ManageNameIDService Location="/NIM/SOAP"

                                Binding="urn:oasis:names:tc:SAML:2.0:bindings:SOAP"/>

        <md:ManageNameIDService Location="/NIM/Redirect" conf:template="/etc/shibboleth/bindingTemplate.html"

                                Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"/>

        <md:ManageNameIDService Location="/NIM/POST" conf:template="/etc/shibboleth/bindingTemplate.html"

                                Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"/>

        <md:ManageNameIDService Location="/NIM/Artifact" conf:template="/etc/shibboleth/bindingTemplate.html"

                                Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact"/>



	<md:ArtifactResolutionService Location="/Artifact/SOAP" index="1"

	 			      Binding="urn:oasis:names:tc:SAML:2.0:bindings:SOAP"/>



        <!-- Extension service that generates "approximate" metadata based on SP configuration. -->

        <Handler type="MetadataGenerator" Location="/Metadata" signing="false"/>



        <!-- Status reporting service. -->

        <Handler type="Status" Location="/Status" acl="127.0.0.1"/>

	    

        <!-- Session diagnostic service. -->

        <Handler type="Session" Location="/Session"/>

	    

  </Sessions>

</ApplicationOverride>

</code>



Note that:

  * the //ApplicationOverride/id// attribute needs to be the same you defined in your Apache //ShibApplicationID// directive value. An alternative is to use Shibboleth RequestMapper but it's much harder to configure;

  * the value of //ApplicationOverride/entityID// is your Sympa service entityID, used later to declare the service at your favourite federation;

  * the //SessionInitiator/URL// refers to //https:%//%federation.renater.fr/wayf//. You should change it to provide your own WAYF URL.



Restart your Apache server and shibd daemon to use the new configuration file :

<code>

/etc/init.d/https restart

/etc/init.d/shibd restart

</code>



===== Declaring your Sympa service in your favourite federation =====



It's now time to let identity providers know about your federated mailing list service, otherwise they will not authenticate users that come from your service, or provide no user attributes. You favourite federation probably provides a web form to declare federated resources.



  * [[https://services-federation.renater.fr/gestion?action=get_all&federation=renater|resource registration for French users]]



Before you register your mailing list in a production federation you should do some testing. You can either test within a Test federation ([[https://federation.renater.fr/en/test-federation|see the French test federation]]) or setup a bilateral trust relationship with a single Identity Provider ([[https://federation.renater.fr/docs/fiches/fedadeux|documentation in French to setup a bilateral relationship]]).



You'll need to make sure all Identity Providers will provide the user email address; therefore they'll need to configure their //attribute release policy//.



===== Coping with virtual hosts =====



If you have Sympa virtual robots for other virtual hosts, you'll need to define distinct ApplicationOverride Shibboleth configuration elements for each virtual host. You'll have to declare each of them to your favourite federation, since they appear as separate services.



===== What if you don't trust provided email addresses? =====



You might not trust the email address user attribute provided by some Identity Providers, because the provisioning of this attribute is too weak (provided by the user himself, without further checks). This raises security issue because anybody who logs in with somebody else's email address gets this person's privileges on the mailing list server.



This issue can be addressed by Sympa thanks to an extension developped by JP Robinson that allows Sympa to either validate the user's email address or even collect it (later associated to a Shibboleth user identifier). 



Please read the documentation for further informations:

 * [[http://www.sympa.org/manual/authentication#generic_sso_paragraph|generic_sso documentation]]
====== Authorization scenarios ======



An authorization scenario is a small configuration language to describe who can perform an operation and which authentication method is requested for it. An authorization scenario is an ordered set of rules. The goal is to provide a simple and flexible way to configure authorization and required authentication method for each operation.



The function to evaluate scenario is described in section [[:internals:|internals]].



===== Location of scenario file =====



List parameters controlling the behavior of commands are linked to different authorization scenarios. For example: the ''send private'' parameter is related to the ''send.private'' scenario.



There are four possible locations for an authorization scenario. When Sympa seeks to apply an authorization scenario:



  * it first looks in the related list directory ''/home/sympa/list_data/<list>/scenari'' or ''/home/sympa/my.domain.org/list_data/<list>/scenari'' if you use virtual hosts

  * If it does not find the file there, it scans the current robot configuration directory ''/home/sympa/etc/my.domain.org/scenari'',

  * then the site's configuration directory ''/home/sympa/etc/scenari'',

  * and finally ''/home/sympa/default/scenari'', which is the directory installed by the Makefile.



When customizing scenario for your own site, robot or list, don't modify .../sympa/bin/scenari content or the next Sympa update will overwrite it (you must never modify anything in .../sympa/bin/ unless you are patching Sympa). You can modify Sympa behavior if you are creating a new scenario with the same name as one of the scenario already included in the distribution but with a location related to the target site, robot or list. You can also add a new scenario ; it will automatically add an accepted value for the related parameter.



<note warning>

When modifying a existing scenario you need to restart Sympa or touch list config file before Sympa use it. 

</note>





====== Scenario structure ======



Basically, a scenario file is composed of a title on the first line and a set of rules on the following lines.



===== Scenario title =====



The first line of a scenario file can contain its title. This is the text that will later appear in the drop-down menu of your administration web interface. This title can be just plain text:



<code>Restricted to subscribers</code>



It can also be set to be internationalized:



<code>title.gettext Restricted to subscribers</code>



That way, the character string following ''title.gettext'' can be handled by Sympa internationalization process.



===== Rules overview =====



Each authorization scenario rule contains:



  * **a condition**: the condition is evaluated by Sympa. It can use variables such as ''sender'' for the sender's email, ''list'' for the list name, etc.

  * **an authentication method**. The authentication method can be ''smtp'', ''md5'' or ''smime''. The rule is applied by Sympa if both the condition and authentication method match the runtime context.

    * ''smtp'' is used if Sympa uses the SMTP ''From:'' header ,

    * ''md5'' is used if a unique MD5 key as been returned by the requestor to validate the message,

    * ''smime'' is used for signed messages (see [[x509#configuration_to_recognize_smime_signatures|configuration to recognize S/MIME signatures]]);



  * **a returned atomic action** that will be executed by Sympa if the rule matches.



Example:



<code>

  del.auth



  title.us deletion performed only by list owners, need authentication

  title.fr suppression r\'eserv\'ee au propri\'etaire avec authentification

  title.es eliminacin reservada slo para el propietario, necesita autentificacin



    is_owner([listname],[sender])  smtp       -> request_auth

    is_listmaster([sender])        smtp       -> request_auth

    true()                         md5,smime  -> do_it

</code>



===== Rules definition =====



An authorization scenario consists of rules, evaluated in order beginning with the first.



==== Conditions ====



''custom_vars'' allows you to introduce [[customizing#custom_parameters|custom parameters]] in your scenario.



''verify_netmask'' allows the user to configure their local network to only be accessible to those that are members of it. For more information refer to [[:faq:tips_and_howto#how_to_restrict_some_pages_to_local_intranet_users|intranet restrictions]]



''perl_regexp'' can contain the string [host] (interpreted at run time as the list or robot domain). The variable notation ''<nowiki>[msg_header-><smtp_key_word>]</nowiki>'' is interpreted as the SMTP header value only when evaluating the authorization scenario for sending messages. It can be used, for example, to require editor validation for multipart messages. ''<nowiki>[msg_part->type]</nowiki>'' and ''<nowiki>[msg_part->body]</nowiki>'' are the MIME part content-types and bodies; the body is available for MIME parts in text/xxx format only.



Refer to [[customizing#tasks|Tasks]] for date format definition



A bunch of authorization scenarios are provided with the Sympa distribution; they provide a large set of configuration that allows the creation of lists for most purposes. But you will probably create authorization scenarios for your own needs. In this case, do not forget to restart Sympa and //WWSympa//, because authorization scenarios are not reloaded dynamically.



These standard authorization scenarios are located in the ''/home/sympa/bin/etc/scenari/'' directory. Default scenarios are named ''<command>.default''.



You may also define and name your own authorization scenarios. Store them in the ''/home/sympa/etc/scenari'' directory. They will not be overwritten by newer Sympa releases. Scenarios can also be defined for a particular virtual host (using directory ''/home/sympa/etc/<robot>/scenari'') or for a list (''/home/sympa/list_data/<robot>/<list>/scenari'' ). **Sympa will not dynamically detect that a list configuration should be reloaded after a scenario has been changed on disk.**



Example: copy the previous scenario to ''scenari/subscribe.rennes1'':



<code>

  equal([sender], 'userxxx@univ-rennes1.fr') smtp,smime -> reject

  match([sender], /univ-rennes1\.fr$/) smtp,smime -> do_it

  true()                               smtp,smime -> owner

</code>



You may now refer to this authorization scenario in any list configuration file, for example:

<code>

  subscribe rennes1

</code>



==== Authentification methods ====



Yous can specify three different authentication methods to base your rules on: ''smtp'', ''smime'' and ''md5''.



**these methods take a different meaning if you consider them in a web or mail context**.\\



Indeed if you consider, for example, the scenario ''send'': it will be evaluated when people try to send a message to a list.



  * If the message is sent through the web interface, Sympa will verify the identity of the sender based on its web authentication informations (login/password, certificate, etc.)

  * If it is sent by the mail client, the authentication is based on whatever authentication method the user's email client associated with the SMTP message (S/MIME signature, From field, etc.).



//But the same scenario file will be used in both cases.// That means that the same authentication method will be used, whichever context we're in. It is consequently important to understand what interpretation to give to each authentication method according to the context.



Here is a description of what is evaluated to authenticate the user depending of the context: web or mail.



^  Method  ^  Mail context  ^  Web context  ^

|  ''smtp''  |  the "From:" field of the message  |  //Nothing - unused in web context//  |

|  ''smime''  |  the S/MIME X509 signature of the email  |  An X509 certificate installed in the user's browser  |

|  ''md5''  |  the MD5 hash in the subject of the message  |  the authentication informations provided to Sympa (login/password)  |

|  ''dkim''  |  the DKIM signature of the message  |  //Nothing - unused in web context//  |



Note that ''md5'' will be used, in a mail context, when users answer to an authentication request, or when editors moderate a message by replying to a moderation request mail.



In most cases, ''smtp'' or ''dkim'' will be used for mails, and ''md5'' for the web.



==== Actions ====



The difference between ''editor'' and ''editorkey'' is that, with ''editor'', the message is simply forwarded to moderators, who can then forward it to the list if they like. ''editorkey'' assigns a key to the message and sends it to moderators together with the message. So moderators can just send back the key to distribute the message. Please note that moderation from the web interface is only possible when using ''editorkey'', because otherwise there is no copy of the message saved on the server.



The ''quiet'' can be part of the scenario action result. When using this option, no notification is sent to the message sender. For example, if a scenario rule is applied and result in  ''editorkey,quiet'' the sender of the message will not receive the automatic information message telling him that his message has been forwarded to the list editor. This is an important issue to prevent //backscatter// messages. backscatter messages are messages you receive as an automatic answer to a message you never sent. The following web page give you more details :

  * [[http://www.spamresource.com/2007/02/backscatter-what-is-it-how-do-i-stop-it.html ]]

  * [[http://en.wikipedia.org/wiki/Backscatter]]

Sympa version 6.0 and later of Sympa provide a better mechanism to prevent backscatter. See [[https://www.sympa.org/dev-manual/antispam]]



==== Formal specification of the rules ====



Rules are defined as follows:



<code>

  <rule> ::= <condition> <auth_list> -> <action>



  <condition> ::= [!] <condition

                  | true ()

                  | equal (<var>, <var>)

                  | less_than (<var>, <var>)

                  | match (<var>, /perl_regexp/)

  		| search (<named_filter_file>)

                  | is_subscriber (<listname>, <var>)

                  | is_owner (<listname>, <var>)

                  | is_editor (<listname>, <var>)

                  | is_listmaster (<var>)

                  | older (<date>, <date>)    # true if first date is anterior to the second date

                  | newer (<date>, <date>)    # true if first date is posterior to the second date

                  | CustomCondition::<package_name> (<var>*)

                  



  <var> ::= [email] | [sender] | [user-><user_key_word>] | [previous_email]

                    | [env->remote_host] | [env->remote_addr] | [user_attributes-><user_attributes_keyword>]

  	 	  | [subscriber-><subscriber_key_word>] | [list-><list_key_word>] | [env-><env_var>]

  		  | [conf-><conf_key_word>] | [msg_header-><smtp_key_word>] | [msg_body]

  	 	  | [msg_part->type] | [msg_part->body] | [msg_encrypted] | [is_bcc] | [current_date]

  		  | [topic-auto] | [topic-sender,] | [topic-editor] | [topic] | [topic-needed]

  		  | [custom_vars-><custom_var_name>] | <string>



  [is_bcc] ::= set to 1 if the list is neither in To: nor Cc:



  [sender] ::= email address of the current user (used on web or mail interface). Default value is 'nobody'



  [previous_email] ::= old email when changing subscription email in preference page.



  [msg_encrypted] ::= set to 'smime' if the message was S/MIME encrypted



  [topic-auto] ::= topic of the message if it has been automatically tagged



  [topic-sender] ::= topic of the message if it has been tagged by sender



  [topic-editor] ::= topic of the message if it has been tagged by editor



  [topic]  ::= topic of the message (this variable has a value if any of the previous [topic-*] variable has a value.



  [topic-needed] ::= the message has not got any topic and message topic are required for the list



  /perl_regexp/ ::= a perl regular expression. Don't forget to escape special characters (^, $, \{, \(, ...)

  Check http://perldoc.perl.org/perlre.html for regular expression syntax.



  <date> ::= '<date_element> [ +|- <date_element>]'



  <date_element> ::= <epoch_date> | <var> | <date_expr>



  <epoch_date> ::= <integer>



  <date_expr> ::= <integer>y<integer>m<integer>d<integer>h<integer>min<integer>sec



  <custom_var_name> ::= name of the custom parameter you want to use.



  <listname> ::= [listname] | '<listname_string>' | '<listname_string>@>domain_string>'



  <auth_list> ::= <auth>,<auth_list> | <auth>



  <auth> ::= smtp|md5|smime



  <action> ::=   do_it [,notify]

               | do_it [,quiet]

  	     | reject(reason=<reason_key>) [,quiet]

  	     | reject(tt2=<tpl_name>) [,quiet]

               | request_auth

               | owner

  	     | editor

  	     | editorkey[,quiet]

  	     | listmaster



  <reason_key> ::= match a key in mail_tt2/authorization_reject.tt2 template corresponding to

                   an information message about the reason of the reject of the user



  notify ::= sends a notification to list owner



  <tpl_name> ::= corresponding template (<tpl_name>.tt2) is send to the sender



  <user_key_word> ::= email | gecos | lang | password | cookie_delay_user

  	            | <additional_user_fields>



  <user_attributes_key_word> ::= one of the user attributes provided by the SSO system via environment variables. The [user_attributes] structure is available only if user authenticated with a generic_sso.



  <subscriber_key_word> ::= email | gecos | bounce | reception

  	                  | visibility | date | update_date

  			  | <additional_subscriber_fields>



  <list_key_word> ::= name | host | address | lang | max_size | priority | reply_to |

  		    status | subject | account | total



  <conf_key_word> ::= domain | email | listmaster | default_list_priority |

  		      sympa_priority | request_priority | lang | max_size



  <named_filter_file> ::= filename ending with .ldap , .sql or .txt.



  <package_name> ::= name of a perl package in /etc/custom_conditions/ (small letters)



</code>



====== Named Filters ======



At the moment, Named Filters are only used in authorization scenarios. They enable to select a category of people who will be authorized or not to realize some actions.



As a consequence, you can grant privileges in a list to people belonging to an LDAP directory, an SQL database or a flat text file, thanks to an authorization scenario.



Note that only a subset of variables available in the scenario context are available here (including [sender] and [listname]).





=====  LDAP Named Filters Definition =====



People are selected through an LDAP filter defined in a configuration file. This file must have the extension '.ldap'. It is stored in ''/home/sympa/etc/search_filters/''.



You must give a few information in order to create a LDAP Named Filter:



  * ''host'' \\ A list of host:port LDAP directories (replicates) entries.

  * ''suffix'' \\ Defines the naming space covered by the search (optional, depending on the LDAP server).

  * ''filter'' \\ Defines the LDAP search filter (RFC 2254 compliant). But you must absolutely take into account the first part of the filter which is: ''(mail_attribute = [sender])'', as shown in the example. You will have to replace ''mail_attribute'' by the name of the attribute for the email. Sympa checks whether the user belongs to the category of people defined in the filter.

  * ''scope'' \\ By default, the search is performed on the whole tree below the specified base object. This may be changed by specifying a scope:

    * ''base'': search only the base object.

    * ''one'': search the entries immediately below the base object.

    * ''sub'': search the whole tree below the base object. This is the default option.

  * ''bind_dn'' \\ If anonymous bind is not allowed on the LDAP server, a DN and password can be used.

  * ''bind_password'' \\ This password is used, combined with the ''bind_dn'' above.



''example.ldap'': we want to select the teachers of mathematics in the University of Rennes 1 in France:

<code>

  	host		ldap.univ-rennes1.fr:389,ldap2.univ-rennes1.fr:390

  	suffix		dc=univ-rennes1.fr,dc=fr

  	filter		(&(canonic_mail = [sender])(EmployeeType = prof)(subject = math))

  	scope		sub

</code>





=====  SQL Named Filters Definition =====



People are selected through an SQL filter defined in a configuration file. This file must have the extension '.sql'. It is stored in ''/home/sympa/etc/search_filters/''.



To create an SQL Named Filter, you have to configure SQL host, database and options, the same way you did it for the main Sympa database in ''sympa.conf''. Of course, you can use different database and options. Sympa will open a new Database connection to execute your statement.



Please refer to section [[conf-parameters/part3#database_related|Database related]] for a detailed explanation of each parameter.



Here, all database parameters have to be grouped in one ''sql_named_filter_query'' paragraph.



  * ''db_type'' \\ Format: ''db_type mysql|SQLite|Pg|Oracle|Sybase''; Database management system used. Mandatory and case sensitive.

  * ''db_host'' \\ Database host name. Mandatory.

  * ''db_name'' \\ Name of database to query. Mandatory.

  * ''statement'' \\ Mandatory. The SQL statement to execute to verify authorization. This statement must returns 0 to refuse the action, or anything else to grant privileges. The ''SELECT COUNT(*)...'' statement is the perfect query for this parameter. The keyword in the SQL query will be replaced by the sender's email.

  * Optional parameters \\  Please refer to main ''sympa.conf'' section for description.

    * ''db_user''

    * ''db_password''

    * ''db_options''

    * ''db_env''

    * ''db_port''

    * ''db_timeout''



''example.sql'': we want to select the teachers of mathematics in the University of Rennes 1 in France:

<code>

         sql_named_filter_query

         db_type         mysql

         db_name         people

         db_host         dbserver.rennes1.fr

         db_user         sympa

         db_passwd       pw_sympa_mysqluser

         statement       SELECT count(*) as c FROM users WHERE mail=[sender] AND EmployeeType='PROFESSOR' AND department='mathematics'

</code>



=====  Search condition =====



The search condition is used in authorization scenarios.



The syntax of this rule is:

<code>

  	search(example.ldap)      smtp,smime,md5    -> do_it

  	search(blacklist.txt)     smtp,smime,md5    -> do_it

</code>



The variable used by ''search'' is the name of the LDAP configuration file or a txt matching enumeration.



Note that Sympa processes maintain a cache of processed search conditions to limit access to the LDAP directory or SQL server; each entry has a lifetime of one hour in the cache.



When using the '.txt' file extension, each line is used to try to match the sender email address. You can use the "*" character as a joker to replace any string.



Here is an example of such a file:



<code>

david.verdin@renater.fr

*salaun*

</code>



With such a file, the rule would be true for the following email addresses:



  * david.verdin@renater.fr

  * salaun@renater.fr

  * O.salaun@renater.fr



It would be false for the following email addresses :



  * verdin@renater.fr

  * olivier.sala@renater.fr



This feature is used by the blacklist implicit scenario rule (see [[:manual:conf-parameters:part2#use_blacklist|Blacklist]]).



The method of authentication does not change.



======  Scenario inclusion ======



Scenarios can also contain includes:

<code>

        include commonreject

        match([sender], /cru\.fr$/)          smtp,smime -> do_it

  	true()                               smtp,smime -> owner

</code>



In this case, Sympa applies recursively the scenario named ''include.commonreject'' before introducing the other rules. This possibility was introduced in order to facilitate the administration of common rules.



======  Scenario implicit inclusion ======



You can define a set of common scenario rules, used by all lists. ''include.<action>.header'' is automatically added to evaluated scenarios. Note that you will need to restart Sympa processes to force reloading of list config files.



======  Blacklist implicit rule ======



For each service listed in parameter ''use_blacklist'' (see [[.conf-parameters:part2#use_blacklist|use_blacklist]]), the following implicit scenario rule is added at the beginning of the scenario:

<code>

  search(blacklist.txt)  smtp,md5,pgp,smime -> reject,quiet

</code>



The goal is to block messages or other service requests from unwanted users. The blacklist can be defined for the robot or for the list. At the list level, the blacklist is to be managed by list owner or list editor via the web interface.



======  Custom Perl package conditions ======



You can use a Perl package of your own to evaluate a custom condition. It can be useful if you have very complex tasks to carry out to evaluate your condition (web services queries...). In this case, you should write a Perl module, place it in the ''CustomCondition'' namespace, with one verify fonction that has to return ''1'' to grant access, ''undef'' to warn of an error, or anything else to refuse the authorization.



This Perl module:



  * must be placed in a subdirectoy ''custom_conditions'' of the ''etc'' directory of your Sympa installation, or of a robot;

  * its filename must be lowercase;

  * must be placed in the ''CustomCondition'' namespace;

  * must contain one ''verify'' static fonction;

  * will receive all condition arguments as parameters.



For example, lets write the smallest custom condition that always returns ''1''.



/home/sympa/etc/custom_conditions/yes.pm :



<code perl>    

        #!/usr/bin/perl

        package CustomCondition::yes;

        use strict;

        use Log; # optional : we log parameters

        sub verify {

          my @args = @_;

          foreach my $arg (@args) {

            do_log ('debug3', 'arg: ', $arg);

          }

          # I always say 'yes'

          return 1;

        }

        ## Packages must return true.

        1;

</code>



We can use this custom condition that way:



<code>

  CustomCondition::yes(,,)      smtp,smime,md5    -> do_it

  true()                               smtp,smime -> reject

</code>



Note that the '',,'' are optional, but it is the way you can pass information to your package. Our ''yes.pm'' will print the values in the logs.



Remember that the package name has to be lowercase, but the ''CustomCondition'' namespace is case sensitive. If your package returns ''undef'', the sender will receive an 'internal error' mail. If it returns anything else but ''1'', the sender will receive a 'forbidden' error.



===== How to use message related variables within scenario rule conditions. =====



this tuto was //also// submitted by Thomas Berry, JPL, NASA. Thanks to him!



Scenario condition, message vars include:

  [msg_body]

  [msg_part->body]





When creating scenario rules that evaluate message content, two rules must be created when passing the contents of a message to a condition: one rule for plain text messages (msg_body) and a second rule for multi-part MIME messages (msg_part).



For example, I wrote a CustomCondition module that parses the URLs in a message and compares them with a list of approved URLs:



(send.url_eval)

<code>

title.us Moderated with URL verification

CustomCondition::urlreview([listname],[sender],[msg_body]) smtp,smime,md5 -> reject()

CustomCondition::urlreview([listname],[sender],[msg_part->body]) smtp,smime,md5 -> reject()

true() smtp,smime,md5 -> editorkey

</code>



The CustomCondition module returns undef if the message contents are not provided by the rule.  If the message contents are multi-part MIME, then the [msg_body] passed by the first rule is undefined, and the CustomCondition module returns undef causing the scenario to move on to the next rule which passes the parts of the multi-part MIME message to the module.





As for the CustomCondition module, it was written to evaluate both plain text (SCALAR) and multi-part MIME (ARRAY reference) being passed to the condition:



(urlreview.pm)

<code perl>

package CustomCondition::urlreview;

...

sub verify {

   my $listname = shift or return;

   my $sender   = shift or return;

   my $body;

   foreach my $part (@_) {

      $body .= ref $part eq "ARRAY" ? join " ", @{$part} : $part;

   }

   return unless defined $body;

...

}

...

1;

</code>



<note important>this will work in included scenario if the include contains two rules: one with msg_body and with msg_part->body. </note>



======  Hiding scenario files ======



Because Sympa is distributed with many default scenario files, you may want to hide some of them to list owners (to make list administration menus shorter and readable). To hide a scenario file, you should create an empty file with the '':ignore'' suffix. Depending on where this file has been created, it will make it be ignored at either a global, robot or list level.



Example: <code>/home/sympa/etc/my.domain.org/scenari/send.intranetorprivate:ignore</code>



The ''intranetorprivate'' ''send'' scenario will be hidden (on the web admin interface), at the my.domain.org robot level only.
====== Virtual host ======



Sympa is designed to manage multiple distinct mailing list servers on a single host with a single Sympa installation. Sympa virtual hosts are like Apache virtual hosting. Sympa virtual host definition includes a specific email address for the robot itself and its lists and also a virtual HTTP server. Each robot provides access to a set of lists, each list is related to only one robot.



Most configuration parameters can be redefined for each robot, except for general Sympa installation parameters (binary and spool location, SMTP engine, antivirus plugin, ...).



The virtual host name as defined in Sympa documentation and configuration file refers to the Internet domain of the virtual host.



Note that Sympa allows you to manage 2 lists with the same name (local part) among different virtual domains. It used to be a limitation until Sympa 5.2.



======  How to create a virtual host ======



You do not need to install several Sympa servers. A single ''sympa.pl'' daemon and one or more fastcgi servers can serve all virtual host. Just configure the server environment in order to accept the new domain definition.



  * **The DNS** must be configured to define a new mail exchanger record (MX) to route message to your server. A new host (A record) or alias (CNAME) are mandatory to define the new web server.

  * Configure your **MTA** (sendmail, postfix, exim, ...) to accept incoming messages for the new robot domain. Add mail aliases for the robot. Examples (with sendmail):

<code>

    sympa@your.virtual.domain:      "| /home/sympa/bin/queue sympa@your.virtual.domain"

    listmaster@your.virtual.domain: "| /home/sympa/bin/queue listmaster@your.virtual.domain"

    bounce+*@your.virtual.domain:          "| /home/sympa/bin/bouncequeue sympa@your.virtual.domain"

</code>



  * Define a **virtual host in your HTTPD server**. The fastcgi servers defined in the common section of you HTTPD server can be used by each virtual host. You do not need to run dedicated fascgi server for each virtual host. Examples:

<code>

    FastCgiServer /home/sympa/bin/wwsympa.fcgi -processes 3 -idle-timeout 120

    .....

    <VirtualHost 195.215.92.16>

      ServerAdmin webmaster@your.virtual.domain

      DocumentRoot /var/www/your.virtual.domain

      ServerName your.virtual.domain

      <Location /sympa>

         SetHandler fastcgi-script

      </Location>

      ScriptAlias /sympa /home/sympa/bin/wwsympa.fcgi

      Alias /static-sympa /home/sympa/your.virtual.domain/static_content

    </VirtualHost>

</code>



  * Create a ''/home/sympa/etc/your.virtual.domain/'' directory that will contain the virtual host configuration. This directory should have the ''sympa'' user as its owner and must have read and write access for this user.

  * Create a ''/home/sympa/etc/your.virtual.domain/robot.conf'' configuration file for the virtual host. Its format is a subset of ''sympa.conf'' and is described in the next section; a sample ''robot.conf'' is provided.

  * Create a ''/home/sympa/list_data/your.virtual.domain/'' directory that will contain the virtual host mailing lists directories. This directory should have the ''sympa'' user as its owner and must have read and write access for this user.

<code>

    # su sympa -c 'mkdir /home/sympa/list_data/your.virtual.domain'

    # chmod 750 /home/sympa/list_data/your.virtual.domain

</code>







======  robot.conf ======



A robot is named by its domain, let's say ''my.domain.org'', and defined by a directory ''/home/sympa/etc/my.domain.org''. This directory must contain at least a ''robot.conf'' file. This file has the same format as ''/etc/sympa.conf'' (have a look at ''robot.conf'' in the sample dir). Only the following parameters can be redefined for a particular robot:



  * ''http_host'' \\ This hostname will be used for routing incoming HTTP requests on Sympa web interface. ''wwsympa.fcgi'' will try to match the ''SERVER_NAME'' environment variable with this parameter to determine the current Virtual Host. You can add a path at the end of this parameter if you are running multiple virtual hosts on the same host. Examples:

<code>

    	http_host  myhost.mydom

    	http_host  myhost.mydom/sympa

</code>

  * ''host'' \\ This is the equivalent of the ''host'' ''sympa.conf'' parameter. The default for this parameter is the name of the virtual host itself (i.e. the name of the subdirectory);

  * ''wwsympa_url'' \\  The base URL of //WWSympa//;

  * ''soap_url'' \\ The base URL of Sympa's SOAP server (if it is running; see [[soap|soap]]);

  * ''cookie_domain'';

  * ''email'' \\ This not an email but just the local part of the Sympa email adress robot responder.

  * ''title'';

  * ''default_home'';

  * ''create_list'';

  * ''lang'';

  * ''supported_lang'';

  * ''log_smtp'';

  * ''listmaster'';

  * ''max_size'';

  * ''css_path'';

  * ''css_url'';

  * ''static_content_path'';

  * ''static_content_url'';

  * ''pictures_feature'';

  * ''pictures_max_size'';

  * ''logo_html_definition'';

  * ''color_0'', color_1 ... color_15;

  * deprecated color definition: ''dark_color'', ''light_color'', ''text_color'', ''bg_color'', ''error_color'', ''selected_color'', ''shaded_color''.



These settings overwrite the equivalent global parameter defined in ''/etc/sympa.conf'' for the ''my.domain.org'' robot; the main ''listmaster'' still has privileges on Virtual Robots though. The ''http_host'' parameter is compared by //WWSympa// with the ''SERVER_NAME'' environment variable to recognize which robot is in use.







=====  Virtual host customization =====



**Warning:** Full virtual host support in Sympa is the result of a long evolution within our source code. Consequently, in some places, this support can still retain some flaws that we urge you to report in our tracking system so they are quickly evened.





==== Adding a logo ====



You can quickly introduce a logo in the upper left corner of all pages by configuring the ''[[:manual:conf-parameters:part1#logo_html_definition|logo_html_definition]]'' parameter in the ''robot.conf'' file.







==== Static content parameters ====



**Foreword:** A lot of refinement is possible in the management of static content. Due to historical evolution of the Sympa organization, several parameter are likely to be used to configure it. However, you don't have to use any of these parameters, as reasonable default values exist for each of them. Consequently, **all you need to do to use static content is define the following alias in your Apache configuration:**



<code>

Alias /static-sympa {path to your sympa installation directory}/static-content

</code>



And make sure none of these parameters is set, neither in ''sympa.conf'' nor in ''robot.conf'': ''[[:manual:conf-parameters:part1#static_content_url|static_content_url]]'', ''[[:manual:conf-parameters:part1#static_content_path|static_content_path]]'', ''[[:manual:conf-parameters:part1#css_url|css_url]]'', ''[[:manual:conf-parameters:part1#css_path|css_path]]'', ''[[:manual:conf-parameters:part1#pictures_url|pictures_url]]'', ''[[:manual:conf-parameters:part1#pictures_path|pictures_path]]''.



Et voilà!



However, if you want to customize your configuration, you can read the following sections.



----



Some features can be stored as static content for Sympa. For now, only CSS and pictures are managed this way. The way these static contents are stored and accessed through the web interface is managed by several parameters.



  * ''[[:manual:conf-parameters:part1#static_content_url|static_content_url]]'', ''[[:manual:conf-parameters:part1#css_url|css_url]]'', ''[[:manual:conf-parameters:part1#pictures_url|pictures_url]]'' define URL to access resources through the web.



  * ''[[:manual:conf-parameters:part1#static_content_path|static_content_path]]'', ''[[:manual:conf-parameters:part1#css_path|css_path]]'', ''[[:manual:conf-parameters:part1#pictures_path|pictures_path]]'' define paths where these resources will be accessed through the file system or stored when generated by Sympa.



If you want the URL to lead to the ressources Sympa generates, you must create aliases in your Apache configuration establishing a correspondence between the ''*_url'' parameters and their ''*_path'' counterpart.



The ''static_content_*'' parameters are used to build default values for the corresponding ''css_*'' and ''pictures_*'' parameters when those are not defined in the configuration. For example, if ''css_path'' isn't defined, its value is set to ''static_content_path/css''.



As all those parameters can be defined in ''sympa.conf'' and ''robot.conf'', it can be confusing which value your parameters will finally be set to. Generally speaking, values set in ''robot.conf'' always have precedence over those set in ''sympa.conf''.



The following tables show the values taken by the static content parameters regarding which values are set in the different configuration files available. We assume the name of the virtual host is ''vhost.com''.



In these tables, columns headers show the values set in ''robot.conf'' while rows headers show the values set in ''sympa.conf''. You can then read in the cell the value actually used for the parameter.



=== css_url ===



^sympa.conf\robot.conf^nothing^static_content_url = "a"^css_url = "a"^

^nothing|"static-sympa/css/vhost.com"|"a/css/vhost.com"|"a"|

^static_content_url = "b"|"b/css/vhost.com"|"a/css/vhost.com"|"a"|

^css_url = "b"|"b"|"a/css/vhost.com"|"a"|



=== css_path ===



^sympa.conf\robot.conf^nothing^static_content_path = "a"^css_path = "a"^

^nothing|"{sympa install directory}/static-content/css/vhost.com"|"a/css/vhost.com"|"a"|

^static_content_path = "b"|"b/css/vhost.com"|"a/css/vhost.com"|"a"|

^css_path = "b"|"b"|"a/css/vhost.com"|"a"|



=== pictures_url ===



^sympa.conf\robot.conf^nothing^static_content_url = "a"^pictures_url = "a"^

^nothing|"static-sympa/pictures/"|"a/pictures/"|"a"|

^static_content_url = "b"|"b/pictures/"|"a/pictures/"|"a"|

^pictures_url = "b"|"b"|"a/pictures/"|"a"|



Note that if you don't set ''pictures_url'' in ''robot.conf'', static pictures URL will //not// be virtual host-specific by default.



=== pictures_path ===



^sympa.conf\robot.conf^nothing^static_content_path = "a"^pictures_path = "a"^

^nothing|"{sympa install directory}/static-content/pictures/"|"a/pictures/"|"a"|

^static_content_path = "b"|"b/pictures/"|"a/pictures/"|"a"|

^pictures_path = "b"|"b"|"a/pictures/"|"a"|



Note that if you don't set ''pictures_path'' in ''robot.conf'', static pictures folder will //not// be virtual host-specific by default.





==== CSS customization ====



In order to customize the web look and feel, you may edit the CSS definition. CSS are defined in a template named ''css.tt2''.



Any virtual host can use static CSS file for making Sympa web interface faster. You can later edit this static definition and change web style. If you want to use static CSS, you can either set the path to these files using the ''[[:manual:conf-parameters:part1#css_path|css_path]]'' and ''[[:manual:conf-parameters:part1#css_url|css_url]]'' parameters or just follow the Sympa defaults.



=== Using css_path and css_url parameters ===



  * if you define ''[[:manual:conf-parameters:part1#css_path|css_path]]'' in robot.conf, the static CSS files will be created in the corresponding folder.

  * if you define ''[[:manual:conf-parameters:part1#css_url|css_url]]'' in robot.conf, the style sheets used will be those found by following this URL. //Note that this implies to use the style sheets located in the folder whose path is contained by ''[[:manual:conf-parameters:part1#css_path|css_path]]'' **only if** you set the relevant alias in you Apache configuration.//

  * if you define one of these parameters in the ''sympa.conf'' file, this value will be used as default for each virtual host for which it is not set in ''robot.conf''.



=== Using defaults ===



See [[:manual:virtual-hosts#static_content_parameters|the static content section]] to learn how defaults are handled for static CSS parameters.



==== Customizing templates and authorization scenario ====



In addition, if needed, you can customize each virtual host using its set of templates and authorization scenarios.



The ''/home/sympa/etc/my.domain.org/web_tt2/'', ''/home/sympa/etc/my.domain.org/mail_tt2/'' and ''/home/sympa/etc/my.domain.org/scenari/'' directories are searched when loading templates or scenarios before searching into ''/home/sympa/etc'' and ''/home/sympa/bin/etc''. This allows to define different privileges and a different GUI for a Virtual Host.



======  Managing multiple virtual hosts ======



If you are managing more than 2 virtual hosts, then you might consider moving all the mailing lists in the default robot to a dedicated virtual host located in the ''/home/sympa/list_data/my.domain.org/'' directory. The main benefit of this organisation is the ability to define default configuration elements (templates or authorization scenarios) for this robot without inheriting them within other virtual hosts.



To create such a virtual host, you need to create the ''/home/sympa/list_data/my.domain.org/'' and ''/home/sympa/etc/my.domain.org/'' directories; customize the ''host'', ''http_host'' and ''wwsympa_url'' parameters in the ''/home/sympa/etc/my.domain.org/robot.conf'', with the same values as the default robot (as defined in ''sympa.conf'' and ''wwsympa.conf'' files).
====== Interaction between Sympa and other applications ======



======  Soap ======



See [[soap|Sympa SOAP server]].



======  RSS channel ======



See [[rss|Sympa's RSS channel]].



====== Sharing WWSympa's authentication with other applications ======



See [[authentication#sharing_wwsympa_s_authentication_with_other_applications|Sharing WWSympa's authentication with other applications]].



======  Sharing data with other applications ======



You may extract subscribers, owners and editors for a list from any of:



  * a text file;

  * a relational database;

  * a LDAP directory.



See the [[parameters-data-sources#user_data_source|user_data_source]] list parameter.



The three tables can have more fields than the one used by Sympa, by defining these additional fields, they will be available from within Sympa's authorization scenarios and templates (see [[conf-parameters#db_additional_subscriber_fields|db_additional_subscriber_fields]] and [[conf-parameters:part3#db_additional_user_fields|db_additional_user_fields]]).



See [[list-definition#data_inclusion_file|Data inclusion file]].



====== Subscriber count ======



The number of subscribers of a list can be obtained from an external application by requesting function ''subscriber_count'' on the Web interface.



Example: <code>http://my.server/wws/subscriber_count/mylist</code>

====== Message workflow ======



====== Does Sympa alter messages? ======



Sympa receives incoming messages in its ''msg'' spool. An image of the message is then created (a MIME::Entity, using MIME-Tools CPAN library) for later processing. At the end, the MIME::Entity object is dumped to the mail tranfer agent (sendmail, postfix,...). Note that the message might be altered by this intermediate MIME::Entity object (row size for Base64 encoded MIME parts for example). The use of the MIME::Entity intermediate object is skipped is a message is S/MIME signed because any changes in any part of the message body would break the S/MIME signature. 



Note also that Sympa might perform the following changes to the distributed messages; however some of this alterations of the messages can be configured.

  * SMTP header fields are added/removed for loop prevention (see [[customizing#loop_detection]]), for RFC 2369 compliance (see [[conf-parameters/part2#rfc2369_header_fields]]) or through customizations (see [[conf-parameters/part2#remove_headers]]).

  * The subject of the message might be changed to add a custom subject (see [[parameters-sending#custom_subject]]).

  * Headers and footers may be added. They are either added as separate MIME parts or within the message body, if it is of text type (see [[list-definition#message_header_and_footer]])

  * Message content-type may be changed from multipart/alternative to text/plain or text/html if the user has selected the corresponding reception mode (see [[reception-mode#multipartalternative]]).



====== Attachments ======



Sympa distribution process copes well with MIME messages, including those including attachments. However there are situations special processing for messages with attachments:

  * [[/manual/parameters-others#max_size|max_size]] : this parameter controls the maximum allowed size for a distributed message,

  * urlize : list members can select this reception mode to have attachments removed from the message and stored on the list server. Urlizization depends on the message size and the [[/manual/conf-parameters/part2#urlize_min_size|urlize_min_size]] parameter.



====== Loop prevention ======



====== Customizing messages ======



Sympa allows to send customized messages to mailing lists ; each subscriber will receive a customized version of the initial message. The initial message is processed as a template with embedded variables and is parsed, for each subscriber, with the attributes Sympa has associated to her. Note that you can freely create any subscriber attribute, see the [[:manual:customizing#custom_user_attributes|custom attributes]] feature. \\



The personalization of a message consists to replace variables by the attributes of the user. It uses the [[http://template-toolkit.org/|TT2]] tags in order to distinguish them from text: [%].\\

The personalization process occurs as follows:



  - Sympa get the message containing the TT2 variables,

  - it retrieves the user data in the database,

  - it replaces the variables by the found data.



Here is the syntax for writing a variable: [0ser.custom_attribute.**ID**.value %]\\

**ID** is the [[:manual:parameters-others#custom_attribute|custom attribute id sub-parameter]]\\



Here are the steps to send a customized message to a list :



  - this feature is enabled / disabled using a list parameter: ''[[:manual:parameters-others#merge_feature|merge_feature]]''. If set to ''on'', messages will be merged.\\ {{ :manual:screenshot1.2.png |}}

  - if you choose defined custom users attributes, they can be used to personalize messages.

  - users fill their personal user attributes for the list themselves. (name, surname, civility, ...)\\ {{ :manual:screenshot3.2.png |}}

  - the message can be composed either from Sympa web interface or using your favourite mail client. Simply insert the variables in this message in the form of a TT2 tags. (ex: [0ser.custom_attribute.civility.value %] to refer to the subscriber's civility).

  - Here is a diagram to better understand the process of customization\\ {{ :manual:screenshot6.2.jpg |}}



Note :\\

This feature is likely to have an influence on the message dissemination performances. Indeed, to send personalized messages to each user, Sympa opens an SMTP session for each recipient. Previously, it tried to open a session for several recipients if they belonged to the same domain.



Below are some examples of TT2 parameters usable in messages.



    * **[ 0stname %]**: the listname; always available.

    * **[% robot %]**: the name of the host the list is intalled on; always available.

    * **[0ser.email %]**: the user email; always available.

    * **[0ser.gecos %]**: the user name associated to her email; always available.

    * **[0ser.friendly_date %]**: the - human readable - user's subscription date; always available.

    * **[0ser.custom_attribute.title.value %]**: can be anything you like; available if you defined a user custom attribute named "title" (see the list configuration, section "Miscellaneous").

    * **[0ser.custom_attribute.name.value %]**: can be anything you like; available if you defined a user custom attribute named "name".

    * **[0ser.custom_attribute.organization.value %]**: can be anything you like; available if you defined a user custom attribute named "organization".



===== Unsubscription URL =====



Based on the merge message, a special feature allows to add unsubscription URLs to list messages.



To do so, you must:



  - set the ''[[:manual:parameters-others#merge_feature|merge_feature]]'' parameter to ''on''.

  - edit your [[:manual:list-definition#message_header_and_footer|message footer]]. You can do it through the web interface by clicking, in the list menu, on ''Admin -> Cutomizing -> Message footer'', as on the snapshot below.\\ {{ :manual:footer-edition.png |}}

  - in this file, write this line: <code>To unsubscribe from this list, clink here: [% wwsympa_url %]/auto_signoff/[ 0stname %]/[0ser.escaped_email %]</code>

  - Save. Done.



When a user receive a list message after this operation, it will contain an URL at the bottom. Clicking this URL will redirect her to the Sympa web interface where she will be warned that a message was sent to her. In this second message, she will have an authenticating URL which will trigger her unsubscription when clicked.



Note: It is essential that the list messages don't contain a link that actually unsubscribe users, because list messages are forwarded, replied to, and therefore the unsubscription URL would be forwarded to potentially a lot of people. Consequently, we put only an URL which will trigger an unsubscription confirmation. This way, if somebody else clicks on this URL with your mail address in it, you will just receive a message (containing this person's email IP) requesting confirmation. This usage is probably better for news letters.

[[http://example.com|External Link]]

====== Managing list members and list owners ======



The standard way to define list members is to make them subscribe to the list (or be added by the list owner). However, you may have users groups already defined in your LDAP directory or in a relational database. Therefore Sympa allows you to automatically map list membership to such data sources. The term **include** is used to designate these dynamic mailing list membership managements.



===== Standard definition of list members and owners=====



We'll first describe the standard way for Sympa to handle list members and owners definition.



==== Subscribed members ====



List members are often named //subscribers// because the default way to become member of a list is to subscribe to it. The subscription action can be performed via any of the three Sympa user interface : mail, web or SOAP. The mail command for subscribing is //SUBSCRIBE,// see [[ :manual:sympa-commands#user_commands]]. Subscription feature is available from the list homepage on the web interface, but it requires prior user authentication.



The configuration of a list may restrict the right to subscribe to this list (closed, moderated, restricted to certain user categories,...) ; this is configured via [[:manual:parameters-privileges#subscribe|the subscribe list parameter]]. [[:manual:parameters-privileges#unsubscribe|A similar list configuration parameter]] defines if list members can unsubscribe from the list. If the subscription process is moderated, then list owners will receive mail notifications for each subscription request; they can then validate the request via either web or mail interfaces of Sympa. 



List owners can also add list members, though this feature should be used with care since users can easily confuse this with spam. It is easier for a subscriber to unsubscribe if (s)he did subscribe himself. List owners can use the [[[ :manual:sympa-commands#owner_commands|ADD]]| mail command]] or the web interface to add new list members. The default right to add and remove list members is provided to list owners, but this behavior can be customized through the [[:manual:parameters-privileges#add|add]] and [[:manual:parameters-privileges#del|del]] list configuration parameters.



Sympa stores the list membership data in its database, in the [[:manual:database#database_structure|subscriber_table table]]. Along with the list name and member email addresses, Sympa stores the following informations: user name, date of subscription, date of latest update, visibility option, reception option, selected topics, bouncing informations.



==== Declaring list owners or moderators ====



A list owner is assigned to a list at the list creation time ; it corresponds to the user who requests the list creation. Additional list owners can later be addded by existing list owners or by the listmaster; this is achieved through the list admin web interface. List owners are defined by the [[:manual:parameters-definition#owner|owner list configuration parameter]]. 



List moderators are managed the same way, defined by the [[:manual:parameters-definition#editor|editor list configuration parameter]]. Note that if no list moderator is defined, then the list owners are taken as defaults for them.



Sympa defines two profiles for list owners: normal and privileged. Privileged owners have extended privileges, including the right to edit some list configuration parameters; this can be customized through the [[:manual:list-creation#list_editing|edit_list.conf configuration file]].



List owners and moderators are defined in the list configuration file, however, for performances reasons, list owners are also listed in the [[:manual:database#database_structure|admin_table DB table]]. This cache is updated by Sympa processes whenever the list configuration has changed on disk.



===== Dynamic mailing lists =====



Sympa provides a way to have list membership based on third-party data sources. These data sources can be any of the following :

  * another mailing list (local or remote)

  * a flat file (local or remote)

  * an SQL query

  * an LDAP directory filter



Once the data sources defined, the Sympa server will cope with the data updates.



==== Defining the data sources for members ====



The supported data sources should all return a set of email addresses, because that's the information Sympa needs to define a list member. You  can define as many data sources as required, including data sources of the same type.



Data sources are defined through [[:manual:parameters-data-sources|list-xx configuration parameters]]; they can be edited through the list admin web interface of Sympa. Note that the [[:manual:parameters-data-sources#user_data_source|user_data_source list configuration parameter]] is no more used (hard-coded include2 value) ; it has been introduced to support different members data management modes. 



==== Defining the data sources for list owners and moderators ====



List owners can be defined using external data sources the same way members are. The main difference is related to the configuration parameters : data sources are not directly defined in the list configuration file, they come from a separate ''.inc'' file located in the [[:manual:list-definition#data_inclusion_file|data_sources/ directory]]. The [[:manual:parameters-definition#owner_include|owner_include list configuration parameter]] then refers to this data source file. This different configuration approach has been adopted to lessen the number of list configuration parameters. 



List moderators are defined the same way with the [[:manual:parameters-definition#editor_include|editor_include configuration parameter]].



==== Cache management ====



Sympa maintains a cache of included list members in the subscriber_table DB table. The update of the cache is mainly performed by the task_manager.pl process (via the sync_include task) ; the frequency of the updates is defined by the [[:manual:parameters-data-sources#ttl|ttl list configuration parameter]]. However, an update can be performed by other processes under the following circumstances:

  * wwsympa.fcgi, using the "Synchronize members with data source" button, from the members review page;

  * wwsympa.fcgi, after a data-source related list configuration parameter has been edited;

  * sympa.pl in command line, using the <nowiki>--sync_include</nowiki> option;

  * sympa.pl, before sending a message for a list (depends on the [[:manual:parameters-data-sources#distribution_ttl|distribution_ttl parameter]]);

  * sympa.pl or wwsympa.fcgi or sympa_soap_server.fcgi, while performing a members review (depends on the [[:manual:parameters-data-sources#distribution_ttl|distribution_ttl parameter]]).



If one or more data source is unreachable, the latest data will stay in the cache.



Sympa stores 3 kinds of include-related informations in the list members DB row :

  * subscribed_subscriber : set to 1 if the member did subscribe (or was added by the list owner) to the list

  * included_subscriber : set to 1 if the member was included from an external data source(s)

  * include_sources_subscriber : a comma-separated list of external source identiers. These identifiers are computed by Sympa processes.





====== Customizing Sympa/WWSympa ======







====== Template file format ======



Template files within Sympa used to be in a proprietary format that has been replaced with the [[http://www.tt2.org|TT2]] template format.



You will find detailed documentation about the TT2 syntax on the web site: **[[http://www.tt2.org]]**



If you are an emacs user, you can use the [[http://dave.org.uk/emacs/|TT2 highlighting mode]] by Dave Cross.  Vim users should check out the [[https://github.com/petdance/vim-perl|vim-perl distribution]] which includes TT2 syntax files.



Here are some aspects regarding templates that are specific to Sympa:



{{page>customizingbisbis}}



===== Custom actions =====



Starting Sympa 6.1, you can create your own actions, i.e. you can display any [[http://template-toolkit.org/docs/manual/index.html|TT2 template]] in the Sympa web interface. These templates will be processed and completely integrated to Sympa, using its CSS and the data from the server.



Here are the steps to use custom actions :



  - create a template bearing your custom action name (test.tt2 for example) and pu it in the relevant directory (either etc/web_tt2, etc/hostname/web_tt2, list_data/web__t2 or list_data/hostname/web_tt2) ;

  - Call this action by using an URL of on the following forms:

    * for a non-list related custom action: <nowiki>http://</nowiki>your_sympa_server_root_url/ **ca** /<action_name>/param1/param2/param3/...

    * for a list-related custom action: <nowiki>http://</nowiki>your_sympa_server_root_url/ **lca/<listname>** /<action_name>/param1/param2/param3/...



The number of parameters is not limited. The parameters are accessed in templates using the ''cap'' template variable. This variable is a simple array in which the custom action parameters appear in the same order as in the URL.



Here is an example of such a custom action. this action only displays the parameters given in the URL.



I create a file called **test.tt2** and put it in the ''etc/web_tt2'' directory. Here is its content:\\

<code html>

<h2>A test action</h2>

[% IF list %]

<p>liste: [ 0st %]</p>

[ 0.000000E+00ND %]

<p>Custom action name: [ ustom_action %]</p>

<p>parameters:

<ol>

[ 0.000000OREACH param=cap %]

<li><b>[193c3b08aram %]</b></li>

[ 0.000000E+00ND%]

</ol>

</p>

</code>



Here is the result:\\

{{:manual_6.1:custom_action.png|}}





====== Mail template files ======



These files are used by Sympa as service messages for several commands. These files are interpreted (parsed) by Sympa and respect the TT2 template format; every file has a **.tt2** extension. See [[customizing#template_file_format|Template file format]].



Sympa looks for these files in the following order (where ''<list>'' is the listname if defined, ''<action>'' is the name of the command, and ''<lang>'' is the preferred language of the user):



  - ''/home/sympa/list_data/<list>/mail_tt2/<lang>/<action>.tt2''.

  - ''/home/sympa/list_data/<list>/mail_tt2/<action>.tt2''.

  - ''/home/sympa/etc/my.domain.org/mail_tt2/<lang>/<action>.tt2''.

  - ''/home/sympa/etc/my.domain.org/mail_tt2/<action>.tt2''.

  - ''/home/sympa/etc/mail_tt2/<lang>/<action>.tt2''.

  - ''/home/sympa/etc/mail_tt2/<action>.tt2''.

  - ''/home/sympa/bin/etc/mail_tt2/<lang>/<action>.tt2''.

  - ''/home/sympa/bin/etc/mail_tt2/<action>.tt2''.



If the file starts with a From: line, it is considered as a full message and will be sent (after parsing) without adding SMTP headers. Otherwise, the file is treated as a text/plain message body.



The variables listed below may be used in these template files. Note however that all list-related variables are available in a list context only.



  * [ender %]: e-mail address of the sender;

  * [% return_path %]: Return-Path SMTP header of the message;

  * [ 0.000000romlist %]: From SMTP header of the message;

  * [% replyto %]: Reply-To SMTP header of the message ;

  * [0oundary %]: MIME parts separator calculated for service messages;

  * [% robot_domain %]: domain of a virtual host as defined in the ''host'' parameter;

  * [ 0st.lang %]: default language of the list;

  * [ 0st.name %]: the list name;

  * [ 0st.domain %]: the domain the list is hosted by;

  * [ 0st.host %]: the domain the list is hosted by;

  * [ 0st.subject %]: the subject of the list;

  * [ 0st.owner %]: an array containing the list owners address;

  * [ 0st.dir %]: The absolute path to the list's configuration directory;

  * [ onf.email %]: sympa email address local part;

  * [ onf.host %]: sympa default host domain name;

  * [ onf.sympa %]: sympa's complete email address;

  * [ onf.request %]: return address for bounces (sympa-request);

  * [ onf.listmaster %]: listmaster's email addresses;

  * [ onf.wwsympa_url %]: //WWSympa//'s root URL;

  * [ onf.title %]: Host web page title;

  * [ onf.listmaster_email %]: listmaster'e-mail address local part;

  * [ onf.version %]: //for global messages only!// Sympa version number;

  * [0ser.email %]: user email address;

  * [0ser.lang %]: user language;

  * [0ser.gecos %]: user gecos field (usually his/her name);

  * [0ser.password %]: user password;

  * [ubscriber.date %]: date when the user subscribed to this list;

  * [ubscriber.update_date %]: date when the user last updated her/his profile;

  * [ubscriber.bounce %]: subscriber's bounce rate;

  * [ubscriber.first_bounce %]: date when this subscriber had her/his first bounce.



Below is a short list of the mail templates distributed by Sympa ; you should have a look at the ''/home/sympa/bin/etc/mail_tt2/'' directory content to have a better view of the customizeable mail templates. Note also that some list-related mail templates are described in the [[:manual:list-definition#list_template_files|Mailing list definition/List template files section]].



=====  helpfile.tt2 =====



This file is sent in response to a ''HELP'' command. You may use additional variables:



  * [ 0s_owner %]: ''TRUE'' if the user is list owner;



  * [ 0s_editor %]: ''TRUE'' if the user is list editor.





=====  lists.tt2 =====



File returned by the ''LISTS'' command. An additional variable is available:



  * [ 0sts %]: this is a hash table indexed by list names and containing lists' subjects. Only lists visible to the user (according to the ''visibility'' list parameter) are listed.



Example:

<code>

  These are the public lists for [conf->email]@[conf->domain]



  [ 0.000000OREACH l = lists %]

  [% l.key %]@[% l.value.host %] : [% l.value.subject %] ([% l.value.topics.0 %])



  [ 0.000000E+00ND %]

</code>



=====  global_remind.tt2 =====



This file is sent in response to a ''REMIND *'' command. (see [[sympa-commands#owner_commands|Owner commands]]) You may use additional variables:



-[ 0sts %]: this is an array containing the names of the lists the user is subscribed to.



Example:

<code>

  This is a subscription reminder.



  You are subscribed to the following lists:

  [ 0.000000OREACH l = lists %]



   [% l %]: [ onf.wwsympa\_url \%]/info/[% l %]



  [ 0.000000E+00ND %]



  Your subscriber e-mail: [0ser.email %]

  Your password: [0ser.password %]

</code>





=====  your_infected_msg.tt2 =====



This message is sent to warn the sender of a virus infected mail, indicating the name of the virus found (see [[antivirus#antivirus|Antivirus]]).



=====  message_report.tt2 =====



This template includes most error messages related to message distribution.



Additional TT2 variables can be used within this template :

  * ''[0riginal_msg.full %]'': the full original message  

  * ''[0riginal_msg.body %]'': the body of the original message

  * ''[0riginal_msg.from %]'': the From header field of the original message

  * ''[0riginal_msg.subject %]'': the Subject header field of the original message

  * ''[0riginal_msg.message_id %]'': the Message-id header field of the original message





====== Web template files ======



You may define your own web template files, different from the standard ones. //WWSympa// first looks for list specific web templates, then for site web templates, before falling back on its defaults.



Your list web template files should be placed in the ''/home/sympa/list_data/mylist/web_tt2'' directory, and your site web templates in the ''~/home/sympa/etc/web_tt2'' directory.



The easiest way to find out which variable are made available by Sympa is to switch the ''Set template vars dump'' feature on from the ''Sympa admin'' web page (you need to log in with listmaster privileges). You can check the list of available variables in each web page.



===== Sympa colors customization guide =====



Sympa colors are managed using [[conf-parameters/part1#color_0_color_1_..._color_15|color_x parameters in Sympa.conf]].



You will find below how these parameters are interpreted in the Sympa web interface. Note that if you activated the [[conf-parameters/part1#css_path|static CSS]], you will need to hit the "install static css" button once again to see the changes in your color definitions.

<note idea>

Sympa version 6 include a color editor in the "Sympa admin" systeme (see skins and css section) 

</note>

**

Install time:** web colors are defined in Sympa's main Makefile (see [[installing-sympa#compilation_and_installation|Compilation and installation]]).



==== What are the colors used for? ====



  * ''color_0'': background color of:

    * one out of two lines in tables, alternated with ''color_5''. It is intended to be the darkest shade, as ''color_5'' has other uses.

  * ''color_1'': background color of:

    * main navigation tabs

    * most of the buttons (those corresponding to the MainMenuLinks CSS class)

  * ''color_2'': font and border color of:

    * almost everything. Exceptions for borders are <TD/> borders; exceptions for fonts are links, buttons and some titles.

  * ''color_3'': background color of:

    * top box

    * footer box

  * ''color_4'': background color of:

    * page

    * table headers (at the very exception of the table displaying new lists)

    * the rest of the buttons (which are in fact hyperlinks, corresponding to the actionMenuLinks CSS class)

  * ''color_5'': background color of:

    * all the main interface boxes

    * the lightest color for the table lines, contrasting with color_0

  * ''color_6'': background color of:

    * active action (for example, the section of the admin options which is currently viewed, or the header corresponding to the data following which an array is currently sorted)

    * hovered actions

    * hovered buttons corresponding to the actionMenuLinks CSS class

    * hovered navigation tabs

  * ''color_7'': background color of:

    * error messages

    * just edited area in the administrative management section.

  * ''color_8'': doted underscore color of:

    * hyperlinks

  * ''color_9'': 

    * border color for active action (for example, the section of the admin options which is currently viewed, or the header corresponding to the data following which an array is currently sorted)

    * border color for hovered hyperlinks corresponding to actions

    * background color for clicked links (corresponding to the .active state in a CSS)

  * ''color_10'': inactive buttons color. Rarely used. Don't bother.

  * ''color_11'': font color for:

    * active navigation tab

    * H2 titles

    * hovered links

    * some hovered buttons action(which are in fact hyperlinks, corresponding to the actionMenuLinks CSS class)

  * ''color_12'': Font color for the class smallblack. Not sure it is used.

  * ''color_13'': Background color of:

    * editable form areas (text areas, selection lists, ...)

    * the rest of hovered buttons (those corresponding to the MainMenuLinks CSS class)

  * ''color_14'': Unused

  * ''color_15'': Unused









==== What colors do the objects have? ====



Here are gathered informations about the color parameters used for specific parts of the web interface. Take care to have a look to the preceding section as changing a parameter for an object is likely to change it for a few similar objects.



=== Main backgrounds ===



There are four different backgrounds in the web interface:



  * The page: ''color_4''; below all the rest. Just the base on which all the rest is stacked.

  * The main boxes: ''color_5''; This is where most of the text, buttons and links are displayed.

  * The top box and footer: ''color_3''; the top box is where your service name and main navigation tabs are displayed. The footer contains the version of Sympa.

  * The editable forms areas: ''color_13''; This is the color in all the form widgets which can be edited by users (text areas, selection lists).



=== Buttons ===



The buttons color management can be confusing, so let's just stress it a little:



^Color attribute ^ MainMenuLinks CSS class^actionMenuLinks CSS class^

|Default background color|''color_1''|''color_4''|

|Hovered background color|''color_13''|''color_6''|

|Default font color|''color_2''|''color_2''|

|Hovered font color|''color_1''|''color_11''|

|Default border color|''color_2''|''color_2''|

|Hovered border color|''color_2''|''color_2''|



=== Links ===



Hyperlinks have the same attributes as plain text, except:

  - They are always underscored by a doted line of color ''color_8''

  - When hovered, they take the color ''color_11''



=== Menu links ===



They have the following attributes:



^State^Font^Background^Border^

|Default|''color_2''|''None''|''None''|

|Hovered|''color_11''|''color_6''|''color_9''|

|Clicked|''color_2''|''color_9''|''color_6''|

|Active|''color_2''|''color_6''|''color_9''|



=== Miscellaneous ===



Note these additional informations:

  - navigation tabs have the same default parameters as the class MainMenuLinks but the same parameters as actionMenuLinks when hovered;

  - except for the MainMenuLinks button, //anything// likely to do something if clicked takes the font color ''color_11'' when hovered;

  - the menu links (Info, Admin, Edit list config...) are the only objects whose color actually changes on click.





=== For some basic color schemes: ===



Add this line to sympa.conf:



# Color customizations



# for bright red background, (sunglasses may be required!)



color_4 #FF3366  



or



# for bright green background



color_4 #00CC00  



To select your colors, try this link: 

[[http://aspnet.asp101.com/samples/color_chooser.aspx?color=               0.000000F3366]]



====== CSS files ======



Sympa has four CSS stylesheets : ''style.css'', ''print.css'', ''print-preview.css'' and ''fullPage.css''.



It will use a stylesheet or the other regarding the kind of request the user addressed.



But, for each stylesheet, what is sent to users varies regarding the values of two parameters : ''css_path'' and ''css_url''.









===== css_path and css_url parameters =====



  * ''[[:manual:conf-parameters:part1#css_path|css_path]]'' defines the directory in which ''wwsympa'' can find static CSS files;

  * ''[[:manual:conf-parameters:part1#css_url|css_url]]'' defines the URL used by web clients to request the web server for stylesheets.



These parameters values are looked for in ''robot.conf'' first, then ''sympa.conf'', and then, if not found, set to hard-coded defaults.



- If ''css_path'' isn't defined, its default is set to : ''${[[:manual:conf-parameters:part1#static_content_path|static_content_path]]}/css''.

''static_content_path'' is the parameter defining the root path to all static content for Sympa. If  ''static_content_path''  is undefined in ''sympa.conf'' or ''robot.conf'', its value is set to : ''sympa_home_dir/static_content''.

- If ''css_url'' isn't defined, its default is set to : ''${[[:manual:conf-parameters:part1#static_content_url|static_content_url]]}/css''.

''static_content_url'' is the parameter defining the root url to all static content in Sympa. If ''static_content_url'' is undefined in ''sympa.conf'' or ''robot.conf'', its value is set to : ''/static-sympa''.



This way :

  * the default path to static stylesheet is : ''sympa_home_dir/static_content/css/style.css''



  * the default URL to the static stylesheet is : ''[[http://host.name/static-sympa/css/style.css]]''



The ''sympa_wizard.pl'' script, run at install, can set both ''static_content_path'' and ''static_content_url'' values.



===== What stylesheet will be used ? =====



  * Case 1 : if the directory defined by ''css_path'' exists, the value of ''css_url'' will be the one defined in Sympa config.



  * Case 2 : if this directory doesn't exist, the value of ''css_url'' will be that of the ''css'' action (i.e. ''[[http://url.to.wwsympa/css/]]'').



The content delivered varies greatly according to which case happens.



----



  * **Case 1**: the stylesheet received by the client is the **file** found in the directory that your Apache server configuration associates to this URL. It is up to you to decide whether this directory must correspond to the ''css_path'' value or not. If it corresponds to the ''css_path'' value, you must use the files generated by ''wwsympa''. If not, you will use whichever stylesheet you want to define. Whatever solution you choose, take note that ''wwsympa'' will not, opposite to case 2, be involved in the stylesheet delivery, as it won't be addressed the HTTP request. This way, your stylesheet is served directly by Apache and remains in cache, thus saving bandwidth.



----



  * **Case 2**: the stylesheet received by the client is the result of a **wwsympa action** called ''css''. ''wwsympa'' parses a file named ''css.tt2'' that it finds in the relevant ''web_tt2'' folder and generates on the fly a stylesheet that it returns to the client. In this case, the action is triggered any time a page is requested to ''wwsympa'' and the four stylesheets are sent along with the page. This is more bandwidth consuming than case 1, but any change in ''css.tt2'' will be applied at once, without static content generation. This is particularly usefull when experimenting a new stylesheet.





**If you use virtual hosts**: [[:manual:virtual-hosts#static_content_parameters|this section]] describes all the possibles configuration options and their consequences on the actual paths and URL used.



===== Using wwsympa CSS generation process =====



The CSS generation described in the case 2 of the previous section has two purposes :



  - Serve CSS files generated on the fly for each request



  - Generate static CSS files stored in the directory defined by the ''css_path'' parameter. These files are subsequently used as static content. The static CSS file generation can be done in two ways :

    - using the "Install static CSS" button in the skins administration page of wwsympa. 

    - automaticaly updated at ''sympa.pl'' process startup whenever it detects that the static CSS is older than the ''css.tt2'' template file. This is very convenient while doing a Sympa upgrade because the static CSS files get automatically updated. The listmaster gets a mail notification.



The following explanations apply whichever you use static (but sympa-generated) or dynamic CSS. Both operations use the same template file and data.



  * **Colors** are defined in either ''sympa.conf'' or ''robot.conf''. The role of each color parameter is explained in the [[:manual:customizing#sympa_colors_customization_guide|color customization guide]].

For the particular case of colors, though, note that the colors used are those from the ''robot.conf'' or ''sympa.conf'', whichever is relevant. ''wwsympa'' uses those loaded in memory at the time the CSS generation is requested, being to generate a static stylesheet or to deliver a dynamic one directly. That means that if you change colors in your configuration file, these changes must be taken into account by ''wwsympa'' prior to regenerating CSS.



  * **Any other CSS information** is defined in ''css.tt2'' template. As any other template, take care not to modify the default file (in ''sympa_home/bin/etc/web_tt2'') but to copy it in ''sympa_home/etc/web_tt2'' or ''sympa_home/etc/robot_dir/web_tt2'' and modify the copies. In these copies, you can add/change/delete anything you like, it is not supposed to suffer from upgrades.



===== Use custom stylesheets only =====



Nothing prevents you from configuring your Apache server in order that requests to URL containing ''css_url'' be answered by serving the content of a directory different from the one corresponding to ''css_path''. This way, you can directly edit the ''style.css'' file, and this file won't be overwritten during the next update. The drawback is that you can't use the ''color_x'' parameters defined in your ''robot.conf''/''sympa.conf'' file. Indeed, they are used only when parsing ''css.tt2''.





====== Internationalization ======



Sympa was originally designed as a multilingual Mailing List Manager. Even in its earliest versions, Sympa separated messages from the code itself, messages being stored in NLS catalogues (according to the XPG4 standard). Later a ''lang'' list parameter was introduced. Nowadays, Sympa is able to keep track of individual users' language preferences.



If you are willing to provide Sympa into your native language, please check the **translation howto**: [[http://www.sympa.org/howtotranslate.html]].



=====  Sympa internationalization =====



Every message sent by Sympa to users, owners and editors is outside the code, in a message catalog. These catalogs are located in the ''/home/sympa/locale'' directory.



To tell Sympa to use a particular message catalog, you can should set the ''lang'' parameter in ''sympa.conf''.





=====  List internationalization =====



The ''lang'' list parameter defines the language for a list. It is currently used by //WWSympa// and to initialize users' language preferences at subscription time.



In future versions, all messages returned by Sympa concerning a list should be in the list's language.







=====  User internationalization =====



The user language preference is currently used by //WWSympa// only. There is no email-based command for a user to set his/her language. The language preference is initialized when the user subscribes to his/her first list. //WWSympa// allows the user to change it.





====== Topics ======



//WWSympa//'s homepage shows a list of topics for classifying mailing lists. This is dynamically generated using the different lists' ''topics'' configuration parameters. A list may appear in multiple categories. \\

This parameter is different from the ''msg_topic'' parameter used to tag list messages.



The list of topics is defined in the ''topics.conf'' configuration file, located in the ''/home/sympa/etc'' directory. The format of this file is as follows:



<code>

  <topic1_name>

  title	<topic1 title>

  title.fr <topic french title>

  visibility <topic1 visibility>

  ....

  <topicn_name/subtopic_name>

  title	<topicn title>

  title.de <topicn german title>

</code>



You will notice that subtopics can be used, the separator being <nowiki>/</nowiki>. The topic name is composed of alphanumerics (0-1a-zA-Z) or underscores (_). The order in which the topics are listed is respected in //WWSympa//'s homepage. The ''visibility'' line defines who can view the topic and subtopics. It refers to the associated ''topics_visibility'' authorization scenario. You will find a sample ''topics.conf'' in the ''sample'' directory; NONE is installed as the default.



A default topic is hard-coded in Sympa: ''default''. This default topic contains all lists for which a topic has not been specified.







======  Authorization scenarios ======



See [[authorization-scenarios|Authorization scenarios]].









======  Custom parameters ======



You can create an unlimited number of custom parameters to be used with [[authorization-scenarios|authorization scenarios]], [[#web_template_files|web templates]] and [[#template_file_format|mail templates]].



These parameters are defined in each list configuration through the web interface by using the form in //Admin -> Edit list config -> Miscellaneous// page. There, you add a parameter in the **custom parameters (custom_vars)** section.

The **var name** field corresponds to your custom parameter name, the **var value** field corresponds to your custom parameter value.



You can later access this parameter:



  * in scenarios : with the syntax ''<nowiki>[custom_vars->your_custom_var_name]</nowiki>''

  * in web or mail templates : with the syntax ''custom_vars.your_custom_var_name''







==== Example ====



You define a custom parameter with the following values:



  * var name : ''sisterList''

  * var value : ''math-teachers''



You can use it as follows:



  * in scenarios : with the syntax ''<nowiki>[custom_vars->sisterList]</nowiki>'', which will correspond to "math-teachers"

  * in web or mail templates : with the syntax ''custom_vars.sisterList'', which will correspond to "math-teachers"



====== Custom user attributes ======



If the user description parameters available in Sympa don't suit your needs, you can define your own description attributes. These attributes can be used when moderating subscription or message moderation. They provide additional, useful informations, when making a decision.



===== Custom attributes definition =====



These attributes are defined in the list configuration by the [[:manual:parameters-others#custom_attribute|custom_attribute list parameter]].\\

You can define as many attributes as you like.





===== How are the custom attributes values obtained from users? =====



Users can provide the information expected by your custom attributes on two occasions :



  * when //subscribing// to the list through the web interface. After hitting the "subscribe" button, the user is presented a form, each field of which corresponds to a custom attribute.



{{manual:sub_form.png|}}



  * when //modifying their profile// through the web interface.



{{manual:sub_options.png|}}



===== How is it stored? =====



The custom attributes are stored as XML fragments in the [[internals:index#subscriber_table|subscriber_table table]]. This fragment is located in the ''custom_attribute_subscriber'' field.



Here is an example of such an XML fragment, which contains two custom attributes :



  * the first one has the id "accr" and has the value "ultra-violet";

  * the second one has thee id "pt" and has the value "0".



<code xml>

<?xml version="1.0" encoding="UTF-8" ?>

  <custom_attributes>

    <custom_attribute id="accr">

      <value> ultra-violet</value>

    </custom_attribute>

    <custom_attribute id="pt">

      <value>0</value>

    </custom_attribute>

  </custom_attributes>

</code>



===== So, what can you do with that feature? =====



the custom attributes are displayed for each user in the subscribers review of the web interface.



You can use these attributes to [[:manual_6.1:message-handling#customizing_messages|customize messages]].



====== Loop detection ======



Sympa uses multiple heuristics to avoid loops in Mailing lists.



First, it rejects messages coming from a robot (as indicated by the ''From:'' and other header fields) and messages containing commands.



Second, every message sent by Sympa includes an ''X-Loop'' header field set to the listname. If the message comes back, Sympa will detect that it has already been sent (unless ''X-Loop'' header fields have been erased).



Third, Sympa keeps track of Message IDs and will refuse to send multiple messages with the same message ID to the same mailing list.



Finally, Sympa detect loops arising from command reports (i.e. sympa-generated replies to commands). This sort of loop might occur as follows:



  - X sends a command to Sympa

  - Sympa sends a command report to X

  - X has installed a home-made vacation program replying to messages

  - Sympa processes the reply and sends a report

  - Looping to step 3



Sympa keeps track (via an internal counter) of reports sent to any particular address. The loop detection algorithm is:



  * increment the counter

  * If we are within the sampling period (as defined by the ''loop_command_sampling_delay'' parameter)

    * If the counter exceeds the ''loop_command_max'' parameter, then do not send the report, and notify listmasters

    * Else, start a new sampling period and reinitialize the counter, i.e. multiply it by the ''loop_command_decrease_factor'' parameter













====== Tasks ======



See [[manual:customizing:tasks|the dedicated chapter]].
======  Bounce management ======



Automatic bounce management is a key feature in a modern mailing list server. Sympa provide automatic handling of delivery Status notification (DSN) and message delivery notification (MDN). This is mainly used in order to detect wrong subscriber email address and remove them from list. But you can use it to block list with too many wrong addresses or for message tracking.



The default Sympa configuration is good enough to automatically remove users that are in error for a long time and keep bounce rate low enough. This is important because list server with many invalid address may be blacklisted as a spam source. In addition, sending messages to wrong address is usefulness and may stress the relaying MTA.



Bounces are received at the ''mylist-owner'' address (note that the ''-owner'' suffix can be customized, see [[:manual:conf-parameters/part3#return_path_suffix|return_path_suffix]]), which should be sent to the ''bouncequeue'' program through aliases:



  samplelist-owner: "|/home/sympa/bin/bouncequeue samplelist"



''bouncequeue'' (see [[organization#binaries|Binaries]]) stores bounces in a ''/home/sympa/spool/bounce/'' spool.



Bounces are then processed by the ''bounced.pl'' daemon. This daemon analyses bounces to find out which email addresses are concerned and what kind of error was generated. If bouncing addresses match a subscriber's address, information is stored in the Sympa database (in ''subscriber_table''). Moreover, the most recent bounce itself is archived in ''bounce_path/mylist/email'' (where ''bounce_path'' is defined in a ''wwsympa.conf'' parameter and email is the user email address).  Note that the ''OTHER/'' subdirectory gathers all bounces that could not get analyzed to determine the bouncing address.



When reviewing a list, bouncing addresses are tagged as bouncing. You may access further information such as dates of first and last bounces, number of bounces received for the address, the last bounce, etc.



With this information, the automatic bounce management is possible:



The automatic task ''eval_bouncer'' gives a score for each bouncing user. The score, between 0 to 100, allows the classification of bouncing users in two levels (level 1 or 2). According to the level, automatic actions are executed periodically by the ''process_bouncers'' task.



The score evaluation main parameters are:

  * ''Bounces count'': the number of bouncing messages received by Sympa for the user.

  * ''Type rate'': bounces are classified depending on the type of errors generated on the user side. If the error type is ''mailbox is full'' (i.e. a temporary 4.2.2 error type), the type rate will be 0.5, whereas permanent errors (5.x.x) have a type rate equal to 1.

  * ''Regularity rate'': this rate tells whether bounces were received regularly, compared to list traffic. The list traffic is deduced from the ''msg_count'' file data.



The score formula is: <code>Score = bounce_count * type_rate * regularity_rate</code>



To avoid making decisions (i.e. defining a score) without enough relevant data, the score is not evaluated if:

  * The number of received bounces is lower than ''minimum_bouncing_count'' (see [[:manual:conf-parameters/part3#minimum_bouncing_count|minimum_bouncing_count]]).

  * The bouncing period is shorter than ''minimum_bouncing_period'' (see [[:manual:conf-parameters/part3#minimum_bouncing_period|minimum_bouncing_period]]).



Bouncing list member entries expire after a given period of time. The default period is 10 days, but it can be customized if you write a new ''expire_bounce'' task (see [[:manual:conf-parameters/part3#expire_bounce_task|expire_bounce_task]]).



You can define the limit between each level through the **List configuration pannel**, in subsection **Bounce settings** (see [[parameters-bounces#bouncers_level1|bouncers_level1]]). The principle consists in associating a score interval with a level.



You can also define which action must be applied on each category of user (see [[parameters-bounces#bouncers_level1|bouncers_level1]]). Each time an action will be performed, a notification email will be sent to the person of your choice (see [[parameters-bounces#bouncers_level1|bouncers_level1]]).





====== VERP ======



VERP (Variable Envelop Return Path) is used to ease automatic recognition of subscribers email addresses when receiving a bounce. If VERP is enabled, the subscriber address is encoded in the return path itself, so that the Sympa bounce management process (bounced) will use the address the bounce was received for to retrieve the subscriber email. This is very useful because sometimes, non delivery report do not contain the initial subscriber email address but an alternative address where messages are forwarded. VERP is the only solution to detect automatically these subscriber errors. However, the cost of VERP is significant, indeed VERP requires to distribute a separate message for each subscriber and breaks the bulk emailer grouping optimization.



In order to benefit from VERP and keep the distribution process fast, Sympa enables VERP only for a share of the list members. If ''verp_rate'' (see [[:manual:conf-parameters:part3#verp_rate|verp_rate]]) is 10%, then after 10 messages distributed in the list all subscribers have received at least one message where VERP was enabled. Later, distribution message enables VERP also for all users where some bounces were collected and analyzed by the previous VERP mechanism.



If VERP is enabled, the format of the messages return path are as follows:



<code>Return-Path: <bounce+user==a==userdomain==listname@listdomain></code>



Note that you need to set a mail alias for the generic bounce+* alias (see [[:manual:mail-aliases#robot_aliases|Robot aliases]]).



====== Message tracking ======



List owner can verify message delivery and reception for each message using a special feature that can configutred for a robot or a list. 



This feature  was added in version 6.2. It's a contribution from french army "DGA Maitrise de l'Information". If the list is configured for tracking, outgoing messages include a "delivery status notification" request and optionnaly a "return receipt" request. This allows list owner to verify for **each mail** who did not received the message but also who received it and who displayed it. 



Notification (both positive status and negative status are stored and can be used later to prove that a message was delivered or displayed by its recipient.



When active tracking overright VERP parameter to 100%. Of course, tracking may be expensive. 



Two different mode can be use for tracking : 

  * DSN : Sympa will just require **D**elivery **S**tatus **N**otification . This is a ESMTP service that will not be viewed by recipients. This service may or may not be implemented by remote MTAs.

  * MDN : in that case Sympa will require both DSN and **M**essage **D**elivery **N**otification. This service is usually prompted to recipient that may accept to send back a delivery or not. Because this may be surprising for subscribers and also because this may be used by spammers we suggest you not to use this feature unless subscribers are informed previously.



Tracking feature is accessible in archive web page when list owner display a message where tracking was actived. It require to support VERP so a plussed aliases is needed. 





See [[.:parameters-bounces#tracking|list tracking configuration parameters]]



The following screen copy is a part of the tracking information of one message from a list archive. Email address are hidden in this image for privacy reason.



{{:manual:screen_shot_tracking.png|}} 



====== ARF ======



ARF (Abuse Feedback Reporting Format) is a standard for reporting abuse. It is implemented mainly in the AOL email user interface. AOL servers propose to mass mailer to received automatically the users complain by formated messages. Because many subscribers do not remember how to unsubscribe they use ARF when provided by their user interface. It may be useful to configure the ARF management in Sympa. It is really simple: all what you have to do is to create a new alias for each virtual robot as the following:



  abuse-feedback-report:       "| /home/sympa/bin/bouncequeue sympa@samplerobot"



Then register this address as your loop back email address with ISP (for exemple AOL). This way, messages to that email adress are processed by the bounced deamon and opt-out opt-out-list abuse and automatically processed. If the bounce service can remove a user, the message report feedback is forwarded to the list owner. Unrecognized messages are forwarded to the listmaster.

====== Antivirus ======



Sympa lets you use an external antivirus solution to check incoming mails. In this case you must set the ''antivirus_path'' and ''antivirus_args'' configuration parameters (see [[conf-parameters#Antivirus_plug-in|Antivirus_plug-in]]. Sympa is already compatible with McAfee/uvscan, Fsecure/fsav, Sophos, AVP, Trend Micro/VirusWall and Clam Antivirus. For each email received, Sympa extracts its MIME parts in the ''/home/sympa/spool/tmp/antivirus'' directory and then calls the antivirus software to check them. When a virus is detected, Sympa looks for the virus name in the virus scanner STDOUT and sends a ''your_infected_msg.tt2'' warning to the sender of the email. The dmail is saved as 'bad' and the working directory is deleted (except if Sympa is running in debug mode).
====== How does Sympa deal with spams ? ======



===== What antispam_feature does, and what it does not do =====



spam_status/antispam_feature just tells sympa how to determine **whether a message is believed to be spam or not.**  



It does not tell sympa **what to do** with spam messages.



If the send scenario for a list would let the message through to the list, the fact that it is believed to be spam does not change that. 



IF a message is moderated for some other reason, sympa treats it specially if it is tagged as spam by the spam_status/antispam_feature.  



So, to have all spam messages moderated, your send scenario needs to set up to do this.



===== Background =====



Spams is a real and complex problem for mailing list services. Of course the configuration must prevent your list server from distributing spam messages to list members. This is quite easy to ensure for most mailing lists. Private lists ((those where only list members can submit messages)) and moderated lists ((those where messages are subject to moderator approval)). Sympa provides a more sophisticated moderation process where only messages that verify a defined set of conditions are submitted to the moderator. These conditions, described in [[:manual:authorization-scenarios|scenario]], are the common way to block spams.



This approach has been sufficient for a long time but now we felt that a more sophisticated mechanism was required to achieve the following goals :

  * how to limit spams forwarded to moderators ?

  * how to be sure that a moderator will not accept a spam by mistake ?

  * how to deal with public mailing lists ((those where anyone can post a message. Public mailing lists are very useful in various cases. Example : sympa-authors@renater.fr)) 

  * how to prevent my list server to be added in blacklists ?

  * how to limit the mailing list server to be a new source of unwanted emails sending automatic responses to message with a spoofed sender email address ?



 



===== An external spam filter is needed  =====



You should configure a spam filter in your upstream MTA (probably on the MX server) ; it will block most spam messages in front of the Sympa server. Spam filters, such as spamassassin, j-chkmail, spamd, MIMEDefang eliminate most spams. But in many cases they are configured to accept messages (including spam messages) and let the recipient decide what to do with it. In this case the spam filter tags the messages with a specific SMTP header field,  so that the user agent can sort ham and spam.



In Sympa, the send authorization scenario parameter defined for each mailing list, allows to test such SMTP headers fields. There are various scenario conditions that can be used to manage spams. The following rule is an example of a partial solution :



  match([msg_header->X-Spam-Status], /^Yes$/)          smtp,smime -> reject,quiet



This rule, that silently rejects spam messages, could be a nice solution if the spam filter was perfect (ie never tag ham as spam). Unfortunately the spam filter on the front end is not perfect (that's why it does not take the responsibility of removing suspected messages itself). An alternate solution would be to forward spam messages to list moderators, even for public or private mailing lists.



In version 5.5 and later, Sympa shows message tagged as spam in the web message moderation panel. In the following picture, the list moderator in the process of rejecting a spam message ; the author of the message will receive a rejection notification :



{{authors:sympaspam.jpg|}}





In version 6.1 a //spam_status// scenario is introduce not toe define what to do with a spam message but to qualify message as spam, ham or unsure. This scenario is selected by the sympa.conf (or robot.conf) parameter spam_status. This scenario can be used to test multiple message headers with regexp etc. It return 'ham', 'spam', 'unsure' or 'undefine'. Then this is the status of the message while processing it. In scenario this property can tested  as [msg->spam_status] variable. Testing this variable in usefull mainly in send scenario.



Sympa do not forward messages sent to <listname>-request, <listname>-editor or listmaster if [msg->spam_status] is 'spam'. In that case messages are dropped without any notification. In a near futur this will be controled by a specific scenario.





<del>

Of course this spam tagging feature in Sympa requires that Sympa knows how the spam filter tags message as spam or ham. This is the purpose of the following parameters : 

  *[[.conf-parameters/part2#antispam_feature|antispam_feature]]

  *[[.conf-parameters/part2#antispam_tag_header_name|antispam_tag_header_name]]

  *[[.conf-parameters/part2#antispam_tag_header_spam_regexp|antispam_tag_header_spam_regexp]]

  *[[.conf-parameters/part2#antispam_tag_header_ham_regexp|antispam_tag_header_ham_regexp]]



By default the spam detection feature is disabled. If the feature is enabled, Sympa acts as described below:

</del>



  - messages recognized as spam received by the Sympa main email address are ignored, no notification is sent. This is applied also for messages sent to <list>-subscribe and <list>-unsubscribe

  - in the moderation process, messages suspected to be spams are tagged on the web interface (as shown in the picture above). A notification is sent to the list editors but the message itself is not attached the usual way to the moderation notification message that is sent to moderators. This prevents the notification message from being tagged as spam because it may include spam ; it also prevents your mailing server from being classified as a source of spam. So list moderator can only do their moderation job through the web interface.

  - no notification is sent to the author of a message considered as spam, even if the authorization scenario tells to do so.



<note warning>

not yet developed :

  * If a message is received for any service that scenario output is "request_auth", sympa should ignore it and drop quietly the message.

</note>



==== Reporting undetected spams====



List editor may want to signal undetected spams. In thise case the message they have received as an message/rfc822 attachement should be transmitted preserving headers. Unfortunately, many MUA do not forward properly messages. The best solution is to use the message stored in Sympa moderation spool. This can be done from list moderator interface while rejecting a message, an option allows to process each dedicated message by an external script. A robot parameter is used to specify the script path Sympa will lunch and dump the message in script STDIN : 



  *[[.conf-parameters/part2#reporting_spam_script_path|reporting_spam_script_path]]



[[http://www.sympa.org/contribs/index|Sympa contribs repository]] propose at least two example of that sort of script, one forwarding the message in an ARF format, the second one moving the message to a dedicated folder of an imap server.





===== nrcpt_by_domain.conf  =====



If you manage a list with many list members belonging to the same ISP, this ISP may consider your MTA as a source of spam, because Sympa uses a bulk emailer to submit a message to a couple recipients in a single SMTP session. This can ne controlled by the [[.conf-parameters:part2#nrcpt|nrcpt parameter]] and [[organization#nrcpt_by_domain.conf|nrcpt_by_domain.conf]]]





====== DKIM features for Sympa ======



<note important>

DKIM has been introduced in Sympa version **6.1**. 

</note>



DKIM is a crytographic signature method designed to prevent spam, phishing etc. As postmaster or listmaster you should consider 1) checking the DKIM status of each incoming message and 2) signing all or a subset of outgoing messages. 



Processing of DKIM status of incoming messages is done by the MTA (Message transfert Agent) that delivers emails to the Sympa server Sympa domain (in order to reject some messages). This topic is not addressed in the chapter of the documentation.



The mailing list server can take advantage of incoming DKIM signature in order to measure the trust of the message while evaluating message workflow. This is based on [[.:authorization-scenarios|scenario mechanism]]. An authentication level named ''dkim'' can be used within scenario rules to check that an incoming message has a valid DKIM signature (dkim signature status = pass).



In addition, you must consider signature of outgoing messages. Should messages brodcasted by Sympa to list subscribers be signed by your organization? Should all of them be signed? Should a subset of trusted messages be signed? Should service messages (automatic answer, welcome messages etc) be signed  ?  



===== Prerequisites =====



DKIM features in Sympa are based on the **Mail::DKIM** cpan module ; you should install it first. Check [[/manual/installing-sympa#installing_perl_and_cpan_modules|the documentation related to cpan modules installation]].



===== Incoming messages =====



To make Sympa check the DKIM signature of incoming messages, you need to set the [[.:conf-parameters:part3|dkim_feature]] configuration parameter to ''on''.  Before doing that you must first update your customized scenario to introduce ''dkim'' authentication method, **otherwise Sympa may reject messages because they include a valid DKIM signature !**. All default scenario starting at version 6.1 already include rules for DKIM, both for command and lists messages. 



**What kind of changes is required in scenarios?**



Turning on the [[.:conf-parameters:part3|dkim_feature]] configuration parameter will provide a new authentication level to the scenario engine. Scenario evaluation for incoming messages with a valid DKIM signature (but no S/MIME signature) will be evaluated with authentication method ''dkim''. So rules that use authentication method ''smtp'' will not match. 



Example:

<code>

  is_subscriber([listname],[sender])   smtp      request_auth

  is_subscriber([listname],[sender])   md5,smime request_auth

</code>



Those 2 rules will not match any messsage with a valid DKIM signature, you must replace them with one of the following:

<code>

  is_subscriber([listname],[sender])   smtp,dkim request_auth

  is_subscriber([listname],[sender])   md5,smime request_auth



  is_subscriber([listname],[sender])   smtp           request_auth

  is_subscriber([listname],[sender])   dkim,md5,smime request_auth

</code>



If you choose the second solution, you accept DKIM as a valid authentication mecanism.  





<note tip>

If the front MTA adds the [[http://www.ietf.org/rfc/rfc5451.txt|Authentication-results header]], Sympa can of course check this SMTP header field using standard match() and equal() scenario conditions.

</note>



===== Outgoing messages =====



You may want to make Sympa sign outgoing messages.  Almost every aspects of DKIM signature behavior can be customized via Sympa configuration parameters. Please check the [[manual_6.1:conf-parameters:part3#dkim|DKIM parameters section]] for further details. Note that each parameter can also be set for a given virtual robot; and most of them are available as list parameter. 



==== Which messages should be signed ====



In order to configure Sympa for signing  outgoing messages, you have to decide **which messages Sympa should sign **.  This should be decided for four kind of messages:

  * Services messages : these are all messages sent by Sympa itself : welcome messages, answers to mail commands, various notification such as //remind message// and digest messages;

  * List messages : messages distributed to list members (where the initial ''From:'' header is preserved). These messages will fall is one one the following subcategory:

    * authenticated messages (using S/MIME signature, challenge or password);

    * received with a valid DKIM signature;

    * validated by one of the list editors;

    * other messages.



This behavior is controlled by [[manual_6.1:conf-parameters:part3#dkim_add_signature_to|dkim_add_signature_to]] and [[manual_6.1:conf-parameters:part3#dkim_signature_apply_on]] parameters. 





==== Prerequisites for DKIM signing ====



Before Sympa is able to DKIM-sign messages, you need to set several related parameters. The most important ones are [[manual_6.1:conf-parameters:part3#dkim_private_key_path]] (private key file location) and [[manual_6.1:conf-parameters:part3#dkim_selector]]. Other parameters related to RFC 4871: [[manual_6.1:conf-parameters:part3#dkim_signer_domain]], [[manual_6.1:conf-parameters:part3#dkim_signer_identity]],[[manual_6.1:conf-parameters:part3#dkim_header_list]].



The private key is a PEM encoded RSA key ((The private key can't be encrypted with a passphase)) (a PEM encoded key include base64 encoded informations and starts with ''—–BEGIN RSA PRIVATE KEY—–''.). The public key associated with that private key must be published in a DNS TXT record for entry ''<selector>._domainkey.<domain>'' where ''<selector>'' is [[manual_6.1:conf-parameters:part3#dkim_selector|dkim_selector]] and ''<domain>'' is [[manual_6.1:conf-parameters:part3#dkim_signer_domain|dkim_signer_domain]]. The signer domain should be the domain of the list ; this is the default, don't change it unless you have strong reason for it.



example with selector = 'lists' and domain 'sympa.org':

<code>

  lists._domainkey.sympa.org. IN TXT "v=DKIM1; g=*; k=rsa; t=y; p=MDB34............DB"

</code>



In order to generate the public and private keys, you may use ''openssl'' or ''dkim-genkey'' included in  [[http://sourceforge.net/projects/dkim-milter/|milter_dkim software]]. There are also online tools to generate them, but those services will generate the private key for you (is it still a private key?).  

    * http://www.socketlabs.com/services/dkwiz

    * http://www.port25.com/support/support_dkwz.php



===== Summary of parameters =====



^  parameter name (sympa.conf or robot.conf context)   ^  default  ^  overwritten by (list configuration)  ^

|[[manual_6.1:conf-parameters:part3#dkim_feature|dkim_feature]]  | ''off'' |not pertinent    |

|[[manual_6.1:conf-parameters:part3#dkim_add_signature_to|dkim_add_signature_to]]  |''list,robot'' |not pertinent  |

|[[manual_6.1:conf-parameters:part3#dkim_signature_apply_on|dkim_signature_apply_on]]  |''md5_authenticated_messages,smime_authenticated_messages,''\\ ''dkim_authenticated_messages,editor_validated_messages''|''dkim_signature_apply_on''   |

|[[manual_6.1:conf-parameters:part3#dkim_private_key_path|dkim_private_key_path]]  |  |dkim~~SP~~>~~SP~~key_path  |

|[[manual_6.1:conf-parameters:part3#dkim_signer_domain|dkim_signer_domain]]  |the robot domain  |dkim~~SP~~>~~SP~~signer_domain  |

|[[manual_6.1:conf-parameters:part3#dkim_selector|dkim_selector]]  |no default  | dkim~~SP~~>~~SP~~signer_domain  |

|[[manual_6.1:conf-parameters:part3#dkim_signer_identity|dkim_signer_identity]]  |none for robot's messages, <listname>-request@robot for lists|dkim~~SP~~>~~SP~~identity_domain  |

|<del>[[manual_6.1:conf-parameters:part3#dkim_header_list|dkim_header_list]]</del>  |as recommended in RFC4871  | OBSOLETE |

====== Using Sympa with LDAP ======



LDAP is a client-server protocol for accessing a directory service. Sympa provide various features based on access to one or more LDAP directories:



  * authentication using LDAP directory instead of the Sympa internal storage of password (see [[authentication#auth.conf|auth.conf]]);

  * named filters used in authorization scenario condition (see [[authorization-scenarios#named_filters|Named Filters]]);

  * LDAP extraction of list subscribers (see [[parameters-data-sources#user_data_source|user_data_source]]);

  * LDAP extraction of list owners or editors (see [[list-definition#data_inclusion_file|Data inclusion file]]);

  * mail aliases stored in LDAP (see [[mail-aliases#alias_manager|Alias manager]]).
====== Sympa with S/MIME and HTTPS ======



S/MIME is a cryptographic method for MIME messages based on X509 certificates. Before installing Sympa S/MIME features (which we call S/Sympa), you should be under no illusion about what the S stands for: ''S/MIME'' means ''Secure MIME''. That S certainly does not stand for ''Simple''.



The aim of this chapter is simply to describe what security level is provided by Sympa while using S/MIME messages, and how to configure Sympa for it. It is not intended to teach anyone what S/MIME is and why it is so complex! RFCs number 2311, 2312, 2632, 2633 and 2634, along with a lot of literature about S/MIME, PKCS#7 and PKI is available on the Internet. Sympa 2.7 is the first version of Sympa to include S/MIME features as beta-testing features.



======  Signed message distribution ======



No action required. You probably imagine that any mailing list manager (or any mail forwarder) is compatible with S/MIME signatures, as long as it respects the MIME structure of incoming messages. You are right. Even Majordomo can distribute a signed message! As Sympa provides MIME compatibility, you do not need to do anything in order to allow subscribers to check signed messages distributed through a list. This is not an issue at all, since any process that distributes messages is compatible with end user signing processes. Sympa simply skips the message footer attachment (see [[list-definition#message_header_and_footer|Message header and footer]]) to prevent any body corruption which would break the signature.



====== Use of S/MIME signatures by Sympa itself ======



Sympa is able to check S/MIME signatures in order to apply S/MIME authentication methods for message handling. Currently, this feature is limited to the distribution process as well as to any commands Sympa might find in the message body. The reasons for this restriction are related to current S/MIME usage. S/MIME signature structure is based on the encryption of a digest of the message. Most S/MIME agents do not include any part of the message headers in the message digest, so anyone can modify the message header without signature corruption! This is easy to do: for example, anyone can edit a signed message with their preferred message agent, modify whatever header they want (for example ''Subject:'' , ''Date:'' and ''To:'', and redistribute the message to a list or to the robot without breaking the signature.



So Sympa cannot apply the S/MIME authentication method to a command parsed in the ''Subject:'' field of a message or through the ''-subscribe'' or ''-unsubscribe'' email addresses.



======  Use of S/MIME encryption ======



We assume that S/Sympa distributes message as received, i.e. encrypted when the list receives it as an encrypted message.



In order to be able to send encrypted messages to a list, the sender needs to use the X509 certificate of the list. Sympa will send an encrypted message to each subscriber using the subscriber's certificate. To provide this feature, Sympa needs to manage one certificate for each list and one for each subscriber. This is available in Sympa version 2.8 and above.



======  S/Sympa configuration ======



===== Installation =====



The only requirement is OpenSSL [[http://www.openssl.org]] version 0.9.5a and above. OpenSSL is used by Sympa as an external plugin (like sendmail or postfix), so it must be installed with the appropriate access (x for sympa.sympa).



===== Managing user certificates =====



User certificates are automatically caught by Sympa when receiving a signed S/MIME messsage, so if Sympa needs to send encrypted messages to this user, it can perform encryption using this certificate. This works fine, but it is not conpliant with the PKI theory: Sympa should be able to search for user certificates using a PKI certificate directory (LDAP).



That's why Sympa tests the key usage certificate attribute to known if the certificate allows both encryption and signature.



Certificates are stored as PEM files in the ''/home/sympa/list_data/X509-user-certs/'' directory. Files are named user@some.domain@enc or user@some.domain@sign (the ''@enc'' and ''@sign'' suffixes are used according to certificates usage). No other tool is provided by Sympa in order to collect this certificate repository, but you can easily imagine your own tool to create those files.



===== Configuration in sympa.conf =====



The S/Sympa configuration is very simple. If you are used to Apache SSL, you should not feel lost. If you are an OpenSSL guru, you will feel at home, and there may even be changes you will wish to suggest to us.



The basic requirement is to let Sympa know where to find the binary file for the OpenSSL program and the certificates of the trusted certificate authority. This is made using the optional parameters ''openSSL'' and ''capath'' and / or ''cafile''.



  * ''[[:manual:conf-parameters:part3#openssl|openssl]]'': the path for the OpenSSL binary file, usually ''/usr/local/ssl/bin/openSSL'';

  * ''[[:manual:conf-parameters:part3#cafile|cafile]]'' (or ''[[:manual:conf-parameters:part3#capath|capath]]''): the path of a bundle (or path of the directory) of trusted CA certificates. The file ''~/home/sympa/bin/etc/cabundle.crt'' included in Sympa distribution can be used. \\ The ''cafile'' file (or the ''capath'' directory) should be shared with your Apache+mod_ssl configuration. This is required because Sympa's web interface gets user certificates information from Apache mod_ssl module;

  * ''[[:manual:conf-parameters:part3#key_password|key_password]]'': the password used to protect all list private keys.



===== Configuration to recognize S/MIME signatures =====



Once ''OpenSSL'' has been installed and ''sympa.conf'' configured, your S/Sympa is ready to use S/MIME signatures for any authentication operation. You simply need to use the appropriate authorization scenario for the operation you want to secure (see [[authorization-scenarios#authorization_scenarios|Authorization scenarios]]).



When receiving a message, Sympa applies the authorization scenario with the appropriate authentication method parameter. In most cases, the authentication method is ''smtp'', but in cases where the message is signed and the signature has been checked and matches the sender email, Sympa applies the ''smime'' authentication method.



It is essential to ensure that if the authorization scenario does not recognize this authentication method, the operation requested will be rejected. Consequently, authorization scenarios distributed prior to version 2.7 are not compatible with the OpenSSL configuration of Sympa. All standard authorization scenarios (those distributed with sympa) now include the ''smime'' method. The following example is named ''send.private_smime'', and restricts sending to subscribers using an S/mime signature:



<code>

  title.us restricted to subscribers check SMIME signature

  title.fr limité aux abonnés, vérif de la signature SMIME



  is_subscriber([listname],[sender])             smime  -> do_is_editor([listname],[sender])                 smime  -> do_it

  is_owner([listname],[sender])                  smime  -> do_it

</code>



It as also possible to mix various authentication methods in a single authorization scenario. The following example, ''send.private_key'', requires either an MD5 return key or an S/MIME signature:



<code>

  title.us restricted to subscribers with previous MD5 authentication

  title.fr réservé aux abonnés avec authentification MD5 préalable



  is_subscriber([listname],[sender]) smtp          -> request_auth

  true()                             md5,smime     -> do_it

</code>



===== distributing encrypted messages =====



In this section, we describe S/Sympa encryption features. The goal is to use S/MIME encryption for distribution of a message to subscribers whenever the message has been received encrypted from the sender.



Why is S/Sympa concerned by the S/MIME encryption distribution process ? It is because encryption is performed using the **recipient** X509 certificate, whereas the signature requires the sender's private key. Thus, an encrypted message can be read by the recipient only if he or she is the owner of the private key associated with the certificate. Consequently, the only way to encrypt a message for a list of recipients is to encrypt and send the message for each recipient. This is what S/Sympa does when distributing an encrypted message.



The S/Sympa encryption feature in the distribution process assumes that Sympa has received an encrypted message for some list. To be able to encrypt a message for a list, the sender must have some access to an X509 certificate for the list. So the first requirement is to install a certificate and a private key for the list. The mechanism whereby certificates are obtained and managed is complex. Current versions of S/Sympa assume that list certificates and private keys are installed by the listmaster using the ''/home/sympa/bin/p12topem.pl'' script. This script allows you to install a PKCS#12 bundle file containing a private key and a certificate using the appropriate format.



It is a good idea to have a look at the OpenCA documentation ([[http://www.openssl.org]]) and/or PKI providers' web documentation. You can use commercial certificates or home-made ones. Of course, the certificate must be approved of for email applications, and issued by one of the trusted CA's described in the ''cafile'' file or the ''capath'' Sympa configuration parameter.



The list private key must be installed in a file named ''/home/sympa/list_data/mylist/private_key''. All the list private keys must be encrypted using a single password defined by the ''password'' parameter in ''sympa.conf''.



====  Use of navigator to obtain X509 list certificates ====



In many cases email X509 certificates are distributed through a web server and loaded into the browser using your mouse: Mozilla or internet Explorer allow certificates to be exported to a file.



Here is a way to install a certificat for a list:



  * Get a list certificate is to obtain a personal email certificate for the canonical list address in your browser as if it was your personal certificate.

  * Export the intended certificate it. The format used by Netscape is ''pkcs#12''. Copy this file to the list home directory.

  * Convert the pkcs#12 file into a pair of PEM files: ''cert.pem'' and ''private_key'', using the ''/home/sympa/bin/p12topem.pl'' script. Use ''p12topem.pl -help'' for details.

  * Be sure that ''cert.pem'' and ''private_key'' are owned by sympa with ''r'' access.

  * As soon as a certificate is installed for a list, the list homepage includes a new link to load the certificate in the user's browser, and the welcome message is signed by the list.



======  Managing certificates with tasks ======



You may automate the management of certificates with two global task models provided with Sympa. See [[customizing#tasks|Tasks]] to know more about tasks. Report to the [[conf-parameters#chk_cert_expiration_task|chk_cert_expiration_task]] and [[conf-parameters#crl_update_task|crl_update_task]] ''sympa.conf'' parameters to configure your Sympa to use these facilities.



=====  chk_cert_expiration.daily.task model =====



A task created with the model ''chk_cert_expiration.daily.task'' checks every day the expiration date of certificates stored in the ''/home/sympa/list_data/X509-user-certs/'' directory. The user is warnt with the ''daily_cert_expiration'' template when his/her certificate has expired or is going to expire within three days.



=====  crl_update.daily.task model =====



You may use the model ''crl_update.daily.task'' to create a task which daily updates the certificate revocation lists when needed.
======  Using Sympa commands ======



Users interact with Sympa, of course, when they send messages to one of the lists, but also indirectly through administrative requests (subscription, list of users, etc.).



This section describes administrative requests, as well as interaction modes in the case of private and moderated lists. Administrative requests are messages whose body contains commands understood by Sympa, one per line. These commands can be indiscriminately placed in the ''Subject:'' or in the body of the message. The ''To:'' address is generally the ''Sympadomain'' alias, although it is also advisable to recognize the ''listservdomain'' address.



Example:

<code>

  From: pda@prism.uvsq.fr

  To: Sympa@renater.fr



  LISTS

  INFO Sympa-users

  REVIEW Sympa-users

  QUIT

</code>



Most user commands have three-letter abbreviations (e.g. ''REV'' instead of ''REVIEW'').



======  User commands ======



  * ''HELP'' \\ Provides instructions for the use of Sympa commands. The result is the content of the ''helpfile.tt2'' template file.

  * ''INFO'' //listname// \\ Provides the parameters of the list specified (owner, subscription mode, etc.) and its description. The result is the content of ''~welcome[.mime]''.

  * ''LISTS'' \\ Provides the names of lists managed by Sympa. This list is generated dynamically, using the ''visibility'' parameter (see [[parameters-definition#visibility|Visibility]]). The ''lists.tt2'' template defines the message returned by the ''LISTS'' command.

  * ''REVIEW'' //listname// \\ Provides the addresses of subscribers if the run mode authorizes it. See the [[parameters-privileges#review|review parameter]] for the configuration file of each list, which controls read authorizations for the subscriber list. Since subscriber addresses can be abused by spammers, it is strongly recommended that you **only authorize owners to access the subscriber list**.

  * ''WHICH'' \\ Returns the list of lists to which one is subscribed, as well as the configuration of his or her subscription to each of the lists (DIGEST, NOMAIL, SUMMARY, CONCEAL).

  * ''STATS'' //listname// \\ Provides statistics for the specified list: number of messages received, number of messages sent, megabytes received, megabytes sent. This is the contents of the ''stats'' file. \\ Access to this command is controlled through the ''review'' parameter.

  * ''INDEX'' //listname// \\ Provides index of archives for the list specified. Access rights to this function are the same as for the ''GET'' command.

  * ''GET'' //listname// //archive// \\ To retrieve archives for list (see above). Access rights are the same as for the ''REVIEW'' command. See the [[parameters-privileges#review|review parameter]].

  * ''LAST'' //listname// \\ To receive the last message distributed in a list (see above). Access rights are the same as for the ''GET'' command.

  * ''SUBSCRIBE'' //listname firstname name// \\ Requests sign-up to the specified list. The //firstname// and //name// parameters are optional. If the list is configured with a restricted subscription (see the [[parameters-privileges#subscribe|subscribe parameter]]), this command is sent to the list owner for approval.

  * ''INVITE'' //listname user@host name// \\ Invites someone to subscribe to the list specified. The //name// parameter is optional. The command is similar to ''ADD'', but the person specified is not added to the list but invited to subscribe to it in accordance with the [[parameters-privileges#subscribe|subscribe parameter]].

  * ''SIGNOFF'' //listname// [ //user@host// ] \\ Requests unsubscription from the specified list. ''SIGNOFF *'' means unsubscription from all lists.

  * ''SET'' //listname// ''DIGEST'' \\ Puts the subscriber in //digest// mode for the //listname// list. Instead of receiving email from the list in a normal manner, the subscriber will periodically receive it in a digest. This digest compiles a group of messages from the list, using multipart/digest mime format. The sending period for these digests is regulated by the list owner using the [[parameters-sending#digest|digest parameter]]. See the [[sympa-commands#set_mail|SET LISTNAME MAIL command]] and the [[list-definition#subscribers_file|reception parameter]].

  * <BOOKMARK:set_summary>''SET'' //listname// ''SUMMARY'' \\ Puts the subscriber in ''summary'' mode for the //listname// list. Instead of receiving email from the list in a normal manner, the subscriber will periodically receive the list of messages. This mode is very close to the DIGEST reception mode, but the subscriber only receives the list of messages. This option is available only if the digest mode is set.

  * <BOOKMARK:set_nomail>''SET'' //listname// ''NOMAIL'' \\ Puts subscriber in ''nomail'' mode for the //listname// list. This mode is used when a subscriber no longer wants to receive email from the list, but nevertheless wishes to retain the possibility of posting to the list. This mode therefore prevents the subscriber from unsubscribing and subscribing later on. See the [[sympa-commands#set_mail|SET LISTNAME MAIL command]] and the [[list-definition#subscribers_file|reception parameter]].

  * ''SET'' //listname// ''TXT'' \\ Puts subscriber in ''txt'' mode for the //listname// list. This mode is used when a subscriber wishes to receive emails sent in both format, txt/html and txt/plain only, in txt/plain format. See the [[list-definition#subscribers_file|reception parameter]].

  * ''SET'' //listname// ''HTML'' \\ Puts subscriber in ''html'' mode for the //listname// list. This mode is used when a subscriber wishes to receive emails sent in both format, txt/html and txt/plain only, in txt/html format. See the [[list-definition#subscribers_file|reception parameter]].

  * ''SET'' //listname// ''URLIZE'' \\ Puts subscriber in ''urlize'' mode for the //listname// list. This mode is used when a subscriber wishes not to receive attached files. The attached files are replaced by a URL leading to the file stored on the list site. See the [[list-definition#subscribers_file|reception parameter]].

  * ''SET'' //listname// ''NOT_ME'' \\ Puts subscriber in ''not_me'' mode for the //listname// list. This mode is used when a subscriber wishes not to receive back the message that he/she has sent to the list. See [[list-definition#subscribers_file|reception parameter]].

  * <BOOKMARK:set_mail>''SET'' //listname// ''MAIL'' \\ Puts the subscriber in ''normal'' mode (default) for the //listname// list. This option is mainly used to cancel the ''nomail'', ''summary'' or ''digest'' modes. If the subscriber was in ''nomail'' mode, he or she will receive email from the list in a normal manner again. See the [[sympa-commands#set_nomail|SET LISTNAME NOMAIL command]] and the [[list-definition#subscribers_file|reception parameter]]. Moreover, this mode allows message topic subscription (see [[reception-mode#message_topics|Message topics]]).

  * <BOOKMARK:set_conceal>''SET'' //listname// ''CONCEAL'' \\ Puts the subscriber in ''conceal'' mode for the //listname// list. The subscriber will then become invisible during ''REVIEW'' on this list. Only owners will see the whole subscriber list. See the [[sympa-commands#set_noconceal|SET LISTNAME NOCONCEAL command]] and the [[parameters-definition#visibility|Visibility parameter]].

  * <BOOKMARK:set_noconceal>''SET'' //listname// ''NOCONCEAL'' \\ Puts the subscriber in ''noconceal'' mode (default) for the //listname// list. The subscriber will then become visible during ''REVIEW'' of this list. The ''conceal'' mode is therefore cancelled. See the [[sympa-commands#set_conceal|SET LISTNAME CONCEAL command]] and the [[parameters-definition#visibility|Visibility parameter]].

  * ''QUIT'' \\ Ends acceptance of commands. This can be useful when the message contains additional lines, as for example in the case where a signature is automatically added by the user's email program (MUA).

  * ''CONFIRM'' //key// \\ If the ''send'' parameter of a list is set to ''privatekey'', ''publickey'' or ''privateorpublickey'', messages are only distributed in the list after an authentication phase by return mail, using a one-time password (numeric key). For this authentication, the sender of the message is requested to post the ''CONFIRM'' //key// command to Sympa.

  * ''QUIET'' \\ This command is used for silent (mute) processing: no performance report is returned for commands prefixed with ''QUIET''.



======  Owner commands ======



Some administrative requests are only available to list owners. They are essential for all procedures in limited access mode, and to perform requests in place of users. These comands are:



  * ''ADD'' //listname user@host firstname name// \\ Add command similar to ''SUBSCRIBE''. You can avoid user notification by using the ''QUIET'' prefix (i.e.: ''QUIET ADD'').

  * ''DELETE'' //listname user@host// \\ Delete command similar to ''SIGNOFF''. You can avoid user notification by using the ''QUIET'' prefix (i.e.: ''QUIET DELETE'').

  * <BOOKMARK:cmd_remind>''REMIND'' //listname// \\ ''REMIND'' is used by list owners in order to send an individual service reminder message to each subscriber. This message is made by parsing the ''remind.tt2'' file.

  * ''REMIND *'' \\ ''REMIND *'' is used by the listmaster to send to each subscriber of any list a single message with a summary of his/her subscriptions. In this case, the message sent is built by parsing the ''global_remind.tt2'' file. For each list, Sympa tests whether the list is configured as hidden to each subscriber (parameter lparam visibility). By default, the use of this command is restricted to listmasters. Processing may take a lot of time!



These commands can be prefixed with ''QUIET'' to indicate processing without acknowledgment of receipt.



====== Moderator commands ======



If a list is moderated, Sympa only distributes messages enabled by one of its moderators (editors). Moderators have several methods for enabling message distribution, depending on the [[parameters-sending#send|send parameter]].



  * ''DISTRIBUTE'' //listname// //key// \\ If the ''send'' parameter of a list is set to ''editorkey'' or ''editorkeyonly'', each message queued for moderation is stored in a spool (see [[conf-parameters#queuemod|queuemod]]), and linked to a key. The moderator must use this command to enable message distribution.

  * ''REJECT'' //listname// //key// \\ The message with the //key// key will be deleted from the moderation spool of the //listname// list.

  * ''MODINDEX'' //listname// \\ This command returns the list of messages queued for moderation for the //listname// list. The result is presented in the form of an index, which supplies, for each message, its sending date, its sender, its size, and its associated key, as well as all messages in the form of a digest.
...
